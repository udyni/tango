/*----- PROTECTED REGION ID(Picomotor.h) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//=============================================================================
//
// file :        Picomotor.h
//
// description : Include file for the Picomotor class
//
// project :     Picomotor single-axis
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Picomotor_H
#define Picomotor_H

#include <tango.h>

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif

/*----- PROTECTED REGION END -----*/	//	Picomotor.h

/**
 *  Picomotor class description:
 *    Picomotor single axis device server
 */

namespace Picomotor_ns
{
/*----- PROTECTED REGION ID(Picomotor::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class PicomotorDev;

/*----- PROTECTED REGION END -----*/	//	Picomotor::Additional Class Declarations

class Picomotor : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Picomotor::Data Members) ENABLED START -----*/

//	Add your own data members
private:
	PicomotorDev* dev;

/*----- PROTECTED REGION END -----*/	//	Picomotor::Data Members

//	Device property data members
public:
	//	device:	PicomotorProxy device
	string	device;
	//	axis:	Controller axis
	Tango::DevUShort	axis;
	//	polling:	Polling cycle in ms
	Tango::DevULong	polling;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevUShort	*attr_Velocity_read;
	Tango::DevULong	*attr_Acceleration_read;
	Tango::DevLong	*attr_Position_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Picomotor(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Picomotor(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Picomotor(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Picomotor() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Picomotor::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Picomotor::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Velocity related methods
 *	Description: Motor velocity
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Velocity(Tango::Attribute &attr);
	virtual void write_Velocity(Tango::WAttribute &attr);
	virtual bool is_Velocity_allowed(Tango::AttReqType type);
/**
 *	Attribute Acceleration related methods
 *	Description: Motor acceleration
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_Acceleration(Tango::Attribute &attr);
	virtual void write_Acceleration(Tango::WAttribute &attr);
	virtual bool is_Acceleration_allowed(Tango::AttReqType type);
/**
 *	Attribute Position related methods
 *	Description: Motor position
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Position(Tango::Attribute &attr);
	virtual void write_Position(Tango::WAttribute &attr);
	virtual bool is_Position_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Picomotor::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command goHome related method
	 *	Description: Set the home (zero position)
	 *
	 */
	virtual void go_home();
	virtual bool is_goHome_allowed(const CORBA::Any &any);
	/**
	 *	Command setHome related method
	 *	Description: Set the home (zero position)
	 *
	 */
	virtual void set_home();
	virtual bool is_setHome_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: Stop any running movement
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Picomotor::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Picomotor::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	Picomotor::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Picomotor::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

class PicomotorDev : public omni_thread {
public:
	// Constructor
	PicomotorDev(const char* device, int axis, Picomotor* parent);

	// Destructor
	~PicomotorDev();

	// Terminate
	void terminate() { _terminate = true; }

	// Get velocity
	uint16_t getVelocity()const { return _velocity; };

	// Set velocity
	void setVelocity(uint16_t vel);

	// Get velocity
	uint32_t getAcceleration()const { return _acceleration; };

	// Set velocity
	void setAcceleration(uint32_t acc);

	// Get position
	int32_t getPosition()const { return _position; };

	// Move to position
	void moveTo(int32_t pos);

	// Set home
	void setHome();

protected:
	// Send a command that expect a response
	std::string SendCommandWithResponse(const char* command);

	// Send a command that does not expect a response
	void SendCommand(const char* command);

	int32_t readState();

	int32_t readPos();

	static void msleep(uint32_t msec);

	// Check error code after move/set command. Throw exception if the error code is set.
	void check_error_code();

protected:
	// Main loop function
	void* run_undetached(void *arg);

private:
	// Terminate flag
	bool _terminate;

	// Velocity
	uint16_t _velocity;

	// Acceleration
	uint32_t _acceleration;

	// Position
	int32_t _position;

	// Access lock
	omni_mutex _lock;

	// PicomotorProxy device proxy
	Tango::DeviceProxy* _device;

	// Parent device
	Picomotor* _parent;

	// Axis
	int _axis;
	int _address;
};


/*----- PROTECTED REGION END -----*/	//	Picomotor::Additional Classes Definitions

}	//	End of namespace

#endif   //	Picomotor_H
