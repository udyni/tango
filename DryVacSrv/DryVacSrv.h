/*----- PROTECTED REGION ID(DryVacSrv.h) ENABLED START -----*/
//=============================================================================
//
// file :        DryVacSrv.h
//
// description : Include file for the DryVacSrv class
//
// project :     DryVac Device Server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef DryVacSrv_H
#define DryVacSrv_H

#include <tango.h>
#include <stdarg.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <cmath>
#include <omnithread.h>
#ifdef USE_LIBMODBUS
#include <modbus/modbus.h>
#endif
#include <atomic>

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif

// Delays for communication with pump controller
#define DRYVAC_DELAY_CMD    100
#define DRYVAC_DELAY_ENTER  400
#define DRYVAC_DELAY_READ     6

/*----- PROTECTED REGION END -----*/	//	DryVacSrv.h

/**
 *  DryVacSrv class description:
 *    Device server for a Leybold DryVac screw vacuum pump. Depends on libmodbus for serial communication with the pump.
 */

namespace DryVacSrv_ns
{
/*----- PROTECTED REGION ID(DryVacSrv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class DryVacMonitorThread;
class DryVacException;
class EventCallback;

/*----- PROTECTED REGION END -----*/	//	DryVacSrv::Additional Class Declarations

class DryVacSrv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(DryVacSrv::Data Members) ENABLED START -----*/

	friend class DryVacMonitorThread;
	DryVacMonitorThread *dev;

/*----- PROTECTED REGION END -----*/	//	DryVacSrv::Data Members

//	Device property data members
public:
	//	Address:	Address of the pump on RS485 bus
	Tango::DevUShort	address;
	//	PollingTime:	Polling time for attributes from the inverter (in ms)
	Tango::DevLong	pollingTime;
	//	Port:	Serial port for the MODBUS communication
	string	port;
	//	PortConfiguration:	Serial port configuration. A three character string containing:
	//  1) Data bits (5, 6, 7 or 8)
	//  2) Parity (N for none, E for even, O for odd)
	//  3) Stop bits (1 or 2)
	//  Default is `8N1`.
	string	portConfiguration;
	//	PortBaudrate:	Port baud rate (default: 9600)
	Tango::DevLong	portBaudrate;
	//	CompAirDetect:	GPIO bit to check for compressed air presence
	string	compAirDetect;
	//	EnBallast:	GPIO pin to enable ballast
	string	enBallast;
	//	EnPurge:	GPIO pin to enable purge on output bearing
	string	enPurge;
	//	WaterCoolingValve:	Device server that controls the water cooling valve
	string	waterCoolingValve;
	//	AnalogIN:	Analog input attribute for pressure reading
	string	analogIN;
	//	WaterCloseTemperature:	The pump temperature the device server wait before closing the water valve when the pump stops (in °C)
	Tango::DevLong	waterCloseTemperature;
	//	DisableWater:	Disable automatic water valve control by the pump device server
	Tango::DevBoolean	disableWater;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevFloat	*attr_FreqSetpoint_read;
	Tango::DevFloat	*attr_Frequency_read;
	Tango::DevFloat	*attr_Voltage_read;
	Tango::DevFloat	*attr_Current_read;
	Tango::DevFloat	*attr_Power_read;
	Tango::DevShort	*attr_Temperature_read;
	Tango::DevDouble	*attr_Pressure_read;
	Tango::DevBoolean	*attr_EnablePurge_read;
	Tango::DevBoolean	*attr_EnableBallast_read;
	Tango::DevBoolean	*attr_CompressedAir_read;
	Tango::DevState	*attr_WaterValve_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	DryVacSrv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	DryVacSrv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	DryVacSrv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~DryVacSrv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : DryVacSrv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : DryVacSrv::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute FreqSetpoint related methods
 *	Description: Frequency setpoint for the inverter
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_FreqSetpoint(Tango::Attribute &attr);
	virtual void write_FreqSetpoint(Tango::WAttribute &attr);
	virtual bool is_FreqSetpoint_allowed(Tango::AttReqType type);
/**
 *	Attribute Frequency related methods
 *	Description: Converter output frequency
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Frequency(Tango::Attribute &attr);
	virtual bool is_Frequency_allowed(Tango::AttReqType type);
/**
 *	Attribute Voltage related methods
 *	Description: Converter output voltage
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Voltage(Tango::Attribute &attr);
	virtual bool is_Voltage_allowed(Tango::AttReqType type);
/**
 *	Attribute Current related methods
 *	Description: Converter output current
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Current(Tango::Attribute &attr);
	virtual bool is_Current_allowed(Tango::AttReqType type);
/**
 *	Attribute Power related methods
 *	Description: Converter output power
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Power(Tango::Attribute &attr);
	virtual bool is_Power_allowed(Tango::AttReqType type);
/**
 *	Attribute Temperature related methods
 *	Description: Converter heatsink temperature
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_Temperature(Tango::Attribute &attr);
	virtual bool is_Temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute Pressure related methods
 *	Description: Pressure al the pump inlet
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Pressure(Tango::Attribute &attr);
	virtual bool is_Pressure_allowed(Tango::AttReqType type);
/**
 *	Attribute EnablePurge related methods
 *	Description:
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_EnablePurge(Tango::Attribute &attr);
	virtual void write_EnablePurge(Tango::WAttribute &attr);
	virtual bool is_EnablePurge_allowed(Tango::AttReqType type);
/**
 *	Attribute EnableBallast related methods
 *	Description:
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_EnableBallast(Tango::Attribute &attr);
	virtual void write_EnableBallast(Tango::WAttribute &attr);
	virtual bool is_EnableBallast_allowed(Tango::AttReqType type);
/**
 *	Attribute CompressedAir related methods
 *	Description:
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_CompressedAir(Tango::Attribute &attr);
	virtual bool is_CompressedAir_allowed(Tango::AttReqType type);
/**
 *	Attribute WaterValve related methods
 *	Description: Water valve status
 *
 *	Data type:	Tango::DevState
 *	Attr type:	Scalar
 */
	virtual void read_WaterValve(Tango::Attribute &attr);
	virtual bool is_WaterValve_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : DryVacSrv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command Start related method
	 *	Description: Start the pump with the configure rotation frequency
	 *
	 */
	virtual void start();
	virtual bool is_Start_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: Stop the pump
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Reset pump fault
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);


/*----- PROTECTED REGION ID(DryVacSrv::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	DryVacSrv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(DryVacSrv::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

class DryVacMonitorThread : public omni_thread {
	friend class DryVacSrv;
	friend class EventCallback;

public:
	// Constructor
	DryVacMonitorThread(DryVacSrv* parent);
	// Destructor
	~DryVacMonitorThread();

	// Get frequency setpoint
	float getFreqSetpoint()const { return _freq_setpoint.load(); }

	// Set frequency setpoint
	void setFreqSetpoint(float freq);

	// Get output frequency
	float getFrequency()const { return _frequency.load(); }

	// Get output voltage
	float getVoltage()const { return _voltage.load(); }

	// Get output frequency
	float getCurrent()const { return _current.load(); }

	// Get output frequency
	float getPower()const { return _power.load(); }

	// Get heatsink temperature
	short getTemperature()const { return _temperature.load(); }

	// Start pump
	void start();

	// Stop pump
	void stop();

	// Reset fault
	void reset();

	// Terminate thread
	void terminate() { _terminate = true; }

	// Millisleep
	void msleep(uint32_t msec);

	// Get raw analog voltage
	double getPressure()const { return _pressure.load(); }

	// Set purge
	void setPurge(bool enable);

	// Get purge
	bool getPurge()const { return _purge_state.load(); }

	// Set ballast
	void setBallast(bool enable);

	// Get ballast
	bool getBallast()const { return _ballast_state.load(); }

	// Get cooling
	Tango::DevState getCooling()const { return _wvalve_state.load(); }

	// Get compressed air status
	bool getCompressedAirStatus()const { return _compair_state.load(); }

protected:
	// Monitor thread
	void *run_undetached(void *opt);

	// Send enter command
	// NOTE: must be called only inside a function that have previously locked the MODBUS socket
	void enter();

	// Update an atomic value, sending an event when the value change
	void update_value(const char *attr, float value, std::atomic<float>& store);
	void update_value(const char *attr, short value, std::atomic<short>& store);

private:
	// Parent device server
	DryVacSrv* _parent;

	// Access mutex
	omni_mutex _lock;

	// Termination flag
	bool _terminate;

#ifdef USE_LIBMODBUS
	// Modbus context
	modbus_t *ctx;
#else
	Tango::DeviceProxy *_dev;
#endif

	// Polling time
	int _polling;

	// Pump parameters
	std::atomic<float> _freq_setpoint;   // Frequency setpoint
	std::atomic<float> _frequency;       // Output frequency
	std::atomic<float> _voltage;         // Output voltage
	std::atomic<float> _current;         // Output current
	std::atomic<float> _power;           // Output power
	std::atomic<short> _temperature;     // Heatsink temperature

	// Device proxy for water valve
	Tango::DeviceProxy *_wvalve;
	std::atomic<Tango::DevState> _wvalve_state;
	omni_mutex _wv_lock;

	// Last timestamp of the pump in running state (for water valve delay)
	struct timeval _last_running;

	// AttributeProxy for purge
	Tango::AttributeProxy *_purge;
	std::atomic<bool> _purge_state;

	// AttributeProxy for ballast
	Tango::AttributeProxy *_ballast;
	std::atomic<bool> _ballast_state;

	// Attribute proxy for compressed air sensor
	Tango::AttributeProxy *_compair;
	std::atomic<bool> _compair_state;

	// Event callback
	EventCallback* _callback;

	// Analog value
	Tango::AttributeProxy* _analogin;
	std::atomic<double> _pressure;

	// Event IDs
	int _id_wvalve_state;
	int _id_purge;
	int _id_ballast;
	int _id_compair;
	int _id_pressure;
};


/*
 *  Standard Modbus exception type
 *  All functions in DryVacMonitorThread class throw exceptions of this type.
 */
#define MODBUS_ERR_MSG_LEN   128
class DryVacException : public std::exception {
public:
	//! Constructor
	/*! Constructor of the exception. Can format an error message.
	 *  @param f the format string (as in printf)
	 *  @param ... variable parameters, corresponding to the format string.
	 */
	DryVacException(const char* f, ...) {
		va_list ap;
		va_start(ap, f);
		vsnprintf(_msg, MODBUS_ERR_MSG_LEN, f, ap);
		va_end(ap);
	}
	DryVacException(const char* f, va_list ap) {
		vsnprintf(_msg, MODBUS_ERR_MSG_LEN, f, ap);
	}

	//! what(), return the error string
	virtual const char* what() const throw() {
		return _msg;
	}

private:
	char _msg[MODBUS_ERR_MSG_LEN];
};


/*
 * Event callback
 */
class EventCallback : public Tango::CallBack {
public:
	EventCallback(DryVacMonitorThread* parent) : _parent(parent) {}
	void push_event(Tango::EventData*);
private:
	DryVacMonitorThread* _parent;
};

/*----- PROTECTED REGION END -----*/	//	DryVacSrv::Additional Classes Definitions

}	//	End of namespace

#endif   //	DryVacSrv_H
