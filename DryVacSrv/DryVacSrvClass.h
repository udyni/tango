/*----- PROTECTED REGION ID(DryVacSrvClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        DryVacSrvClass.h
//
// description : Include for the DryVacSrv root class.
//               This class is the singleton class for
//                the DryVacSrv device class.
//               It contains all properties and methods which the 
//               DryVacSrv requires only once e.g. the commands.
//
// project :     DryVac Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef DryVacSrvClass_H
#define DryVacSrvClass_H

#include <tango.h>
#include <DryVacSrv.h>


/*----- PROTECTED REGION END -----*/	//	DryVacSrvClass.h


namespace DryVacSrv_ns
{
/*----- PROTECTED REGION ID(DryVacSrvClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	DryVacSrvClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute FreqSetpoint class definition
class FreqSetpointAttrib: public Tango::Attr
{
public:
	FreqSetpointAttrib():Attr("FreqSetpoint",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~FreqSetpointAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_FreqSetpoint(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<DryVacSrv *>(dev))->write_FreqSetpoint(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_FreqSetpoint_allowed(ty);}
};

//	Attribute Frequency class definition
class FrequencyAttrib: public Tango::Attr
{
public:
	FrequencyAttrib():Attr("Frequency",
			Tango::DEV_FLOAT, Tango::READ) {};
	~FrequencyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_Frequency(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_Frequency_allowed(ty);}
};

//	Attribute Voltage class definition
class VoltageAttrib: public Tango::Attr
{
public:
	VoltageAttrib():Attr("Voltage",
			Tango::DEV_FLOAT, Tango::READ) {};
	~VoltageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_Voltage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_Voltage_allowed(ty);}
};

//	Attribute Current class definition
class CurrentAttrib: public Tango::Attr
{
public:
	CurrentAttrib():Attr("Current",
			Tango::DEV_FLOAT, Tango::READ) {};
	~CurrentAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_Current(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_Current_allowed(ty);}
};

//	Attribute Power class definition
class PowerAttrib: public Tango::Attr
{
public:
	PowerAttrib():Attr("Power",
			Tango::DEV_FLOAT, Tango::READ) {};
	~PowerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_Power(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_Power_allowed(ty);}
};

//	Attribute Temperature class definition
class TemperatureAttrib: public Tango::Attr
{
public:
	TemperatureAttrib():Attr("Temperature",
			Tango::DEV_SHORT, Tango::READ) {};
	~TemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_Temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_Temperature_allowed(ty);}
};

//	Attribute Pressure class definition
class PressureAttrib: public Tango::Attr
{
public:
	PressureAttrib():Attr("Pressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~PressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_Pressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_Pressure_allowed(ty);}
};

//	Attribute EnablePurge class definition
class EnablePurgeAttrib: public Tango::Attr
{
public:
	EnablePurgeAttrib():Attr("EnablePurge",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~EnablePurgeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_EnablePurge(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<DryVacSrv *>(dev))->write_EnablePurge(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_EnablePurge_allowed(ty);}
};

//	Attribute EnableBallast class definition
class EnableBallastAttrib: public Tango::Attr
{
public:
	EnableBallastAttrib():Attr("EnableBallast",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~EnableBallastAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_EnableBallast(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<DryVacSrv *>(dev))->write_EnableBallast(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_EnableBallast_allowed(ty);}
};

//	Attribute CompressedAir class definition
class CompressedAirAttrib: public Tango::Attr
{
public:
	CompressedAirAttrib():Attr("CompressedAir",
			Tango::DEV_BOOLEAN, Tango::READ) {};
	~CompressedAirAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_CompressedAir(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_CompressedAir_allowed(ty);}
};

//	Attribute WaterValve class definition
class WaterValveAttrib: public Tango::Attr
{
public:
	WaterValveAttrib():Attr("WaterValve",
			Tango::DEV_STATE, Tango::READ) {};
	~WaterValveAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<DryVacSrv *>(dev))->read_WaterValve(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<DryVacSrv *>(dev))->is_WaterValve_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Start class definition
class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DryVacSrv *>(dev))->is_Start_allowed(any);}
};

//	Command Stop class definition
class StopClass : public Tango::Command
{
public:
	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DryVacSrv *>(dev))->is_Stop_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<DryVacSrv *>(dev))->is_Reset_allowed(any);}
};


/**
 *	The DryVacSrvClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  DryVacSrvClass : public Tango::DeviceClass
#else
class DryVacSrvClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(DryVacSrvClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	DryVacSrvClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static DryVacSrvClass *init(const char *);
		static DryVacSrvClass *instance();
		~DryVacSrvClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		DryVacSrvClass(string &);
		static DryVacSrvClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	DryVacSrv_H
