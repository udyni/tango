/*----- PROTECTED REGION ID(WaterValveSrv.h) ENABLED START -----*/
//=============================================================================
//
// file :        WaterValveSrv.h
//
// description : Include file for the WaterValveSrv class
//
// project :     Valve control server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WaterValveSrv_H
#define WaterValveSrv_H

#include <tango.h>

#include <stdio.h>
#include <unistd.h>
#include <cmath>
#include <atomic>
#include "../Common/tango_common_log.h"

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif

// GPIO flags
#define GPIO_INPUT     1
#define GPIO_OUTPUT    0
#define GPIO_NORMAL    0
#define GPIO_INVERTED  1
#define GPIO_INTEN     1
#define GPIO_INTDIS    0


/*----- PROTECTED REGION END -----*/	//	WaterValveSrv.h

/**
 *  WaterValveSrv class description:
 *    
 */

namespace WaterValveSrv_ns
{
/*----- PROTECTED REGION ID(WaterValveSrv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class ValveCallback;

/*----- PROTECTED REGION END -----*/	//	WaterValveSrv::Additional Class Declarations

class WaterValveSrv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(WaterValveSrv::Data Members) ENABLED START -----*/

//	Add your own data members

	// Set GPIO callback friend to enable access to private members
	friend class ValveCallback;

private:
	// Status monitoring thread
	ValveCallback* dev;

	// State lock
	omni_mutex _state_lock;

/*----- PROTECTED REGION END -----*/	//	WaterValveSrv::Data Members

//	Device property data members
public:
	//	AnalogIN:	Device file to read for the analog value associated with the valve
	string	analogIN;
	//	GPIO_Device:	Device server to access GPIO
	string	gPIO_Device;
	//	GPIO_Check:	GPIO pin to check the correct operation of the control relay
	Tango::DevShort	gPIO_Check;
	//	GPIO_Command:	GPIO pin to control the valve opening
	Tango::DevShort	gPIO_Command;
	//	ValveDelay:	Valve open/close delay in ms
	Tango::DevLong	valveDelay;
	//	HardDisable:	Set this property to true to prevent the valve from operating
	Tango::DevBoolean	hardDisable;
	//	FlowConversion:	Water flow conversion factor (V to l/m)
	Tango::DevDouble	flowConversion;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevDouble	*attr_RawVoltage_read;
	Tango::DevDouble	*attr_WaterFlow_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WaterValveSrv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WaterValveSrv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	WaterValveSrv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~WaterValveSrv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : WaterValveSrv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute RawVoltage related methods
 *	Description: Raw analog reading
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_RawVoltage(Tango::Attribute &attr);
	virtual bool is_RawVoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute WaterFlow related methods
 *	Description: Water flow
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_WaterFlow(Tango::Attribute &attr);
	virtual bool is_WaterFlow_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : WaterValveSrv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Open related method
	 *	Description: Open the valve
	 *
	 */
	virtual void open();
	virtual bool is_Open_allowed(const CORBA::Any &any);
	/**
	 *	Command Close related method
	 *	Description: Close the valve
	 *
	 */
	virtual void close();
	virtual bool is_Close_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Reset a fault condition
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : WaterValveSrv::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(WaterValveSrv::Additional Method prototypes) ENABLED START -----*/

	// Thread safe set state
	void safe_set_state(Tango::DevState state);
	// Thread safe set status
	void safe_set_status(const string &new_status);


/*----- PROTECTED REGION END -----*/	//	WaterValveSrv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(WaterValveSrv::Additional Classes Definitions) ENABLED START -----*/

class ValveCallback : public Tango::CallBack {
public:
	// Constructor
	ValveCallback(WaterValveSrv* parent);
	// Destructor
	~ValveCallback();

	// Open valve
	void openValve();

	// Close valve
	void closeValve();

	// Reset fault
	void reset();

	// Event callback
	void push_event(Tango::EventData* event);

	// Get water flow
	double getWaterFlow() { return _analog_read.load() * _flow_conversion; }

	// Get analog value
	double getAnalogRead() { return _analog_read.load(); }

	// Check timeout function
	static void* checkTimeout(void* arg);

	// Millisecond sleep
	static void msleep(uint32_t msec);

protected:
	// Setup GPIO pin
	void setupGPIO(int num, Tango::DevBoolean direction, Tango::DevBoolean polarity);

	// Read GPIO value
	Tango::DevBoolean readGPIOAttr(Tango::AttributeProxy* attr);

	// Start timeout thread
	void start_timeout_thread();

	// Status check function
	void checkStatus();

private:
	// Parent device
	WaterValveSrv* _parent;

	// Callback mutex (event handling must be serialized!)
	omni_mutex _ev_lock;

	// Command GPIO proxy
	Tango::AttributeProxy* _gpio_cmd;
	// Command GPIO proxy
	Tango::AttributeProxy* _gpio_chk;

	// Moving flag
	std::atomic<bool> _moving;

	// GPIO pins values
	std::atomic<Tango::DevBoolean> _val_cmd_w; // Written GPIO value
	std::atomic<Tango::DevBoolean> _val_cmd;   // GPIO value from event
	std::atomic<Tango::DevBoolean> _val_chk;

	// Last operation timestamp
	struct timeval _timestamp;

	// File descriptor for analog device file
	Tango::AttributeProxy* _analogin;

	// Analog reading
	std::atomic<double> _analog_read;
	double* _analog_event;
	double* _analog_event_raw;

	// Flow conversion factor
	double _flow_conversion;

	// Event IDs
	int _evid_cmd;
	int _evid_chk;
	int _evid_an;

	// Timeout thread
	omni_thread* _to_th;
	// Semaphore to signal timeout thread
	omni_semaphore _to_se;
	// Termination flag
	std::atomic<bool> _to_terminate;
};

/*----- PROTECTED REGION END -----*/	//	WaterValveSrv::Additional Classes Definitions

}	//	End of namespace

#endif   //	WaterValveSrv_H
