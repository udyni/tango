/*----- PROTECTED REGION ID(MercurySrv.h) ENABLED START -----*/
//=============================================================================
//
// file :        MercurySrv.h
//
// description : Include file for the MercurySrv class
//
// project :     Mercury C863 Server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MercurySrv_H
#define MercurySrv_H

#include <tango.h>
#include <iomanip>

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif


// Old Mercury status flags
// 1F Processor (LM629) status
#define O_MERCURY_1F      0
#define O_MERCURY_BUSY    0x01  // Bit 0: Busy
#define O_MERCURY_ERROR   0x02  // Bit 1: Command error
#define O_MERCURY_DONE    0x04  // Bit 2: Trajectory complete
#define O_MERCURY_INDEX   0x08  // Bit 3: Index pulse received
#define O_MERCURY_LIMITEX 0x10  // Bit 4: Position limit exceeded
#define O_MERCURY_POSERR  0x20  // Bit 5: Excessive position error
#define O_MERCURY_BREAKP  0x40  // Bit 6: Breakpoint reached
#define O_MERCURY_MOTOFF  0x80  // Bit 7: Motor loop OFF
// 2F Internal operation flags
#define O_MERCURY_2F      1
#define O_MERCURY_ECHOON  0x01  // Bit 0: Echo ON
#define O_MERCURY_WAIT    0x02  // Bit 1: Wait in progress
#define O_MERCURY_CMDERR  0x04  // Bit 2: Command error
#define O_MERCURY_LZSUP   0x08  // Bit 3: Leading zero suppression active
#define O_MERCURY_MACRO   0x10  // Bit 4: Macro command called
#define O_MERCURY_LZNO    0x20  // Bit 5: Leading zero suppression disabled
#define O_MERCURY_NMODE   0x40  // Bit 6: Number mode in effect
#define O_MERCURY_SELECT  0x80  // Bit 7: Board addressed
// 3F Motor loop flags
#define O_MERCURY_3F      2
#define O_MERCURY_MOVPOL  0x04  // Bit 2: Move direction polarity
#define O_MERCURY_MOVERR1 0x08  // Bit 3: Move error (MF condition occurred in WS)
#define O_MERCURY_MOVERR2 0x40  // Bit 6: Move error (Excess following error in WS)
#define O_MERCURY_COMM    0x80  // Bit 7: Internal LM629 communication in progress
// 4F Signal Lines Status
#define O_MERCURY_4F      3
#define O_MERCURY_LSON    0x01  // Bit 0: Limit Switch ON
#define O_MERCURY_LSHIGH  0x02  // Bit 1: Limit switch active state HIGH
#define O_MERCURY_FEDGE   0x04  // Bit 2: Find edge operation in progress
#define O_MERCURY_BRAKE   0x08  // Bit 3: Brake ON
// 5F Signal Lines Inputs
#define O_MERCURY_5F      4
#define O_MERCURY_REF     0x02  // Bit 1: Reference signal input
#define O_MERCURY_POSLS   0x04  // Bit 2: Positive limit signal input
#define O_MERCURY_NEGLS   0x08  // Bit 3: Negative limit signal input
// 6F Error Codes (numbers reported):
#define O_MERCURY_6F      5
#define O_MERCURY_NOERR   0x00  // No error
#define O_MERCURY_NOCMD   0x01  //  Command not found
#define O_MERCURY_BADCMD1 0x02  //  First command character was not a letter
#define O_MERCURY_BADCMD2 0x05  //  Character following command was not a digit
#define O_MERCURY_BADVAL1 0x06  //  Value too large
#define O_MERCURY_BADVAL2 0x07  //  Value too small
#define O_MERCURY_BADCMD3 0x08  //  Continuation character was not a comma
#define O_MERCURY_CMDOVR  0x09  //  Command buffer overflow
#define O_MERCURY_MCROVR  0x0A  //  Macro storage overflow


// New Mercury status flags
#define N_MERCURY_NEGLIM  0x0001
#define N_MERCURY_REFLIM  0x0002
#define N_MERCURY_POSLIM  0x0004
#define N_MERCURY_REFOK   0x0008
#define N_MERCURY_DIGIN1  0x0010
#define N_MERCURY_DIGIN2  0x0020
#define N_MERCURY_DIGIN3  0x0040
#define N_MERCURY_DIGIN4  0x0080
#define N_MERCURY_ERROR   0x0100
#define N_MERCURY_SERVO   0x1000
#define N_MERCURY_MOTION  0x2000
#define N_MERCURY_DETREF  0x4000
#define N_MERCURY_ONTG    0x8000




/*----- PROTECTED REGION END -----*/	//	MercurySrv.h

/**
 *  MercurySrv class description:
 *    Tango device server for a Mercury C863 motion controller
 */

namespace MercurySrv_ns
{
/*----- PROTECTED REGION ID(MercurySrv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class MercuryComm;

/*----- PROTECTED REGION END -----*/	//	MercurySrv::Additional Class Declarations

class MercurySrv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(MercurySrv::Data Members) ENABLED START -----*/

//	Add your own data members
public:
	MercuryComm* dev;

	// Home position
	Tango::DevFloat home_pos;

	// Flag for old mercury
	bool is_old_mercury;

/*----- PROTECTED REGION END -----*/	//	MercurySrv::Data Members

//	Device property data members
public:
	//	Proxy:	Communication proxy for the mercury controller
	string	proxy;
	//	Address:	Controller address on the RS232 daisy chain (default to 1)
	Tango::DevShort	address;
	//	Referenced:	Decide wether the motion of the stage should be referenced or not. Default to `true`.
	Tango::DevBoolean	referenced;
	//	TimeConversion:	Conversion factor from position to time (Default to 2L / c in femtoseconds)
	Tango::DevDouble	timeConversion;
	//	PollingPeriod:	Polling thread period in ms
	Tango::DevULong	pollingPeriod;
	//	StageConfiguration:	Stage configuration with the comma separated list pairs <hex index>=<value>
	string	stageConfiguration;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevFloat	*attr_Acceleration_read;
	Tango::DevFloat	*attr_Velocity_read;
	Tango::DevDouble	*attr_RawPosition_read;
	Tango::DevDouble	*attr_Position_read;
	Tango::DevDouble	*attr_Time_read;
	Tango::DevDouble	*attr_HomePosition_read;
	Tango::DevString	*attr_StageName_read;
	Tango::DevLong	*attr_LastError_read;
	Tango::DevBoolean	*attr_MotionDone_read;
	Tango::DevString	*attr_Macro_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MercurySrv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MercurySrv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	MercurySrv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~MercurySrv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : MercurySrv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : MercurySrv::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Acceleration related methods
 *	Description: Stage acceleration
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Acceleration(Tango::Attribute &attr);
	virtual void write_Acceleration(Tango::WAttribute &attr);
	virtual bool is_Acceleration_allowed(Tango::AttReqType type);
/**
 *	Attribute Velocity related methods
 *	Description: Stage velocity
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Velocity(Tango::Attribute &attr);
	virtual void write_Velocity(Tango::WAttribute &attr);
	virtual bool is_Velocity_allowed(Tango::AttReqType type);
/**
 *	Attribute RawPosition related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_RawPosition(Tango::Attribute &attr);
	virtual void write_RawPosition(Tango::WAttribute &attr);
	virtual bool is_RawPosition_allowed(Tango::AttReqType type);
/**
 *	Attribute Position related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Position(Tango::Attribute &attr);
	virtual void write_Position(Tango::WAttribute &attr);
	virtual bool is_Position_allowed(Tango::AttReqType type);
/**
 *	Attribute Time related methods
 *	Description: Time in femtoseconds (for 2 way pass)
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Time(Tango::Attribute &attr);
	virtual void write_Time(Tango::WAttribute &attr);
	virtual bool is_Time_allowed(Tango::AttReqType type);
/**
 *	Attribute HomePosition related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_HomePosition(Tango::Attribute &attr);
	virtual bool is_HomePosition_allowed(Tango::AttReqType type);
/**
 *	Attribute StageName related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_StageName(Tango::Attribute &attr);
	virtual bool is_StageName_allowed(Tango::AttReqType type);
/**
 *	Attribute LastError related methods
 *	Description: Store the last error got from the controller
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_LastError(Tango::Attribute &attr);
	virtual bool is_LastError_allowed(Tango::AttReqType type);
/**
 *	Attribute MotionDone related methods
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_MotionDone(Tango::Attribute &attr);
	virtual bool is_MotionDone_allowed(Tango::AttReqType type);
/**
 *	Attribute Macro related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_Macro(Tango::Attribute &attr);
	virtual void write_Macro(Tango::WAttribute &attr);
	virtual bool is_Macro_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : MercurySrv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command setHome related method
	 *	Description: Set stage home to the current position
	 *
	 */
	virtual void set_home();
	virtual bool is_setHome_allowed(const CORBA::Any &any);
	/**
	 *	Command goHome related method
	 *	Description: Go to home position
	 *
	 */
	virtual void go_home();
	virtual bool is_goHome_allowed(const CORBA::Any &any);
	/**
	 *	Command timeStep related method
	 *	Description: Make a relative move in time
	 *
	 *	@param argin Time step in fs
	 */
	virtual void time_step(Tango::DevDouble argin);
	virtual bool is_timeStep_allowed(const CORBA::Any &any);
	/**
	 *	Command posStep related method
	 *	Description: Make a relative move in position
	 *
	 *	@param argin Step in phys unit
	 */
	virtual void pos_step(Tango::DevDouble argin);
	virtual bool is_posStep_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: Stop motion
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command Abort related method
	 *	Description: Abort motion abruptly
	 *
	 */
	virtual void abort();
	virtual bool is_Abort_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Reset controller. Restore configuration from database and search again for reference (if needed).
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command StartMacro related method
	 *	Description: Start the macro configured in the attribute Macro
	 *
	 */
	virtual void start_macro();
	virtual bool is_StartMacro_allowed(const CORBA::Any &any);
	/**
	 *	Command StopMacro related method
	 *	Description: Start the macro configured in the attribute Macro
	 *
	 */
	virtual void stop_macro();
	virtual bool is_StopMacro_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : MercurySrv::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(MercurySrv::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	MercurySrv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(MercurySrv::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class MercuryComm : public omni_thread {

public:
	// Contructor
	MercuryComm(MercurySrv* parent);

	// Destructor
	~MercuryComm();

public:
	// Terminate thread loop
	void terminate() { _terminate = true; }

	// Return polled position
	double getPosition(bool force_update=false);

	// Get velocity (in mm/s)
	double getVelocity();

	// Set velocity (in mm/s)
	void setVelocity(double value);

	// Get acceleration (in mm/s)
	double getAcceleration();

	// Set acceleration (in mm/s)
	void setAcceleration(double value);

	// Relative move (in mm)
	void moveRelative(double delta, bool save=true);

	// Absolute move (raw position in mm)
	void moveAbsolute(double position, bool save=true);

	// Stop motion
	void stop();

	// Abort motion
	void abort();

	// Reset controller
	void reset();

	// Return last error code
	Tango::DevLong getLastError()const { return _lasterror; }

protected:
	// Initialize controller
	void init();

	// Check controller type (return true if controller is old type)
	bool checkCtrlType();

	// Save raw position in database
	void savePosition(double value);

	// Get last saved raw position from database
	double getSavedPosition();

	// Restore memorized attributes
	void restoreMemAttributes();

	// Write configuration to the controller
	void writeConfiguration();

	// Check if configuration on the controller match that in the DB
	bool checkConfiguration();

	// Convert configuration string to std::map
	void string2map(const std::string& config, std::map<uint32_t, std::string>& outmap);

	// Print error to error stream
	void print_error(const char* message, const Tango::DevFailed &e);


	// == Old controller interface ==

	// Get status bytes of old mercury controller
	uint8_t getStatusByte_old(int index);

	// Search for reference on old controller
	void searchReference_old();

	// Wait for motion to complete
	void waitMove_old(int timeout=-1);

	// Send command with no response to old controller
	void sendCommand_old(const std::string& cmd);

	// Send command with response to old controller
	std::string sendCommandWithResponse_old(const std::string& cmd);


	// == New controller interface ==

	// Get status of controller
	uint16_t getStatus_new();

	// Search for reference on old controller
	void searchReference_new();

	// Wait for motion to complete
	void waitMove_new(int timeout=-1);

	// Send command with no response to new controller
	void sendCommand_new(const std::string& cmd);

	// Send command with response to new controller
	std::string sendCommandWithResponse_new(const std::string& cmd);


	// Main thread
	void *run_undetached(void* ptr);

	// Thread loop for new mercury
	void new_loop();

	// Thread loop for old mercury
	void old_loop();

	// Millisecond sleep
	void msleep(uint32_t msec);

private:
	// Communication device
	Tango::DeviceProxy* _dev;

	// Daisy chain address
	Tango::DevShort _address;

	// Mutex
	omni_mutex _lock;

	// Polling period
	Tango::DevLong _polling;

	// Stage absolute position
	double _position;

	// Conversion factor from encoder counts
	double _factor;

	// Stage axis ID (for new mercury only)
	char _axisid[9];

	// Last error code
	Tango::DevLong _lasterror;

	// Parent device
	MercurySrv* _parent;

	// Termination flag
	bool _terminate;

	// Flag to indicate that a reference move is needed after init
	bool _need_refsearch;

	// Flag to store the type of controller
	bool _old_controller;

	// Configuration map
	std::map<uint32_t, std::string> _config;
	
	// Position timestamp
	struct timeval _pos_timestamp;
};

/*----- PROTECTED REGION END -----*/	//	MercurySrv::Additional Classes Definitions

}	//	End of namespace

#endif   //	MercurySrv_H
