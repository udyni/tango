/*----- PROTECTED REGION ID(SHTSrv.h) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4
//=============================================================================
//
// file :        SHTSrv.h
//
// description : Include file for the SHTSrv class
//
// project :     Sensiron SHT server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SHTSrv_H
#define SHTSrv_H

#include <tango.h>
#include <omnithread.h>
#include <deque>
#include <typeinfo>
#include "SHT7x.h"

// Macro to measure elapsed time in ms
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )

/*----- PROTECTED REGION END -----*/	//	SHTSrv.h

/**
 *  SHTSrv class description:
 *    Device server to acquire Sensiron SHT temperature and humidity sensors.
 */

namespace SHTSrv_ns
{
/*----- PROTECTED REGION ID(SHTSrv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class SHTSample;
class SHTAcq;

/*----- PROTECTED REGION END -----*/	//	SHTSrv::Additional Class Declarations

class SHTSrv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(SHTSrv::Data Members) ENABLED START -----*/

//	Add your own data members

	// Acquisition thread
	SHTAcq *acq;

/*----- PROTECTED REGION END -----*/	//	SHTSrv::Data Members

//	Device property data members
public:
	//	SamplingPeriod:	Sampling period in ms of the sensor (should be kept above 1s to minimize heating effects in the sensor)
	Tango::DevLong	samplingPeriod;
	//	ClockPin:	Sensor clock GPIO pin number
	Tango::DevShort	clockPin;
	//	DataPin:	Sensor data GPIO pin number
	Tango::DevShort	dataPin;
	//	RingBufferLength:	Length of ring buffer
	Tango::DevULong	ringBufferLength;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevFloat	*attr_Temperature_read;
	Tango::DevFloat	*attr_Humidity_read;
	Tango::DevFloat	*attr_DewPoint_read;
	Tango::DevULong	*attr_Timestamp_read;
	Tango::DevLong	*attr_BufferSize_read;
	Tango::DevString	*attr_FormatTypes_read;
	Tango::DevULong	*attr_FormatSizes_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SHTSrv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SHTSrv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	SHTSrv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~SHTSrv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : SHTSrv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Temperature related methods
 *	Description: Temperature in degrees celsius
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Temperature(Tango::Attribute &attr);
	virtual bool is_Temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute Humidity related methods
 *	Description: Relative humidity
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Humidity(Tango::Attribute &attr);
	virtual bool is_Humidity_allowed(Tango::AttReqType type);
/**
 *	Attribute DewPoint related methods
 *	Description: Dew point in degrees celsius
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_DewPoint(Tango::Attribute &attr);
	virtual bool is_DewPoint_allowed(Tango::AttReqType type);
/**
 *	Attribute Timestamp related methods
 *	Description: Timestamp in ms of last sensor acquisition
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_Timestamp(Tango::Attribute &attr);
	virtual bool is_Timestamp_allowed(Tango::AttReqType type);
/**
 *	Attribute BufferSize related methods
 *	Description:
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_BufferSize(Tango::Attribute &attr);
	virtual bool is_BufferSize_allowed(Tango::AttReqType type);
/**
 *	Attribute FormatTypes related methods
 *	Description:
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 3
 */
	virtual void read_FormatTypes(Tango::Attribute &attr);
	virtual bool is_FormatTypes_allowed(Tango::AttReqType type);
/**
 *	Attribute FormatSizes related methods
 *	Description:
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Spectrum max = 3
 */
	virtual void read_FormatSizes(Tango::Attribute &attr);
	virtual bool is_FormatSizes_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : SHTSrv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command getTemperature related method
	 *	Description: Return n samples up to the given timestamp. If the timestamp is 0 it returns the last n samples. If the timestamp is too old it returns an empty array.
	 *
	 *	@param argin getTemperature(timestamp, n)
	 *	@returns Array of temperature values
	 */
	virtual Tango::DevVarFloatArray *get_temperature(const Tango::DevVarLongArray *argin);
	virtual bool is_getTemperature_allowed(const CORBA::Any &any);
	/**
	 *	Command getHumidity related method
	 *	Description: Return n samples up to the given timestamp. If the timestamp is 0 it returns the last n samples. If the timestamp is too old it returns an empty array.
	 *
	 *	@param argin getHumidity(timestamp, n)
	 *	@returns Array of humidity values
	 */
	virtual Tango::DevVarFloatArray *get_humidity(const Tango::DevVarLongArray *argin);
	virtual bool is_getHumidity_allowed(const CORBA::Any &any);
	/**
	 *	Command getData related method
	 *	Description: Return n samples up to the given timestamp, in encoded form, with timestamp, temperature and humidity. If the timestamp is 0 it returns the last n samples. If the timestamp is too old it returns an empty array.
	 *
	 *	@param argin getTemperature(timestamp, n)
	 *	@returns Encoded output with triplets (uint32, float, float) representing respectively (timestamp, temperature, humidity)
	 */
	virtual Tango::DevVarCharArray *get_data(const Tango::DevVarLongArray *argin);
	virtual bool is_getData_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : SHTSrv::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(SHTSrv::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	SHTSrv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(SHTSrv::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class SHTSample {
public:
	// Constructor
	SHTSample(Tango::DevULong _ts, Tango::DevFloat _t, Tango::DevFloat _h) : timestamp(_ts), t(_t), h(_h) {};

	// Data
	Tango::DevLong timestamp;
	Tango::DevFloat t;
	Tango::DevFloat h;
};


class SHTAcq : public omni_thread {

public:
	// Contructor
	SHTAcq(Tango::DevULong queue_length, Tango::DevULong period, Tango::DevShort sck, Tango::DevShort sda) :
		_terminate(false),
		_length(queue_length),
		_period(period) {

		// Initialize sensor
		sensor = new SensirionSHT(sck, sda);
		sensor->init();
		this->start_undetached();
	}

	// Destructor
	~SHTAcq() {
		delete sensor;
	}

public:
	// Terminate thread loop
	void terminate() { _terminate = true; }

	// Get number of samples
	size_t size()const { return ring_buffer.size(); }

	// Get ring buffer reference
	const std::deque<SHTSample>& get_buffer()const { return ring_buffer; }

	// Get buffer mutex
	omni_mutex& get_lock() { return this->_lock; }

	// Compute dew point
	Tango::DevFloat computeD(Tango::DevFloat t, Tango::DevFloat h) { return sensor->computeD(t, h); }

protected:
	// Main thread
	void *run_undetached(void* ptr);

private:
	// Max queue length
	size_t _length;

	// Sampling period
	Tango::DevULong _period;

	// Sensor object
	SensirionSHT *sensor;

	// Mutex
	omni_mutex _lock;

	// Termination flag
	bool _terminate;

	// Ring buffers
	std::deque<SHTSample> ring_buffer;
};

/*----- PROTECTED REGION END -----*/	//	SHTSrv::Additional Classes Definitions

}	//	End of namespace

#endif   //	SHTSrv_H
