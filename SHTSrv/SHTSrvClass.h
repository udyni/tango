/*----- PROTECTED REGION ID(SHTSrvClass.h) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4
//=============================================================================
//
// file :        SHTSrvClass.h
//
// description : Include for the SHTSrv root class.
//               This class is the singleton class for
//                the SHTSrv device class.
//               It contains all properties and methods which the
//               SHTSrv requires only once e.g. the commands.
//
// project :     Sensiron SHT server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SHTSrvClass_H
#define SHTSrvClass_H

#include <tango.h>
#include <SHTSrv.h>


/*----- PROTECTED REGION END -----*/	//	SHTSrvClass.h


namespace SHTSrv_ns
{
/*----- PROTECTED REGION ID(SHTSrvClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	SHTSrvClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute Temperature class definition
class TemperatureAttrib: public Tango::Attr
{
public:
	TemperatureAttrib():Attr("Temperature",
			Tango::DEV_FLOAT, Tango::READ) {};
	~TemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SHTSrv *>(dev))->read_Temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SHTSrv *>(dev))->is_Temperature_allowed(ty);}
};

//	Attribute Humidity class definition
class HumidityAttrib: public Tango::Attr
{
public:
	HumidityAttrib():Attr("Humidity",
			Tango::DEV_FLOAT, Tango::READ) {};
	~HumidityAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SHTSrv *>(dev))->read_Humidity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SHTSrv *>(dev))->is_Humidity_allowed(ty);}
};

//	Attribute DewPoint class definition
class DewPointAttrib: public Tango::Attr
{
public:
	DewPointAttrib():Attr("DewPoint",
			Tango::DEV_FLOAT, Tango::READ) {};
	~DewPointAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SHTSrv *>(dev))->read_DewPoint(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SHTSrv *>(dev))->is_DewPoint_allowed(ty);}
};

//	Attribute Timestamp class definition
class TimestampAttrib: public Tango::Attr
{
public:
	TimestampAttrib():Attr("Timestamp",
			Tango::DEV_ULONG, Tango::READ) {};
	~TimestampAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SHTSrv *>(dev))->read_Timestamp(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SHTSrv *>(dev))->is_Timestamp_allowed(ty);}
};

//	Attribute BufferSize class definition
class BufferSizeAttrib: public Tango::Attr
{
public:
	BufferSizeAttrib():Attr("BufferSize",
			Tango::DEV_LONG, Tango::READ) {};
	~BufferSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SHTSrv *>(dev))->read_BufferSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SHTSrv *>(dev))->is_BufferSize_allowed(ty);}
};

//	Attribute FormatTypes class definition
class FormatTypesAttrib: public Tango::SpectrumAttr
{
public:
	FormatTypesAttrib():SpectrumAttr("FormatTypes",
			Tango::DEV_STRING, Tango::READ, 3) {};
	~FormatTypesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SHTSrv *>(dev))->read_FormatTypes(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SHTSrv *>(dev))->is_FormatTypes_allowed(ty);}
};

//	Attribute FormatSizes class definition
class FormatSizesAttrib: public Tango::SpectrumAttr
{
public:
	FormatSizesAttrib():SpectrumAttr("FormatSizes",
			Tango::DEV_ULONG, Tango::READ, 3) {};
	~FormatSizesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SHTSrv *>(dev))->read_FormatSizes(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SHTSrv *>(dev))->is_FormatSizes_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command getTemperature class definition
class getTemperatureClass : public Tango::Command
{
public:
	getTemperatureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	getTemperatureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~getTemperatureClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SHTSrv *>(dev))->is_getTemperature_allowed(any);}
};

//	Command getHumidity class definition
class getHumidityClass : public Tango::Command
{
public:
	getHumidityClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	getHumidityClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~getHumidityClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SHTSrv *>(dev))->is_getHumidity_allowed(any);}
};

//	Command getData class definition
class getDataClass : public Tango::Command
{
public:
	getDataClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	getDataClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~getDataClass() {};

	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SHTSrv *>(dev))->is_getData_allowed(any);}
};


/**
 *	The SHTSrvClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  SHTSrvClass : public Tango::DeviceClass
#else
class SHTSrvClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(SHTSrvClass::Additionnal DServer data members) ENABLED START -----*/


	/*----- PROTECTED REGION END -----*/	//	SHTSrvClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;

		//	Method prototypes
		static SHTSrvClass *init(const char *);
		static SHTSrvClass *instance();
		~SHTSrvClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);

	protected:
		SHTSrvClass(string &);
		static SHTSrvClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();

	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	SHTSrv_H
