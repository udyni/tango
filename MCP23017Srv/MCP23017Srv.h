/*----- PROTECTED REGION ID(MCP23017Srv.h) ENABLED START -----*/
//=============================================================================
//
// file :        MCP23017Srv.h
//
// description : Include file for the MCP23017Srv class
//
// project :     MCP23017 Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MCP23017Srv_H
#define MCP23017Srv_H

#include <tango.h>

#include <omnithread.h>
#include <mcp23017.h>

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif

/*----- PROTECTED REGION END -----*/	//	MCP23017Srv.h

/**
 *  MCP23017Srv class description:
 *    Device server for MCP23017 GPIO extender with I2C interface
 */

namespace MCP23017Srv_ns
{
/*----- PROTECTED REGION ID(MCP23017Srv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

class GPIOMonitor;


/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::Additional Class Declarations

class MCP23017Srv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(MCP23017Srv::Data Members) ENABLED START -----*/

//	Add your own data members

	// GPIO device
	GPIOMonitor *monitor;

	// Members for attributes
	bool *gpio_val;
	bool *gpio_dir;
	bool *gpio_pol;

	// Set GPIOMonitor as friend to access device lock
	friend class GPIOMonitor;

/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::Data Members

//	Device property data members
public:
	//	i2c_bus:	I2C bus device number
	Tango::DevShort	i2c_bus;
	//	address:	I2C bus address
	Tango::DevShort	address;
	//	polling:	Polling period for change events in ms
	Tango::DevLong	polling;

	bool	mandatoryNotDefined;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MCP23017Srv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MCP23017Srv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	MCP23017Srv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~MCP23017Srv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : MCP23017Srv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : MCP23017Srv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:


/*----- PROTECTED REGION ID(MCP23017Srv::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	void read_bit(Tango::Attribute &attr);
	void write_bit(Tango::WAttribute &attr);
	void read_direction(Tango::Attribute &attr);
	void write_direction(Tango::WAttribute &attr);
	void read_polarity(Tango::Attribute &attr);
	void write_polarity(Tango::WAttribute &attr);

	// Extract the pin number from the attribute name
	int getPinNumber(const char * name);

/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(MCP23017Srv::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class GPIOMonitor : public omni_thread {
public:
	GPIOMonitor(MCP23017Srv* parent, short bus, short address);
	~GPIOMonitor();

public:
	// Terminate thread loop
	void terminate() { _terminate = true; }

	// Read GPIO
	bool readGPIO(size_t id);

	// Write GPIO
	void writeGPIO(size_t id, bool val);

	// Get polarity
	bool getPolarity(size_t id);

	// Set Polarity
	void setPolarity(size_t id, bool inverted);

	// Get direction
	bool getDirection(size_t id);

	// Set direction
	void setDirection(size_t id, bool input);

protected:
	// Main thread
	void *run_undetached(void* ptr);

	// Millisecond sleep
	static void msleep(uint32_t ms);

private:
	// Terminate flag
	bool _terminate;

	// GPIO values
	bool _values[16];

	// Parent pointer
	MCP23017Srv* _parent;
	
	// MCP23017 device
	mcp23017 *_dev;
	
	// MCP23017 device lock
	omni_mutex _lock;

	// Service variables to handle events
	char ** _ev_names;
	bool * _ev_vals;
};

/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::Additional Classes Definitions

}	//	End of namespace

#endif   //	MCP23017Srv_H
