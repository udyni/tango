/*----- PROTECTED REGION ID(MCP23017Srv.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        MCP23017Srv.cpp
//
// description : C++ source for the MCP23017Srv class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               MCP23017Srv are implemented in this file.
//
// project :     MCP23017 Device Server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <MCP23017Srv.h>
#include <MCP23017SrvClass.h>

/*----- PROTECTED REGION END -----*/	//	MCP23017Srv.cpp

/**
 *  MCP23017Srv class description:
 *    Device server for MCP23017 GPIO extender with I2C interface
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace MCP23017Srv_ns
{
/*----- PROTECTED REGION ID(MCP23017Srv::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : MCP23017Srv::MCP23017Srv()
 *	Description : Constructors for a Tango device
 *                implementing the classMCP23017Srv
 */
//--------------------------------------------------------
MCP23017Srv::MCP23017Srv(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(MCP23017Srv::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::constructor_1
}
//--------------------------------------------------------
MCP23017Srv::MCP23017Srv(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(MCP23017Srv::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::constructor_2
}
//--------------------------------------------------------
MCP23017Srv::MCP23017Srv(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(MCP23017Srv::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : MCP23017Srv::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void MCP23017Srv::delete_device()
{
	//DEBUG_STREAM << "MCP23017Srv::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(MCP23017Srv::delete_device) ENABLED START -----*/

	// Stop monitoring thread
	if(monitor) {
		int *retval;
		monitor->terminate();
		monitor->join((void**)&retval);
	}
	monitor = NULL;

	//	Delete device allocated objects
	delete[] gpio_val;
	delete[] gpio_dir;
	delete[] gpio_pol;

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : MCP23017Srv::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void MCP23017Srv::init_device()
{
	DEBUG_STREAM << "MCP23017Srv::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(MCP23017Srv::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call
	gpio_val = new bool[16];
	gpio_dir = new bool[16];
	gpio_pol = new bool[16];

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::init_device_before


	//	Get the device properties from database
	get_device_property();
	if (mandatoryNotDefined)
		return;


	/*----- PROTECTED REGION ID(MCP23017Srv::init_device) ENABLED START -----*/

	//	Initialize device

	// Start interrupt monitor thread
	monitor = new GPIOMonitor(this, i2c_bus, address);

	// Set device status to ON
	set_state(Tango::ON);

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::init_device
}

//--------------------------------------------------------
/**
 *	Method      : MCP23017Srv::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void MCP23017Srv::get_device_property()
{
	/*----- PROTECTED REGION ID(MCP23017Srv::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("i2c_bus"));
	dev_prop.push_back(Tango::DbDatum("address"));
	dev_prop.push_back(Tango::DbDatum("polling"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);

		//	get instance on MCP23017SrvClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		MCP23017SrvClass	*ds_class =
			(static_cast<MCP23017SrvClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize i2c_bus from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  i2c_bus;
		else {
			//	Try to initialize i2c_bus from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  i2c_bus;
		}
		//	And try to extract i2c_bus value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  i2c_bus;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize address from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  address;
		else {
			//	Try to initialize address from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  address;
		}
		//	And try to extract address value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  address;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize polling from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  polling;
		else {
			//	Try to initialize polling from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  polling;
		}
		//	And try to extract polling value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  polling;

	}

	/*----- PROTECTED REGION ID(MCP23017Srv::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : MCP23017Srv::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void MCP23017Srv::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(MCP23017Srv::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : MCP23017Srv::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void MCP23017Srv::always_executed_hook()
{
	//INFO_STREAM << "MCP23017Srv::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"MCP23017Srv::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(MCP23017Srv::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : MCP23017Srv::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void MCP23017Srv::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	//DEBUG_STREAM << "MCP23017Srv::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(MCP23017Srv::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : MCP23017Srv::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void MCP23017Srv::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(MCP23017Srv::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::add_dynamic_attributes
}


/*----- PROTECTED REGION ID(MCP23017Srv::namespace_ending) ENABLED START -----*/

// Generic read method for value attribute
void MCP23017Srv::read_bit(Tango::Attribute &attr) {
	// Get pin number
	int pin = getPinNumber(attr.get_name().c_str());

	// Get value
	gpio_val[pin] = monitor->readGPIO(pin);

	// Set attribute value
	attr.set_value(&gpio_val[pin]);
}


// Generic write method for value attribute
void MCP23017Srv::write_bit(Tango::WAttribute &attr) {
	// Get pin number
	int pin = getPinNumber(attr.get_name().c_str());

	// Get write value
	bool w_val;
	attr.get_write_value(w_val);

	// Write value
	monitor->writeGPIO(pin, w_val);
}


// Generic read method for direction attribute
void MCP23017Srv::read_direction(Tango::Attribute &attr) {
	// Get pin number
	int pin = getPinNumber(attr.get_name().c_str());

	// Get direction
	gpio_dir[pin] = monitor->getDirection(pin);

	// Set attribute value
	attr.set_value(&gpio_dir[pin]);
}


// Generic write method for direction attribute
void MCP23017Srv::write_direction(Tango::WAttribute &attr) {
	// Get pin number
	int pin = getPinNumber(attr.get_name().c_str());

	// Get write value
	bool w_val;
	attr.get_write_value(w_val);

	// Write value
	monitor->setDirection(pin, w_val);
}


// Generic read method for polarity attribute
void MCP23017Srv::read_polarity(Tango::Attribute &attr) {
	// Get pin number
	int pin = getPinNumber(attr.get_name().c_str());

	// Get polarity
	gpio_pol[pin] = monitor->getPolarity(pin);

	// Set attribute value
	attr.set_value(&gpio_pol[pin]);
}


// Generic write method for polarity attribute
void MCP23017Srv::write_polarity(Tango::WAttribute &attr) {
	// Get pin number
	int pin = getPinNumber(attr.get_name().c_str());

	// Get write value
	bool w_val;
	attr.get_write_value(w_val);

	// Write value
	monitor->setPolarity(pin, w_val);
}


// Method to translate a attribute name to a pin number
int MCP23017Srv::getPinNumber(const char* name) {
	int num = -1;

	// String lenght must be at least 3
	if(strlen(name) < 3)
		Tango::Except::throw_exception(
			(const char*)"Bad name",
			(const char*)"Pin name should be at least 3 char long",
			(const char*)"MCP23017Srv::getPinNumber()");
	// Second char should be 0 or 1
	if(name[1] == '0')
		num = (int)(name[2]) - 48;

	else if(name[1] == '1')
		num = 10 + (int)(name[2]) - 48;

	if(num == -1 || num < 0 || num > 15)
		Tango::Except::throw_exception(
			(const char*)"Bad number",
			(const char*)"Pin number should be between 0 and 15",
			(const char*)"MCP23017Srv::getPinNumber()");

	return num;
}


// Monitor thread constructor
GPIOMonitor::GPIOMonitor(MCP23017Srv* parent, short bus, short address) :
	_parent(parent),
	_terminate(false),
	_ev_vals(NULL),
	_ev_names(NULL)
{
	// Initialization
	for(size_t i = 0; i < 16; i++)
		_values[i] = false;

	// Memory allocation
	_ev_vals = new bool[16];
	if(!_ev_vals) {
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Failed to allocate memory for boolean values" << endl;
		Tango::Except::throw_exception(
			(const char *)"Memory allocation failed",
			(const char *)"Failed to allocate memory for boolean values",
			(const char *)"GPIOMonitor::GPIOMonitor()");
	}
	memset(_ev_vals, 0, sizeof(bool) * 16);

	_ev_names = new char*[16];
	if(!_ev_names) {
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Failed to allocate memory for pointers to attribute names" << endl;
		Tango::Except::throw_exception(
			(const char *)"Memory allocation failed",
			(const char *)"Failed to allocate memory for attribute names",
			(const char *)"GPIOMonitor::GPIOMonitor()");
	}
	for(size_t i = 0; i < 16; i++)
		_ev_names[i] = NULL;

	// Allocate attribute names
	for(size_t i = 0; i < 16; i++) {
		int ans = asprintf(&(_ev_names[i]), "b%02zu", i);
		if(ans == -1) {
			_ev_names[i] = NULL;
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Failed to allocate memory for attributes names" << endl;
			Tango::Except::throw_exception(
				(const char *)"Memory allocation failed",
				(const char *)"Failed to allocate memory for attribute names",
				(const char *)"GPIOMonitor::GPIOMonitor()");
		}
	}

	// Create MCP23017 device
	try {
		_dev = new mcp23017(bus, address);

		// Configuration
		_dev->setConfiguration(MCP23017_IOCON_ODR & MCP23017_IOCON_DISSLW,
		                       MCP23017_IOCON_INTPOL & MCP23017_IOCON_SEQOP & MCP23017_IOCON_MIRROR & MCP23017_IOCON_BANK);

	} catch(MCPException &e) {
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Failed to create MCP23017 device (Error: " << e.what() << ")" << endl;
		Tango::Except::throw_exception(
			(const char *)"I2C error",
			(const char *)"Failed to initialize MCP23017 device",
			(const char *)"GPIOMonitor::GPIOMonitor()");
	}

	// Start thread
	this->start_undetached();
}


// Millisecond sleep
void GPIOMonitor::msleep(uint32_t msec) {
	if(msec <= 0)
		return;
	struct timespec st;
	struct timeval start, stop;
	gettimeofday(&start, NULL);
	// Setup delay
	st.tv_sec = msec / 1000;
	st.tv_nsec = (msec % 1000) * 1000000;

	while(1) {
		int ans = nanosleep(&st, NULL);
		if(ans == -1 && errno == EINTR) {
			// Nanosleep was interrupted by a signal
			gettimeofday(&stop, NULL);
			uint32_t rem = msec - ELAPSED_TIME_MS(start, stop);
			if(rem > 0) {
				st.tv_sec = rem / 1000;
				st.tv_nsec = (rem % 1000) * 1000000;
			} else {
				break;
			}
		} else {
			break;
		}
	}
}


// Monitor thread destructor
GPIOMonitor::~GPIOMonitor() {
	// Unallocate memory
	if(_ev_vals)
		delete[] _ev_vals;

	if(_ev_names) {
		for(size_t i = 0; i < 16; i++) {
			if(_ev_names[i])
				::free(_ev_names[i]);
		}
		delete[] _ev_names;
	}
}


// Read GPIO
bool GPIOMonitor::readGPIO(size_t id) {
	if(id > 15)
		Tango::Except::throw_exception(
			(const char *)"Index out of range",
			(const char *)"GPIO pin index out of range. Should be between 0 and 15.",
			(const char *)"GPIOMonitor::readGPIO()");
	omni_mutex_lock sync(this->_lock);
	return _values[id];
}


// Write GPIO
void GPIOMonitor::writeGPIO(size_t id, bool val) {
	if(id > 15)
		Tango::Except::throw_exception(
			(const char *)"Index out of range",
			(const char *)"GPIO pin index out of range. Should be between 0 and 15.",
			(const char *)"GPIOMonitor::writeGPIO()");

	try {
		omni_mutex_lock sync(this->_lock);
		_dev->writeGPIO(id, val);

	} catch(MCPException &e) {
		stringstream msg;
		msg << "Error writing gpio pin " << id << " (Error: " << e.what() << ")";
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << msg.str() << endl;
		Tango::Except::throw_exception(
			(const char *)"I2C error",
			msg.str(),
			(const char *)"GPIOMonitor::writeGPIO()");
	}
}


// Get polarity
bool GPIOMonitor::getPolarity(size_t id) {
	if(id > 15)
		Tango::Except::throw_exception(
			(const char *)"Index out of range",
			(const char *)"GPIO pin index out of range. Should be between 0 and 15.",
			(const char *)"GPIOMonitor::getPolarity()");

	try {
		omni_mutex_lock sync(this->_lock);
		return _dev->getPolarity(id);

	} catch(MCPException &e) {
		stringstream msg;
		msg << "Error reading polarity of pin " << id << " (Error: " << e.what() << ")";
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << msg.str() << endl;
		Tango::Except::throw_exception(
			(const char *)"I2C error",
			msg.str(),
			(const char *)"GPIOMonitor::getPolarity()");
	}
}


// Set Polarity
void GPIOMonitor::setPolarity(size_t id, bool inverted) {
	if(id > 15)
		Tango::Except::throw_exception(
			(const char *)"Index out of range",
			(const char *)"GPIO pin index out of range. Should be between 0 and 15.",
			(const char *)"GPIOMonitor::setPolarity()");

	try {
		omni_mutex_lock sync(this->_lock);
		_dev->setPolarity(id, inverted);

	} catch(MCPException &e) {
		stringstream msg;
		msg << "Error writing polarity of pin " << id << " (Error: " << e.what() << ")";
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << msg.str() << endl;
		Tango::Except::throw_exception(
			(const char *)"I2C error",
			msg.str(),
			(const char *)"GPIOMonitor::setPolarity()");
	}
}


// Get direction
bool GPIOMonitor::getDirection(size_t id) {
	if(id > 15)
		Tango::Except::throw_exception(
			(const char *)"Index out of range",
			(const char *)"GPIO pin index out of range. Should be between 0 and 15.",
			(const char *)"GPIOMonitor::getDirection()");

	try {
		omni_mutex_lock sync(this->_lock);
		return _dev->getDirection(id);

	} catch(MCPException &e) {
		stringstream msg;
		msg << "Error reading direction of pin " << id << " (Error: " << e.what() << ")";
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << msg.str() << endl;
		Tango::Except::throw_exception(
			(const char *)"I2C error",
			msg.str(),
			(const char *)"GPIOMonitor::getDirection()");
	}
}


// Set direction
void GPIOMonitor::setDirection(size_t id, bool input) {
	if(id > 15)
		Tango::Except::throw_exception(
			(const char *)"Index out of range",
			(const char *)"GPIO pin index out of range. Should be between 0 and 15.",
			(const char *)"GPIOMonitor::setDirection()");

	try {
		omni_mutex_lock sync(this->_lock);
		_dev->setDirection(id, input);

	} catch(MCPException &e) {
		stringstream msg;
		msg << "Error writing direction of pin " << id << " (Error: " << e.what() << ")";
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << msg.str() << endl;
		Tango::Except::throw_exception(
			(const char *)"I2C error",
			msg.str(),
			(const char *)"GPIOMonitor::setDirection()");
	}
}


// Main thread
void *GPIOMonitor::run_undetached(void* ptr) {

	uint8_t a, b;
	struct timeval beg, end;

	while(!_terminate) {
		gettimeofday(&beg, NULL);

		try {
			omni_mutex_lock sync(this->_lock);
			a = _dev->getRegister(MCP23017_GPIOA);
			b = _dev->getRegister(MCP23017_GPIOB);

			// Check bank A
			for(int i = 0; i < 8; i++) {
				bool val = a & (0x1 << i);
				if(_values[i] != val) {
					// GPIO changed since last check. Store value
					_values[i] = val;
					_ev_vals[i] = val;
					// Push change event
					_parent->push_change_event(_ev_names[i], &(_ev_vals[i]));
				}
			}

			// Check bank B
			for(int i = 0; i < 8; i++) {
				bool val = b & (0x1 << i);
				if(_values[i+8] != val) {
					// GPIO changed since last check. Store value
					_values[i+8] = val;
					_ev_vals[i+8] = val;
					// Push change event
					_parent->push_change_event(_ev_names[i+8], &(_ev_vals[i+8]));
				}
			}

		} catch(MCPException &e) {
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Failed to read GPIO banks (Error: " << e.what() << ")" << endl;
			_parent->set_state(Tango::FAULT);
			_parent->set_status("I2C error");
		} catch(Tango::DevFailed &e) {
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Unexpected Tango exception. Errors:" << endl;
			for(size_t i = 0; i < e.errors.length(); i++)
				_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "[" << (i+1) << "] " << e.errors[i].desc << " (from: " << e.errors[i].origin << ")" << endl;
		}

		// Sleep
		gettimeofday(&end, NULL);
		int elapsed = ELAPSED_TIME_MS(beg, end);
		if(_parent->polling - elapsed > 0) {
			msleep(_parent->polling - elapsed);
		}
	}

	int *retval = new int();
	*retval = 0;
	return (void*)retval;
}

/*----- PROTECTED REGION END -----*/	//	MCP23017Srv::namespace_ending
} //	namespace
