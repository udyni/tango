/*----- PROTECTED REGION ID(ApogeeCameraClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        ApogeeCameraClass.cpp
//
// description : C++ source for the ApogeeCameraClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the ApogeeCamera once per process.
//
// project :     Apogee CCD Camera
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <ApogeeCameraClass.h>

/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass.cpp

//-------------------------------------------------------------------
/**
 *	Create ApogeeCameraClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_ApogeeCamera_class(const char *name) {
		return ApogeeCamera_ns::ApogeeCameraClass::init(name);
	}
}

namespace ApogeeCamera_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
ApogeeCameraClass *ApogeeCameraClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		ApogeeCameraClass::ApogeeCameraClass(string &s)
 * description : 	constructor for the ApogeeCameraClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
ApogeeCameraClass::ApogeeCameraClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering ApogeeCameraClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(ApogeeCameraClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::constructor

	cout2 << "Leaving ApogeeCameraClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		ApogeeCameraClass::~ApogeeCameraClass()
 * description : 	destructor for the ApogeeCameraClass
 */
//--------------------------------------------------------
ApogeeCameraClass::~ApogeeCameraClass()
{
	/*----- PROTECTED REGION ID(ApogeeCameraClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		ApogeeCameraClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
ApogeeCameraClass *ApogeeCameraClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new ApogeeCameraClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		ApogeeCameraClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
ApogeeCameraClass *ApogeeCameraClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		StartAcquisitionClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartAcquisitionClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "StartAcquisitionClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	((static_cast<ApogeeCamera *>(device))->start_acquisition(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StopAcquisitionClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopAcquisitionClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopAcquisitionClass::execute(): arrived" << endl;
	((static_cast<ApogeeCamera *>(device))->stop_acquisition());
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum ApogeeCameraClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum ApogeeCameraClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum ApogeeCameraClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void ApogeeCameraClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "Polling";
	prop_desc = "Period of the polling loop";
	prop_def  = "1000";
	vect_data.clear();
	vect_data.push_back("1000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void ApogeeCameraClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Apogee CCD Camera");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void ApogeeCameraClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(ApogeeCameraClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new ApogeeCamera(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		ApogeeCamera *dev = static_cast<ApogeeCamera *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(ApogeeCameraClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void ApogeeCameraClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(ApogeeCameraClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::attribute_factory_before
	//	Attribute : ADC_Gain
	ADC_GainAttrib	*adc_gain = new ADC_GainAttrib();
	Tango::UserDefaultAttrProp	adc_gain_prop;
	//	description	not set for ADC_Gain
	adc_gain_prop.set_label("ADC gain");
	//	unit	not set for ADC_Gain
	//	standard_unit	not set for ADC_Gain
	//	display_unit	not set for ADC_Gain
	//	format	not set for ADC_Gain
	//	max_value	not set for ADC_Gain
	//	min_value	not set for ADC_Gain
	//	max_alarm	not set for ADC_Gain
	//	min_alarm	not set for ADC_Gain
	//	max_warning	not set for ADC_Gain
	//	min_warning	not set for ADC_Gain
	//	delta_t	not set for ADC_Gain
	//	delta_val	not set for ADC_Gain
	
	adc_gain->set_default_properties(adc_gain_prop);
	//	Not Polled
	adc_gain->set_disp_level(Tango::OPERATOR);
	adc_gain->set_memorized();
	adc_gain->set_memorized_init(false);
	adc_gain->set_change_event(true, false);
	att_list.push_back(adc_gain);

	//	Attribute : ADC_Offset
	ADC_OffsetAttrib	*adc_offset = new ADC_OffsetAttrib();
	Tango::UserDefaultAttrProp	adc_offset_prop;
	//	description	not set for ADC_Offset
	adc_offset_prop.set_label("ADC offset");
	//	unit	not set for ADC_Offset
	//	standard_unit	not set for ADC_Offset
	//	display_unit	not set for ADC_Offset
	//	format	not set for ADC_Offset
	//	max_value	not set for ADC_Offset
	//	min_value	not set for ADC_Offset
	//	max_alarm	not set for ADC_Offset
	//	min_alarm	not set for ADC_Offset
	//	max_warning	not set for ADC_Offset
	//	min_warning	not set for ADC_Offset
	//	delta_t	not set for ADC_Offset
	//	delta_val	not set for ADC_Offset
	
	adc_offset->set_default_properties(adc_offset_prop);
	//	Not Polled
	adc_offset->set_disp_level(Tango::OPERATOR);
	adc_offset->set_memorized();
	adc_offset->set_memorized_init(false);
	adc_offset->set_change_event(true, false);
	att_list.push_back(adc_offset);

	//	Attribute : CoolingDrive
	CoolingDriveAttrib	*coolingdrive = new CoolingDriveAttrib();
	Tango::UserDefaultAttrProp	coolingdrive_prop;
	coolingdrive_prop.set_description("Drive of the thermoelectric cooler in percentage");
	coolingdrive_prop.set_label("Cooling Drive");
	coolingdrive_prop.set_unit("%");
	coolingdrive_prop.set_standard_unit("%");
	coolingdrive_prop.set_display_unit("%");
	coolingdrive_prop.set_format("%f");
	//	max_value	not set for CoolingDrive
	//	min_value	not set for CoolingDrive
	//	max_alarm	not set for CoolingDrive
	//	min_alarm	not set for CoolingDrive
	//	max_warning	not set for CoolingDrive
	//	min_warning	not set for CoolingDrive
	//	delta_t	not set for CoolingDrive
	//	delta_val	not set for CoolingDrive
	
	coolingdrive->set_default_properties(coolingdrive_prop);
	//	Not Polled
	coolingdrive->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	coolingdrive->set_change_event(true, false);
	att_list.push_back(coolingdrive);

	//	Attribute : CoolingEnable
	CoolingEnableAttrib	*coolingenable = new CoolingEnableAttrib();
	Tango::UserDefaultAttrProp	coolingenable_prop;
	coolingenable_prop.set_description("Enable TEC cooling of the CCD");
	coolingenable_prop.set_label("Enable Cooling");
	//	unit	not set for CoolingEnable
	//	standard_unit	not set for CoolingEnable
	//	display_unit	not set for CoolingEnable
	//	format	not set for CoolingEnable
	//	max_value	not set for CoolingEnable
	//	min_value	not set for CoolingEnable
	//	max_alarm	not set for CoolingEnable
	//	min_alarm	not set for CoolingEnable
	//	max_warning	not set for CoolingEnable
	//	min_warning	not set for CoolingEnable
	//	delta_t	not set for CoolingEnable
	//	delta_val	not set for CoolingEnable
	
	coolingenable->set_default_properties(coolingenable_prop);
	//	Not Polled
	coolingenable->set_disp_level(Tango::OPERATOR);
	coolingenable->set_memorized();
	coolingenable->set_memorized_init(false);
	coolingenable->set_change_event(true, false);
	att_list.push_back(coolingenable);

	//	Attribute : CoolingSetpoint
	CoolingSetpointAttrib	*coolingsetpoint = new CoolingSetpointAttrib();
	Tango::UserDefaultAttrProp	coolingsetpoint_prop;
	coolingsetpoint_prop.set_description("Camera sensor cooling setpoint");
	coolingsetpoint_prop.set_label("Cooling Setpoint");
	coolingsetpoint_prop.set_unit("degC");
	coolingsetpoint_prop.set_standard_unit("degC");
	coolingsetpoint_prop.set_display_unit("degC");
	coolingsetpoint_prop.set_format("%.2f");
	//	max_value	not set for CoolingSetpoint
	//	min_value	not set for CoolingSetpoint
	//	max_alarm	not set for CoolingSetpoint
	//	min_alarm	not set for CoolingSetpoint
	//	max_warning	not set for CoolingSetpoint
	//	min_warning	not set for CoolingSetpoint
	//	delta_t	not set for CoolingSetpoint
	//	delta_val	not set for CoolingSetpoint
	
	coolingsetpoint->set_default_properties(coolingsetpoint_prop);
	//	Not Polled
	coolingsetpoint->set_disp_level(Tango::OPERATOR);
	coolingsetpoint->set_memorized();
	coolingsetpoint->set_memorized_init(false);
	coolingsetpoint->set_change_event(true, false);
	att_list.push_back(coolingsetpoint);

	//	Attribute : CoolingStatus
	CoolingStatusAttrib	*coolingstatus = new CoolingStatusAttrib();
	Tango::UserDefaultAttrProp	coolingstatus_prop;
	//	description	not set for CoolingStatus
	//	label	not set for CoolingStatus
	//	unit	not set for CoolingStatus
	//	standard_unit	not set for CoolingStatus
	//	display_unit	not set for CoolingStatus
	//	format	not set for CoolingStatus
	//	max_value	not set for CoolingStatus
	//	min_value	not set for CoolingStatus
	//	max_alarm	not set for CoolingStatus
	//	min_alarm	not set for CoolingStatus
	//	max_warning	not set for CoolingStatus
	//	min_warning	not set for CoolingStatus
	//	delta_t	not set for CoolingStatus
	//	delta_val	not set for CoolingStatus
	
	coolingstatus->set_default_properties(coolingstatus_prop);
	//	Not Polled
	coolingstatus->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	coolingstatus->set_change_event(true, false);
	att_list.push_back(coolingstatus);

	//	Attribute : CoolingTemperature
	CoolingTemperatureAttrib	*coolingtemperature = new CoolingTemperatureAttrib();
	Tango::UserDefaultAttrProp	coolingtemperature_prop;
	coolingtemperature_prop.set_description("Actual temperature of the camera sensor");
	coolingtemperature_prop.set_label("Colling Temperature");
	coolingtemperature_prop.set_unit("degC");
	coolingtemperature_prop.set_standard_unit("degC");
	coolingtemperature_prop.set_display_unit("degC");
	coolingtemperature_prop.set_format("%.2f");
	//	max_value	not set for CoolingTemperature
	//	min_value	not set for CoolingTemperature
	//	max_alarm	not set for CoolingTemperature
	//	min_alarm	not set for CoolingTemperature
	//	max_warning	not set for CoolingTemperature
	//	min_warning	not set for CoolingTemperature
	//	delta_t	not set for CoolingTemperature
	//	delta_val	not set for CoolingTemperature
	
	coolingtemperature->set_default_properties(coolingtemperature_prop);
	//	Not Polled
	coolingtemperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	coolingtemperature->set_change_event(true, false);
	att_list.push_back(coolingtemperature);

	//	Attribute : EnableFastReadout
	EnableFastReadoutAttrib	*enablefastreadout = new EnableFastReadoutAttrib();
	Tango::UserDefaultAttrProp	enablefastreadout_prop;
	enablefastreadout_prop.set_description("Enable fast readout");
	enablefastreadout_prop.set_label("Enable fast readout");
	//	unit	not set for EnableFastReadout
	//	standard_unit	not set for EnableFastReadout
	//	display_unit	not set for EnableFastReadout
	//	format	not set for EnableFastReadout
	//	max_value	not set for EnableFastReadout
	//	min_value	not set for EnableFastReadout
	//	max_alarm	not set for EnableFastReadout
	//	min_alarm	not set for EnableFastReadout
	//	max_warning	not set for EnableFastReadout
	//	min_warning	not set for EnableFastReadout
	//	delta_t	not set for EnableFastReadout
	//	delta_val	not set for EnableFastReadout
	
	enablefastreadout->set_default_properties(enablefastreadout_prop);
	//	Not Polled
	enablefastreadout->set_disp_level(Tango::OPERATOR);
	enablefastreadout->set_memorized();
	enablefastreadout->set_memorized_init(false);
	enablefastreadout->set_change_event(true, false);
	att_list.push_back(enablefastreadout);

	//	Attribute : IntegrationTime
	IntegrationTimeAttrib	*integrationtime = new IntegrationTimeAttrib();
	Tango::UserDefaultAttrProp	integrationtime_prop;
	integrationtime_prop.set_description("Camera integration time");
	integrationtime_prop.set_label("IntegrationTime");
	integrationtime_prop.set_unit("s");
	integrationtime_prop.set_standard_unit("s");
	integrationtime_prop.set_display_unit("s");
	integrationtime_prop.set_format("%.3f");
	//	max_value	not set for IntegrationTime
	//	min_value	not set for IntegrationTime
	//	max_alarm	not set for IntegrationTime
	//	min_alarm	not set for IntegrationTime
	//	max_warning	not set for IntegrationTime
	//	min_warning	not set for IntegrationTime
	//	delta_t	not set for IntegrationTime
	//	delta_val	not set for IntegrationTime
	
	integrationtime->set_default_properties(integrationtime_prop);
	//	Not Polled
	integrationtime->set_disp_level(Tango::OPERATOR);
	integrationtime->set_memorized();
	integrationtime->set_memorized_init(false);
	integrationtime->set_change_event(true, false);
	att_list.push_back(integrationtime);

	//	Attribute : ROI_HBin
	ROI_HBinAttrib	*roi_hbin = new ROI_HBinAttrib();
	Tango::UserDefaultAttrProp	roi_hbin_prop;
	roi_hbin_prop.set_description("Horizontal binning of ROI");
	roi_hbin_prop.set_label("ROI H binning");
	//	unit	not set for ROI_HBin
	//	standard_unit	not set for ROI_HBin
	//	display_unit	not set for ROI_HBin
	//	format	not set for ROI_HBin
	//	max_value	not set for ROI_HBin
	//	min_value	not set for ROI_HBin
	//	max_alarm	not set for ROI_HBin
	//	min_alarm	not set for ROI_HBin
	//	max_warning	not set for ROI_HBin
	//	min_warning	not set for ROI_HBin
	//	delta_t	not set for ROI_HBin
	//	delta_val	not set for ROI_HBin
	
	roi_hbin->set_default_properties(roi_hbin_prop);
	//	Not Polled
	roi_hbin->set_disp_level(Tango::OPERATOR);
	roi_hbin->set_memorized();
	roi_hbin->set_memorized_init(false);
	roi_hbin->set_change_event(true, false);
	att_list.push_back(roi_hbin);

	//	Attribute : ROI_HSize
	ROI_HSizeAttrib	*roi_hsize = new ROI_HSizeAttrib();
	Tango::UserDefaultAttrProp	roi_hsize_prop;
	roi_hsize_prop.set_description("Horizontal size of ROI");
	roi_hsize_prop.set_label("ROI H size");
	//	unit	not set for ROI_HSize
	//	standard_unit	not set for ROI_HSize
	//	display_unit	not set for ROI_HSize
	//	format	not set for ROI_HSize
	//	max_value	not set for ROI_HSize
	//	min_value	not set for ROI_HSize
	//	max_alarm	not set for ROI_HSize
	//	min_alarm	not set for ROI_HSize
	//	max_warning	not set for ROI_HSize
	//	min_warning	not set for ROI_HSize
	//	delta_t	not set for ROI_HSize
	//	delta_val	not set for ROI_HSize
	
	roi_hsize->set_default_properties(roi_hsize_prop);
	//	Not Polled
	roi_hsize->set_disp_level(Tango::OPERATOR);
	roi_hsize->set_memorized();
	roi_hsize->set_memorized_init(false);
	roi_hsize->set_change_event(true, false);
	att_list.push_back(roi_hsize);

	//	Attribute : ROI_HStart
	ROI_HStartAttrib	*roi_hstart = new ROI_HStartAttrib();
	Tango::UserDefaultAttrProp	roi_hstart_prop;
	roi_hstart_prop.set_description("Horizontal start position for ROI");
	roi_hstart_prop.set_label("ROI H start");
	//	unit	not set for ROI_HStart
	//	standard_unit	not set for ROI_HStart
	//	display_unit	not set for ROI_HStart
	//	format	not set for ROI_HStart
	//	max_value	not set for ROI_HStart
	//	min_value	not set for ROI_HStart
	//	max_alarm	not set for ROI_HStart
	//	min_alarm	not set for ROI_HStart
	//	max_warning	not set for ROI_HStart
	//	min_warning	not set for ROI_HStart
	//	delta_t	not set for ROI_HStart
	//	delta_val	not set for ROI_HStart
	
	roi_hstart->set_default_properties(roi_hstart_prop);
	//	Not Polled
	roi_hstart->set_disp_level(Tango::OPERATOR);
	roi_hstart->set_memorized();
	roi_hstart->set_memorized_init(false);
	roi_hstart->set_change_event(true, false);
	att_list.push_back(roi_hstart);

	//	Attribute : ROI_VBin
	ROI_VBinAttrib	*roi_vbin = new ROI_VBinAttrib();
	Tango::UserDefaultAttrProp	roi_vbin_prop;
	roi_vbin_prop.set_description("Vertical binning of ROI");
	roi_vbin_prop.set_label("ROI V binning");
	//	unit	not set for ROI_VBin
	//	standard_unit	not set for ROI_VBin
	//	display_unit	not set for ROI_VBin
	//	format	not set for ROI_VBin
	//	max_value	not set for ROI_VBin
	//	min_value	not set for ROI_VBin
	//	max_alarm	not set for ROI_VBin
	//	min_alarm	not set for ROI_VBin
	//	max_warning	not set for ROI_VBin
	//	min_warning	not set for ROI_VBin
	//	delta_t	not set for ROI_VBin
	//	delta_val	not set for ROI_VBin
	
	roi_vbin->set_default_properties(roi_vbin_prop);
	//	Not Polled
	roi_vbin->set_disp_level(Tango::OPERATOR);
	roi_vbin->set_memorized();
	roi_vbin->set_memorized_init(false);
	roi_vbin->set_change_event(true, false);
	att_list.push_back(roi_vbin);

	//	Attribute : ROI_VSize
	ROI_VSizeAttrib	*roi_vsize = new ROI_VSizeAttrib();
	Tango::UserDefaultAttrProp	roi_vsize_prop;
	roi_vsize_prop.set_description("Vertical size of ROI");
	roi_vsize_prop.set_label("ROI V size");
	//	unit	not set for ROI_VSize
	//	standard_unit	not set for ROI_VSize
	//	display_unit	not set for ROI_VSize
	//	format	not set for ROI_VSize
	//	max_value	not set for ROI_VSize
	//	min_value	not set for ROI_VSize
	//	max_alarm	not set for ROI_VSize
	//	min_alarm	not set for ROI_VSize
	//	max_warning	not set for ROI_VSize
	//	min_warning	not set for ROI_VSize
	//	delta_t	not set for ROI_VSize
	//	delta_val	not set for ROI_VSize
	
	roi_vsize->set_default_properties(roi_vsize_prop);
	//	Not Polled
	roi_vsize->set_disp_level(Tango::OPERATOR);
	roi_vsize->set_memorized();
	roi_vsize->set_memorized_init(false);
	roi_vsize->set_change_event(true, false);
	att_list.push_back(roi_vsize);

	//	Attribute : ROI_VStart
	ROI_VStartAttrib	*roi_vstart = new ROI_VStartAttrib();
	Tango::UserDefaultAttrProp	roi_vstart_prop;
	roi_vstart_prop.set_description("Vertical start position for ROI");
	roi_vstart_prop.set_label("ROI V start");
	//	unit	not set for ROI_VStart
	//	standard_unit	not set for ROI_VStart
	//	display_unit	not set for ROI_VStart
	//	format	not set for ROI_VStart
	//	max_value	not set for ROI_VStart
	//	min_value	not set for ROI_VStart
	//	max_alarm	not set for ROI_VStart
	//	min_alarm	not set for ROI_VStart
	//	max_warning	not set for ROI_VStart
	//	min_warning	not set for ROI_VStart
	//	delta_t	not set for ROI_VStart
	//	delta_val	not set for ROI_VStart
	
	roi_vstart->set_default_properties(roi_vstart_prop);
	//	Not Polled
	roi_vstart->set_disp_level(Tango::OPERATOR);
	roi_vstart->set_memorized();
	roi_vstart->set_memorized_init(false);
	roi_vstart->set_change_event(true, false);
	att_list.push_back(roi_vstart);

	//	Attribute : Image
	ImageAttrib	*image = new ImageAttrib();
	Tango::UserDefaultAttrProp	image_prop;
	image_prop.set_description("Last acquired image");
	image_prop.set_label("Image");
	//	unit	not set for Image
	//	standard_unit	not set for Image
	//	display_unit	not set for Image
	//	format	not set for Image
	//	max_value	not set for Image
	//	min_value	not set for Image
	//	max_alarm	not set for Image
	//	min_alarm	not set for Image
	//	max_warning	not set for Image
	//	min_warning	not set for Image
	//	delta_t	not set for Image
	//	delta_val	not set for Image
	
	image->set_default_properties(image_prop);
	//	Not Polled
	image->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	image->set_change_event(true, false);
	att_list.push_back(image);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(ApogeeCameraClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void ApogeeCameraClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(ApogeeCameraClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::pipe_factory_before
	/*----- PROTECTED REGION ID(ApogeeCameraClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void ApogeeCameraClass::command_factory()
{
	/*----- PROTECTED REGION ID(ApogeeCameraClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::command_factory_before

	//	Set polling perod for command State
	Tango::Command	&stateCmd = get_cmd_by_name("State");
	stateCmd.set_polling_period(500);
	

	//	Command StartAcquisition
	StartAcquisitionClass	*pStartAcquisitionCmd =
		new StartAcquisitionClass("StartAcquisition",
			Tango::DEV_LONG, Tango::DEV_VOID,
			"Numer of images to acquire (-1 for continuous acquisition)",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStartAcquisitionCmd);

	//	Command StopAcquisition
	StopAcquisitionClass	*pStopAcquisitionCmd =
		new StopAcquisitionClass("StopAcquisition",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopAcquisitionCmd);

	/*----- PROTECTED REGION ID(ApogeeCameraClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		ApogeeCameraClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void ApogeeCameraClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(ApogeeCameraClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		ApogeeCameraClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void ApogeeCameraClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		ApogeeCamera *dev = static_cast<ApogeeCamera *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(ApogeeCameraClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : ApogeeCameraClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *ApogeeCameraClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(ApogeeCameraClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::Additional Methods
} //	namespace
