/*----- PROTECTED REGION ID(ApogeeCameraClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        ApogeeCameraClass.h
//
// description : Include for the ApogeeCamera root class.
//               This class is the singleton class for
//                the ApogeeCamera device class.
//               It contains all properties and methods which the 
//               ApogeeCamera requires only once e.g. the commands.
//
// project :     Apogee CCD Camera
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ApogeeCameraClass_H
#define ApogeeCameraClass_H

#include <tango.h>
#include <ApogeeCamera.h>


/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass.h


namespace ApogeeCamera_ns
{
/*----- PROTECTED REGION ID(ApogeeCameraClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute ADC_Gain class definition
class ADC_GainAttrib: public Tango::Attr
{
public:
	ADC_GainAttrib():Attr("ADC_Gain",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ADC_GainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_ADC_Gain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_ADC_Gain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_ADC_Gain_allowed(ty);}
};

//	Attribute ADC_Offset class definition
class ADC_OffsetAttrib: public Tango::Attr
{
public:
	ADC_OffsetAttrib():Attr("ADC_Offset",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ADC_OffsetAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_ADC_Offset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_ADC_Offset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_ADC_Offset_allowed(ty);}
};

//	Attribute CoolingDrive class definition
class CoolingDriveAttrib: public Tango::Attr
{
public:
	CoolingDriveAttrib():Attr("CoolingDrive",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~CoolingDriveAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_CoolingDrive(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_CoolingDrive_allowed(ty);}
};

//	Attribute CoolingEnable class definition
class CoolingEnableAttrib: public Tango::Attr
{
public:
	CoolingEnableAttrib():Attr("CoolingEnable",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~CoolingEnableAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_CoolingEnable(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_CoolingEnable(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_CoolingEnable_allowed(ty);}
};

//	Attribute CoolingSetpoint class definition
class CoolingSetpointAttrib: public Tango::Attr
{
public:
	CoolingSetpointAttrib():Attr("CoolingSetpoint",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~CoolingSetpointAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_CoolingSetpoint(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_CoolingSetpoint(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_CoolingSetpoint_allowed(ty);}
};

//	Attribute CoolingStatus class definition
class CoolingStatusAttrib: public Tango::Attr
{
public:
	CoolingStatusAttrib():Attr("CoolingStatus",
			Tango::DEV_STATE, Tango::READ) {};
	~CoolingStatusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_CoolingStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_CoolingStatus_allowed(ty);}
};

//	Attribute CoolingTemperature class definition
class CoolingTemperatureAttrib: public Tango::Attr
{
public:
	CoolingTemperatureAttrib():Attr("CoolingTemperature",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~CoolingTemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_CoolingTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_CoolingTemperature_allowed(ty);}
};

//	Attribute EnableFastReadout class definition
class EnableFastReadoutAttrib: public Tango::Attr
{
public:
	EnableFastReadoutAttrib():Attr("EnableFastReadout",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~EnableFastReadoutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_EnableFastReadout(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_EnableFastReadout(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_EnableFastReadout_allowed(ty);}
};

//	Attribute IntegrationTime class definition
class IntegrationTimeAttrib: public Tango::Attr
{
public:
	IntegrationTimeAttrib():Attr("IntegrationTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~IntegrationTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_IntegrationTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_IntegrationTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_IntegrationTime_allowed(ty);}
};

//	Attribute ROI_HBin class definition
class ROI_HBinAttrib: public Tango::Attr
{
public:
	ROI_HBinAttrib():Attr("ROI_HBin",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ROI_HBinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_ROI_HBin(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_ROI_HBin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_ROI_HBin_allowed(ty);}
};

//	Attribute ROI_HSize class definition
class ROI_HSizeAttrib: public Tango::Attr
{
public:
	ROI_HSizeAttrib():Attr("ROI_HSize",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ROI_HSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_ROI_HSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_ROI_HSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_ROI_HSize_allowed(ty);}
};

//	Attribute ROI_HStart class definition
class ROI_HStartAttrib: public Tango::Attr
{
public:
	ROI_HStartAttrib():Attr("ROI_HStart",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ROI_HStartAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_ROI_HStart(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_ROI_HStart(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_ROI_HStart_allowed(ty);}
};

//	Attribute ROI_VBin class definition
class ROI_VBinAttrib: public Tango::Attr
{
public:
	ROI_VBinAttrib():Attr("ROI_VBin",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ROI_VBinAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_ROI_VBin(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_ROI_VBin(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_ROI_VBin_allowed(ty);}
};

//	Attribute ROI_VSize class definition
class ROI_VSizeAttrib: public Tango::Attr
{
public:
	ROI_VSizeAttrib():Attr("ROI_VSize",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ROI_VSizeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_ROI_VSize(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_ROI_VSize(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_ROI_VSize_allowed(ty);}
};

//	Attribute ROI_VStart class definition
class ROI_VStartAttrib: public Tango::Attr
{
public:
	ROI_VStartAttrib():Attr("ROI_VStart",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~ROI_VStartAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_ROI_VStart(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<ApogeeCamera *>(dev))->write_ROI_VStart(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_ROI_VStart_allowed(ty);}
};

//	Attribute Image class definition
class ImageAttrib: public Tango::ImageAttr
{
public:
	ImageAttrib():ImageAttr("Image",
			Tango::DEV_USHORT, Tango::READ, 4096, 4096) {};
	~ImageAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<ApogeeCamera *>(dev))->read_Image(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<ApogeeCamera *>(dev))->is_Image_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command StartAcquisition class definition
class StartAcquisitionClass : public Tango::Command
{
public:
	StartAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartAcquisitionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ApogeeCamera *>(dev))->is_StartAcquisition_allowed(any);}
};

//	Command StopAcquisition class definition
class StopAcquisitionClass : public Tango::Command
{
public:
	StopAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopAcquisitionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopAcquisitionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ApogeeCamera *>(dev))->is_StopAcquisition_allowed(any);}
};


/**
 *	The ApogeeCameraClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  ApogeeCameraClass : public Tango::DeviceClass
#else
class ApogeeCameraClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(ApogeeCameraClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	ApogeeCameraClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static ApogeeCameraClass *init(const char *);
		static ApogeeCameraClass *instance();
		~ApogeeCameraClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		ApogeeCameraClass(string &);
		static ApogeeCameraClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	ApogeeCamera_H
