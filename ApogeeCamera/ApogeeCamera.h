/*----- PROTECTED REGION ID(ApogeeCamera.h) ENABLED START -----*/
//=============================================================================
//
// file :        ApogeeCamera.h
//
// description : Include file for the ApogeeCamera class
//
// project :     Apogee CCD Camera
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef ApogeeCamera_H
#define ApogeeCamera_H

#include <tango.h>
#include <dserverclass.h>
#include <device.h>
#include <omnithread.h>
#include <byteswap.h>
#include <queue>

// Libapogee includes
#include <apogee/Ascent.h>
#include <apogee/FindDeviceUsb.h>
#include <apogee/CameraInfo.h>

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif

/*----- PROTECTED REGION END -----*/	//	ApogeeCamera.h

/**
 *  ApogeeCamera class description:
 *
 */

namespace ApogeeCamera_ns
{
/*----- PROTECTED REGION ID(ApogeeCamera::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class DeviceInfo;
class FindDeviceUsbEx;
class ApogeeMon;

/*----- PROTECTED REGION END -----*/	//	ApogeeCamera::Additional Class Declarations

class ApogeeCamera : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(ApogeeCamera::Data Members) ENABLED START -----*/

//	Add your own data members

	// Apogee monitoring thread
	ApogeeMon* dev;

public:
	// Image x and y
	size_t img_x;
	size_t img_y;

/*----- PROTECTED REGION END -----*/	//	ApogeeCamera::Data Members

//	Device property data members
public:
	//	Polling:	Period of the polling loop
	Tango::DevULong	polling;

//	Attribute data members
public:
	Tango::DevUShort	*attr_ADC_Gain_read;
	Tango::DevUShort	*attr_ADC_Offset_read;
	Tango::DevDouble	*attr_CoolingDrive_read;
	Tango::DevBoolean	*attr_CoolingEnable_read;
	Tango::DevDouble	*attr_CoolingSetpoint_read;
	Tango::DevState	*attr_CoolingStatus_read;
	Tango::DevDouble	*attr_CoolingTemperature_read;
	Tango::DevBoolean	*attr_EnableFastReadout_read;
	Tango::DevDouble	*attr_IntegrationTime_read;
	Tango::DevUShort	*attr_ROI_HBin_read;
	Tango::DevUShort	*attr_ROI_HSize_read;
	Tango::DevUShort	*attr_ROI_HStart_read;
	Tango::DevUShort	*attr_ROI_VBin_read;
	Tango::DevUShort	*attr_ROI_VSize_read;
	Tango::DevUShort	*attr_ROI_VStart_read;
	Tango::DevUShort	*attr_Image_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ApogeeCamera(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	ApogeeCamera(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	ApogeeCamera(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~ApogeeCamera() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : ApogeeCamera::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : ApogeeCamera::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute ADC_Gain related methods
 *	Description:
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ADC_Gain(Tango::Attribute &attr);
	virtual void write_ADC_Gain(Tango::WAttribute &attr);
	virtual bool is_ADC_Gain_allowed(Tango::AttReqType type);
/**
 *	Attribute ADC_Offset related methods
 *	Description:
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ADC_Offset(Tango::Attribute &attr);
	virtual void write_ADC_Offset(Tango::WAttribute &attr);
	virtual bool is_ADC_Offset_allowed(Tango::AttReqType type);
/**
 *	Attribute CoolingDrive related methods
 *	Description: Drive of the thermoelectric cooler in percentage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CoolingDrive(Tango::Attribute &attr);
	virtual bool is_CoolingDrive_allowed(Tango::AttReqType type);
/**
 *	Attribute CoolingEnable related methods
 *	Description: Enable TEC cooling of the CCD
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_CoolingEnable(Tango::Attribute &attr);
	virtual void write_CoolingEnable(Tango::WAttribute &attr);
	virtual bool is_CoolingEnable_allowed(Tango::AttReqType type);
/**
 *	Attribute CoolingSetpoint related methods
 *	Description: Camera sensor cooling setpoint
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CoolingSetpoint(Tango::Attribute &attr);
	virtual void write_CoolingSetpoint(Tango::WAttribute &attr);
	virtual bool is_CoolingSetpoint_allowed(Tango::AttReqType type);
/**
 *	Attribute CoolingStatus related methods
 *	Description:
 *
 *	Data type:	Tango::DevState
 *	Attr type:	Scalar
 */
	virtual void read_CoolingStatus(Tango::Attribute &attr);
	virtual bool is_CoolingStatus_allowed(Tango::AttReqType type);
/**
 *	Attribute CoolingTemperature related methods
 *	Description: Actual temperature of the camera sensor
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CoolingTemperature(Tango::Attribute &attr);
	virtual bool is_CoolingTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute EnableFastReadout related methods
 *	Description: Enable fast readout
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_EnableFastReadout(Tango::Attribute &attr);
	virtual void write_EnableFastReadout(Tango::WAttribute &attr);
	virtual bool is_EnableFastReadout_allowed(Tango::AttReqType type);
/**
 *	Attribute IntegrationTime related methods
 *	Description: Camera integration time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_IntegrationTime(Tango::Attribute &attr);
	virtual void write_IntegrationTime(Tango::WAttribute &attr);
	virtual bool is_IntegrationTime_allowed(Tango::AttReqType type);
/**
 *	Attribute ROI_HBin related methods
 *	Description: Horizontal binning of ROI
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ROI_HBin(Tango::Attribute &attr);
	virtual void write_ROI_HBin(Tango::WAttribute &attr);
	virtual bool is_ROI_HBin_allowed(Tango::AttReqType type);
/**
 *	Attribute ROI_HSize related methods
 *	Description: Horizontal size of ROI
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ROI_HSize(Tango::Attribute &attr);
	virtual void write_ROI_HSize(Tango::WAttribute &attr);
	virtual bool is_ROI_HSize_allowed(Tango::AttReqType type);
/**
 *	Attribute ROI_HStart related methods
 *	Description: Horizontal start position for ROI
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ROI_HStart(Tango::Attribute &attr);
	virtual void write_ROI_HStart(Tango::WAttribute &attr);
	virtual bool is_ROI_HStart_allowed(Tango::AttReqType type);
/**
 *	Attribute ROI_VBin related methods
 *	Description: Vertical binning of ROI
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ROI_VBin(Tango::Attribute &attr);
	virtual void write_ROI_VBin(Tango::WAttribute &attr);
	virtual bool is_ROI_VBin_allowed(Tango::AttReqType type);
/**
 *	Attribute ROI_VSize related methods
 *	Description: Vertical size of ROI
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ROI_VSize(Tango::Attribute &attr);
	virtual void write_ROI_VSize(Tango::WAttribute &attr);
	virtual bool is_ROI_VSize_allowed(Tango::AttReqType type);
/**
 *	Attribute ROI_VStart related methods
 *	Description: Vertical start position for ROI
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ROI_VStart(Tango::Attribute &attr);
	virtual void write_ROI_VStart(Tango::WAttribute &attr);
	virtual bool is_ROI_VStart_allowed(Tango::AttReqType type);
/**
 *	Attribute Image related methods
 *	Description: Last acquired image
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Image max = 4096 x 4096
 */
	virtual void read_Image(Tango::Attribute &attr);
	virtual bool is_Image_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : ApogeeCamera::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command StartAcquisition related method
	 *	Description: Start an acquisition of n images. If n = -1 the acquisition is continuous.
	 *
	 *	@param argin Numer of images to acquire (-1 for continuous acquisition)
	 */
	virtual void start_acquisition(Tango::DevLong argin);
	virtual bool is_StartAcquisition_allowed(const CORBA::Any &any);
	/**
	 *	Command StopAcquisition related method
	 *	Description: Stop a running acquisition
	 *
	 */
	virtual void stop_acquisition();
	virtual bool is_StopAcquisition_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : ApogeeCamera::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(ApogeeCamera::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	Tango::DevState ConvertCoolerStatus(Apg::CoolerStatus status);

/*----- PROTECTED REGION END -----*/	//	ApogeeCamera::Additional Method prototypes
};

/*----- PROTECTED REGION ID(ApogeeCamera::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

enum ApgCommand {
	APG_EXPOSURE,
	APG_HBIN,
	APG_HSIZE,
	APG_HSTART,
	APG_VBIN,
	APG_VSIZE,
	APG_VSTART,
	APG_READOUT,
	APG_ADCGAIN,
	APG_ADCOFFSET,
};


class CameraOperation {
public:
	CameraOperation(ApgCommand cmd, double val) : _cmd(cmd), _dval(val), _ival(0) { if(cmd != APG_EXPOSURE) throw std::runtime_error("Only exposure is of type double"); }
	CameraOperation(ApgCommand cmd, uint16_t val) : _cmd(cmd), _ival(val), _dval(0.0) { if(cmd == APG_EXPOSURE) throw std::runtime_error("Exposure can only be of type double"); }

	ApgCommand getCommand()const { return _cmd; }
	double getDouble()const { return _dval; }
	uint16_t getUShort()const { return _ival; }

	friend ostream& operator<<(ostream& os, const CameraOperation& cmd) {
		switch(cmd.getCommand()) {
			case APG_EXPOSURE:
				os << "Exposure(" << cmd.getDouble() << ")";
				break;
			case APG_HBIN:
				os << "HBin(" << cmd.getUShort() << ")";
				break;
			case APG_HSIZE:
				os << "HSize(" << cmd.getUShort() << ")";
				break;
			case APG_HSTART:
				os << "HStart(" << cmd.getUShort() << ")";
				break;
			case APG_VBIN:
				os << "VBin(" << cmd.getUShort() << ")";
				break;
			case APG_VSIZE:
				os << "VSize(" << cmd.getUShort() << ")";
				break;
			case APG_VSTART:
				os << "VStart(" << cmd.getUShort() << ")";
				break;
			case APG_READOUT:
				os << "Readout(" << cmd.getUShort() << ")";
				break;
			case APG_ADCGAIN:
				os << "ADC gain(" << cmd.getUShort() << ")";
				break;
			case APG_ADCOFFSET:
				os << "ADC offset(" << cmd.getUShort() << ")";
				break;
			default:
				os << "Unknown(" << cmd.getDouble() << ", " << cmd.getUShort() << ")";
				break;
		}
		return os;
	}

private:
	ApgCommand _cmd;
	double _dval;
	uint16_t _ival;
};


// More convenient way to store device information
class DeviceInfo {
public:
	std::string address;
	std::string interface;
	std::string type;
	std::string model;
	uint16_t id;
	uint16_t firmware;
};

// Find Apogee USB devices and return information in a vector of DeviceInfo classes
class FindDeviceUsbEx : public FindDeviceUsb {
public:
	std::vector<DeviceInfo> Find();
};



// Class matrix access to buffer
template<typename T>
class MatrixProxy {
public:
	MatrixProxy(std::vector<T>& buffer, size_t rows, size_t cols) : _buffer(buffer), _rows(rows), _cols(cols) {}
	class RowProxy {
	public:
		RowProxy(std::vector<T>& buffer, size_t i, size_t cols) : _buffer(buffer), _row_id(i), _cols(cols) {}
		T& operator[](size_t j) { return _buffer[_row_id * _cols + j]; }
	private:
		std::vector<T>& _buffer;
		size_t _row_id;
		size_t _cols;
	};
	RowProxy operator[](size_t i) { return RowProxy(_buffer, i, _cols); }
private:
	std::vector<T>& _buffer;
	size_t _rows;
	size_t _cols;
};


class ApogeeMon : public omni_thread {
public:
	// Constructor
	ApogeeMon(ApogeeCamera *parent);

	// Destructor
	~ApogeeMon();

private:
	// Make object non-copyable
	ApogeeMon(const ApogeeMon&);
	ApogeeMon& operator=(const ApogeeMon&);

public:
	// Enable cooling
	bool isCoolingEnabled()const { return _cooling_enable; }
	void enableCooling(bool enable);
	// Cooling setpoint temperature
	void setCoolingSetpoint(double temperature);
	double getCoolingSetpoint()const { return _cooling_setpoint; }
	// Actual sensor temperature
	double getCoolingTemperature()const { return _cooling_temperature; }
	// Cooler status
	Apg::CoolerStatus getCoolingStatus()const { return _cooling_status; }
	// Cooler drive
	double getCoolingDrive()const { return _cooling_drive; }

	// Horizontal ROI commands
	uint16_t getRoiHBin()const { return _roi_h_bin; }
	void setRoiHBin(uint16_t bin);
	uint16_t getRoiHSize()const { return _roi_h_size / _roi_h_bin; }
	void setRoiHSize(uint16_t pixel);
	uint16_t getRoiHStart()const { return _roi_h_start / _roi_h_bin; }
	void setRoiHStart(uint16_t pixel);

	// Vertical ROI commands
	uint16_t getRoiVBin()const { return _roi_v_bin; }
	void setRoiVBin(uint16_t bin);
	uint16_t getRoiVSize()const { return _roi_v_size / _roi_v_bin; }
	void setRoiVSize(uint16_t pixel);
	uint16_t getRoiVStart()const { return _roi_v_start / _roi_v_bin; }
	void setRoiVStart(uint16_t pixel);

	// ADC gain
	uint16_t getADCgain()const { return _adc_gain; }
	void setADCgain(uint16_t gain);

	// ADC offset
	uint16_t getADCoffset()const { return _adc_offset; }
	void setADCoffset(uint16_t offset);

	// Integration time
	double getIntegrationTime()const { return _exposure; }
	void setIntegrationTime(double time);

	// Enable fast readout
	bool getFastReadoutState()const { return (_adc_speed != Apg::AdcSpeed_Normal); }
	void setFastReadoutState(bool state);

	// Read image
	void getImage(uint16_t* buffer, int& x, int& y);

	// Terminate acquisition loop
	void terminate() { _terminate = true; }

	// Millisecond sleep
	void msleep(uint32_t msec);

	// Start acquisition
	void StartAcquisition(int frames);

	// Stop acquisition
	void StopAcquisition();

	// Bin image
	size_t binImageInPlace(std::vector<uint16_t> &image, uint16_t x, uint16_t bin_x, uint16_t y, uint16_t bin_y);

protected:
	// Main acquisition loop
	void *run_undetached(void *arg);

	// Find camera
	DeviceInfo findCamera();

	// Camera initialization function
	void initialize();

	// Close camera
	void closeCamera();

	// Extract error type from message
	Apg::ErrorType getErrorCode(const std::string& msg);

private:
	// Camera device
	ApogeeCam* _cam;

	// Access lock
	omni_mutex _lock;

	// Parent device
	ApogeeCamera* _parent;

	// Camera information
	DeviceInfo _devinfo;

	// ADC readout speed
	Apg::AdcSpeed _adc_speed;

	// Cooling values
	bool _cooling_enable;
	double _cooling_setpoint;
	double _cooling_temperature;
	Apg::CoolerStatus _cooling_status;
	double _cooling_drive;

	// Minumum and maximum values
	double _min_exposure;
	double _max_exposure;

	// ROI values
	uint16_t _roi_v_bin;
	uint16_t _roi_v_size;
	uint16_t _roi_v_start;
	uint16_t _roi_h_bin;
	uint16_t _roi_h_size;
	uint16_t _roi_h_start;

	// Min and max ROI values
	uint16_t _max_pixel_h;
	uint16_t _max_pixel_v;
	uint16_t _max_bin_h;
	uint16_t _max_bin_v;

	// ADC parameters
	uint16_t _adc_gain;
	uint16_t _adc_offset;

	// Exposure time
	double _exposure;

	// Continuous acquisition flag
	bool _acq_continuous;

	// Flag to start a new acquisition
	bool _start_newacq;

	// Terminate flag
	bool _terminate;

	// Camera firmware
	uint16_t _firmware;

	// Last image
	std::vector<uint16_t> _image;

	// Buffer image lock
	omni_mutex _image_lock;

	// Operation queue
	std::queue<CameraOperation> _queue;
	omni_mutex _queue_lock;
};

/*----- PROTECTED REGION END -----*/	//	ApogeeCamera::Additional Classes Definitions

}	//	End of namespace

#endif   //	ApogeeCamera_H
