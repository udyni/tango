/*----- PROTECTED REGION ID(TPG256SrvClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        TPG256SrvClass.cpp
//
// description : C++ source for the TPG256SrvClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the TPG256Srv once per process.
//
// project :     Pfeiffer TPG256 Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TPG256SrvClass.h>

/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass.cpp

//-------------------------------------------------------------------
/**
 *	Create TPG256SrvClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_TPG256Srv_class(const char *name) {
		return TPG256Srv_ns::TPG256SrvClass::init(name);
	}
}

namespace TPG256Srv_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
TPG256SrvClass *TPG256SrvClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		TPG256SrvClass::TPG256SrvClass(string &s)
 * description : 	constructor for the TPG256SrvClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
TPG256SrvClass::TPG256SrvClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering TPG256SrvClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(TPG256SrvClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::constructor

	cout2 << "Leaving TPG256SrvClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		TPG256SrvClass::~TPG256SrvClass()
 * description : 	destructor for the TPG256SrvClass
 */
//--------------------------------------------------------
TPG256SrvClass::~TPG256SrvClass()
{
	/*----- PROTECTED REGION ID(TPG256SrvClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		TPG256SrvClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
TPG256SrvClass *TPG256SrvClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new TPG256SrvClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		TPG256SrvClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
TPG256SrvClass *TPG256SrvClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		TurnOnClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *TurnOnClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "TurnOnClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<TPG256Srv *>(device))->turn_on(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		TurnOffClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *TurnOffClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "TurnOffClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<TPG256Srv *>(device))->turn_off(argin));
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum TPG256SrvClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum TPG256SrvClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum TPG256SrvClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void TPG256SrvClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "Proxy";
	prop_desc = "Communication proxy";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PollingTime";
	prop_desc = "Polling time";
	prop_def  = "1000";
	vect_data.clear();
	vect_data.push_back("1000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void TPG256SrvClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Pfeiffer TPG256 Device Server");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Pfeiffer TPG256 vacuum gauge controller device server");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void TPG256SrvClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(TPG256SrvClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new TPG256Srv(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		TPG256Srv *dev = static_cast<TPG256Srv *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(TPG256SrvClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void TPG256SrvClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(TPG256SrvClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::attribute_factory_before
	//	Attribute : S1_name
	S1_nameAttrib	*s1_name = new S1_nameAttrib();
	Tango::UserDefaultAttrProp	s1_name_prop;
	s1_name_prop.set_description("Sensor 1 name");
	s1_name_prop.set_label("Sensor 1 name");
	//	unit	not set for S1_name
	//	standard_unit	not set for S1_name
	//	display_unit	not set for S1_name
	//	format	not set for S1_name
	//	max_value	not set for S1_name
	//	min_value	not set for S1_name
	//	max_alarm	not set for S1_name
	//	min_alarm	not set for S1_name
	//	max_warning	not set for S1_name
	//	min_warning	not set for S1_name
	//	delta_t	not set for S1_name
	//	delta_val	not set for S1_name
	
	s1_name->set_default_properties(s1_name_prop);
	//	Not Polled
	s1_name->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s1_name->set_change_event(true, false);
	att_list.push_back(s1_name);

	//	Attribute : S1_pressure
	S1_pressureAttrib	*s1_pressure = new S1_pressureAttrib();
	Tango::UserDefaultAttrProp	s1_pressure_prop;
	s1_pressure_prop.set_description("Pressure of sensor 1");
	s1_pressure_prop.set_label("Sensor 1 pressure");
	s1_pressure_prop.set_unit("mbar");
	s1_pressure_prop.set_standard_unit("mbar");
	s1_pressure_prop.set_display_unit("mbar");
	s1_pressure_prop.set_format("%3.2e");
	//	max_value	not set for S1_pressure
	//	min_value	not set for S1_pressure
	//	max_alarm	not set for S1_pressure
	//	min_alarm	not set for S1_pressure
	//	max_warning	not set for S1_pressure
	//	min_warning	not set for S1_pressure
	//	delta_t	not set for S1_pressure
	//	delta_val	not set for S1_pressure
	
	s1_pressure->set_default_properties(s1_pressure_prop);
	//	Not Polled
	s1_pressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s1_pressure->set_change_event(true, false);
	att_list.push_back(s1_pressure);

	//	Attribute : S1_status
	S1_statusAttrib	*s1_status = new S1_statusAttrib();
	Tango::UserDefaultAttrProp	s1_status_prop;
	s1_status_prop.set_description("Sensor 1 status");
	s1_status_prop.set_label("Sensor 1 status");
	//	unit	not set for S1_status
	//	standard_unit	not set for S1_status
	//	display_unit	not set for S1_status
	//	format	not set for S1_status
	//	max_value	not set for S1_status
	//	min_value	not set for S1_status
	//	max_alarm	not set for S1_status
	//	min_alarm	not set for S1_status
	//	max_warning	not set for S1_status
	//	min_warning	not set for S1_status
	//	delta_t	not set for S1_status
	//	delta_val	not set for S1_status
	
	{
		vector<string> labels;
		labels.push_back("Measurement data okay");
		labels.push_back("Underrange");
		labels.push_back("Overrange");
		labels.push_back("Sensor error");
		labels.push_back("Sensor off");
		labels.push_back("No sensor");
		labels.push_back("Identification error");
		s1_status_prop.set_enum_labels(labels);
	}
	s1_status->set_default_properties(s1_status_prop);
	//	Not Polled
	s1_status->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s1_status->set_change_event(true, false);
	att_list.push_back(s1_status);

	//	Attribute : S1_type
	S1_typeAttrib	*s1_type = new S1_typeAttrib();
	Tango::UserDefaultAttrProp	s1_type_prop;
	s1_type_prop.set_description("Sensor 1 type");
	s1_type_prop.set_label("Sensor 1 type");
	//	unit	not set for S1_type
	//	standard_unit	not set for S1_type
	//	display_unit	not set for S1_type
	//	format	not set for S1_type
	//	max_value	not set for S1_type
	//	min_value	not set for S1_type
	//	max_alarm	not set for S1_type
	//	min_alarm	not set for S1_type
	//	max_warning	not set for S1_type
	//	min_warning	not set for S1_type
	//	delta_t	not set for S1_type
	//	delta_val	not set for S1_type
	
	s1_type->set_default_properties(s1_type_prop);
	//	Not Polled
	s1_type->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s1_type->set_change_event(true, false);
	att_list.push_back(s1_type);

	//	Attribute : S2_name
	S2_nameAttrib	*s2_name = new S2_nameAttrib();
	Tango::UserDefaultAttrProp	s2_name_prop;
	s2_name_prop.set_description("Sensor 2 name");
	s2_name_prop.set_label("Sensor 2 name");
	//	unit	not set for S2_name
	//	standard_unit	not set for S2_name
	//	display_unit	not set for S2_name
	//	format	not set for S2_name
	//	max_value	not set for S2_name
	//	min_value	not set for S2_name
	//	max_alarm	not set for S2_name
	//	min_alarm	not set for S2_name
	//	max_warning	not set for S2_name
	//	min_warning	not set for S2_name
	//	delta_t	not set for S2_name
	//	delta_val	not set for S2_name
	
	s2_name->set_default_properties(s2_name_prop);
	//	Not Polled
	s2_name->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s2_name->set_change_event(true, false);
	att_list.push_back(s2_name);

	//	Attribute : S2_pressure
	S2_pressureAttrib	*s2_pressure = new S2_pressureAttrib();
	Tango::UserDefaultAttrProp	s2_pressure_prop;
	s2_pressure_prop.set_description("Pressure of sensor 2");
	s2_pressure_prop.set_label("Sensor 2 pressure");
	s2_pressure_prop.set_unit("mbar");
	s2_pressure_prop.set_standard_unit("mbar");
	s2_pressure_prop.set_display_unit("mbar");
	s2_pressure_prop.set_format("%3.2e");
	//	max_value	not set for S2_pressure
	//	min_value	not set for S2_pressure
	//	max_alarm	not set for S2_pressure
	//	min_alarm	not set for S2_pressure
	//	max_warning	not set for S2_pressure
	//	min_warning	not set for S2_pressure
	//	delta_t	not set for S2_pressure
	//	delta_val	not set for S2_pressure
	
	s2_pressure->set_default_properties(s2_pressure_prop);
	//	Not Polled
	s2_pressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s2_pressure->set_change_event(true, false);
	att_list.push_back(s2_pressure);

	//	Attribute : S2_status
	S2_statusAttrib	*s2_status = new S2_statusAttrib();
	Tango::UserDefaultAttrProp	s2_status_prop;
	s2_status_prop.set_description("Sensor 2 status");
	s2_status_prop.set_label("Sensor 2 status");
	//	unit	not set for S2_status
	//	standard_unit	not set for S2_status
	//	display_unit	not set for S2_status
	//	format	not set for S2_status
	//	max_value	not set for S2_status
	//	min_value	not set for S2_status
	//	max_alarm	not set for S2_status
	//	min_alarm	not set for S2_status
	//	max_warning	not set for S2_status
	//	min_warning	not set for S2_status
	//	delta_t	not set for S2_status
	//	delta_val	not set for S2_status
	
	{
		vector<string> labels;
		labels.push_back("Measurement data okay");
		labels.push_back("Underrange");
		labels.push_back("Overrange");
		labels.push_back("Sensor error");
		labels.push_back("Sensor off");
		labels.push_back("No sensor");
		labels.push_back("Identification error");
		s2_status_prop.set_enum_labels(labels);
	}
	s2_status->set_default_properties(s2_status_prop);
	//	Not Polled
	s2_status->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s2_status->set_change_event(true, false);
	att_list.push_back(s2_status);

	//	Attribute : S2_type
	S2_typeAttrib	*s2_type = new S2_typeAttrib();
	Tango::UserDefaultAttrProp	s2_type_prop;
	s2_type_prop.set_description("Sensor 2 type");
	s2_type_prop.set_label("Sensor 2 type");
	//	unit	not set for S2_type
	//	standard_unit	not set for S2_type
	//	display_unit	not set for S2_type
	//	format	not set for S2_type
	//	max_value	not set for S2_type
	//	min_value	not set for S2_type
	//	max_alarm	not set for S2_type
	//	min_alarm	not set for S2_type
	//	max_warning	not set for S2_type
	//	min_warning	not set for S2_type
	//	delta_t	not set for S2_type
	//	delta_val	not set for S2_type
	
	s2_type->set_default_properties(s2_type_prop);
	//	Not Polled
	s2_type->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s2_type->set_change_event(true, false);
	att_list.push_back(s2_type);

	//	Attribute : S3_name
	S3_nameAttrib	*s3_name = new S3_nameAttrib();
	Tango::UserDefaultAttrProp	s3_name_prop;
	s3_name_prop.set_description("Sensor 3 name");
	s3_name_prop.set_label("Sensor 3 name");
	//	unit	not set for S3_name
	//	standard_unit	not set for S3_name
	//	display_unit	not set for S3_name
	//	format	not set for S3_name
	//	max_value	not set for S3_name
	//	min_value	not set for S3_name
	//	max_alarm	not set for S3_name
	//	min_alarm	not set for S3_name
	//	max_warning	not set for S3_name
	//	min_warning	not set for S3_name
	//	delta_t	not set for S3_name
	//	delta_val	not set for S3_name
	
	s3_name->set_default_properties(s3_name_prop);
	//	Not Polled
	s3_name->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s3_name->set_change_event(true, false);
	att_list.push_back(s3_name);

	//	Attribute : S3_pressure
	S3_pressureAttrib	*s3_pressure = new S3_pressureAttrib();
	Tango::UserDefaultAttrProp	s3_pressure_prop;
	s3_pressure_prop.set_description("Pressure of sensor 3");
	s3_pressure_prop.set_label("Sensor 3 pressure");
	s3_pressure_prop.set_unit("mbar");
	s3_pressure_prop.set_standard_unit("mbar");
	s3_pressure_prop.set_display_unit("mbar");
	s3_pressure_prop.set_format("%3.2e");
	//	max_value	not set for S3_pressure
	//	min_value	not set for S3_pressure
	//	max_alarm	not set for S3_pressure
	//	min_alarm	not set for S3_pressure
	//	max_warning	not set for S3_pressure
	//	min_warning	not set for S3_pressure
	//	delta_t	not set for S3_pressure
	//	delta_val	not set for S3_pressure
	s3_pressure_prop.set_event_rel_change("1");
	
	s3_pressure->set_default_properties(s3_pressure_prop);
	//	Not Polled
	s3_pressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s3_pressure->set_change_event(true, false);
	att_list.push_back(s3_pressure);

	//	Attribute : S3_status
	S3_statusAttrib	*s3_status = new S3_statusAttrib();
	Tango::UserDefaultAttrProp	s3_status_prop;
	s3_status_prop.set_description("Sensor 3 status");
	s3_status_prop.set_label("Sensor 3 status");
	//	unit	not set for S3_status
	//	standard_unit	not set for S3_status
	//	display_unit	not set for S3_status
	//	format	not set for S3_status
	//	max_value	not set for S3_status
	//	min_value	not set for S3_status
	//	max_alarm	not set for S3_status
	//	min_alarm	not set for S3_status
	//	max_warning	not set for S3_status
	//	min_warning	not set for S3_status
	//	delta_t	not set for S3_status
	//	delta_val	not set for S3_status
	
	{
		vector<string> labels;
		labels.push_back("Measurement data okay");
		labels.push_back("Underrange");
		labels.push_back("Overrange");
		labels.push_back("Sensor error");
		labels.push_back("Sensor off");
		labels.push_back("No sensor");
		labels.push_back("Identification error");
		s3_status_prop.set_enum_labels(labels);
	}
	s3_status->set_default_properties(s3_status_prop);
	//	Not Polled
	s3_status->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s3_status->set_change_event(true, false);
	att_list.push_back(s3_status);

	//	Attribute : S3_type
	S3_typeAttrib	*s3_type = new S3_typeAttrib();
	Tango::UserDefaultAttrProp	s3_type_prop;
	s3_type_prop.set_description("Sensor 3 type");
	s3_type_prop.set_label("Sensor 3 type");
	//	unit	not set for S3_type
	//	standard_unit	not set for S3_type
	//	display_unit	not set for S3_type
	//	format	not set for S3_type
	//	max_value	not set for S3_type
	//	min_value	not set for S3_type
	//	max_alarm	not set for S3_type
	//	min_alarm	not set for S3_type
	//	max_warning	not set for S3_type
	//	min_warning	not set for S3_type
	//	delta_t	not set for S3_type
	//	delta_val	not set for S3_type
	
	s3_type->set_default_properties(s3_type_prop);
	//	Not Polled
	s3_type->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s3_type->set_change_event(true, false);
	att_list.push_back(s3_type);

	//	Attribute : S4_name
	S4_nameAttrib	*s4_name = new S4_nameAttrib();
	Tango::UserDefaultAttrProp	s4_name_prop;
	s4_name_prop.set_description("Sensor 4 name");
	s4_name_prop.set_label("Sensor 4 name");
	//	unit	not set for S4_name
	//	standard_unit	not set for S4_name
	//	display_unit	not set for S4_name
	//	format	not set for S4_name
	//	max_value	not set for S4_name
	//	min_value	not set for S4_name
	//	max_alarm	not set for S4_name
	//	min_alarm	not set for S4_name
	//	max_warning	not set for S4_name
	//	min_warning	not set for S4_name
	//	delta_t	not set for S4_name
	//	delta_val	not set for S4_name
	
	s4_name->set_default_properties(s4_name_prop);
	//	Not Polled
	s4_name->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s4_name->set_change_event(true, false);
	att_list.push_back(s4_name);

	//	Attribute : S4_pressure
	S4_pressureAttrib	*s4_pressure = new S4_pressureAttrib();
	Tango::UserDefaultAttrProp	s4_pressure_prop;
	s4_pressure_prop.set_description("Pressure of sensor 4");
	s4_pressure_prop.set_label("Sensor 4 pressure");
	s4_pressure_prop.set_unit("mbar");
	s4_pressure_prop.set_standard_unit("mbar");
	s4_pressure_prop.set_display_unit("mbar");
	s4_pressure_prop.set_format("%3.2e");
	//	max_value	not set for S4_pressure
	//	min_value	not set for S4_pressure
	//	max_alarm	not set for S4_pressure
	//	min_alarm	not set for S4_pressure
	//	max_warning	not set for S4_pressure
	//	min_warning	not set for S4_pressure
	//	delta_t	not set for S4_pressure
	//	delta_val	not set for S4_pressure
	s4_pressure_prop.set_event_rel_change("1");
	
	s4_pressure->set_default_properties(s4_pressure_prop);
	//	Not Polled
	s4_pressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s4_pressure->set_change_event(true, false);
	att_list.push_back(s4_pressure);

	//	Attribute : S4_status
	S4_statusAttrib	*s4_status = new S4_statusAttrib();
	Tango::UserDefaultAttrProp	s4_status_prop;
	s4_status_prop.set_description("Sensor 4 status");
	s4_status_prop.set_label("Sensor 4 status");
	//	unit	not set for S4_status
	//	standard_unit	not set for S4_status
	//	display_unit	not set for S4_status
	//	format	not set for S4_status
	//	max_value	not set for S4_status
	//	min_value	not set for S4_status
	//	max_alarm	not set for S4_status
	//	min_alarm	not set for S4_status
	//	max_warning	not set for S4_status
	//	min_warning	not set for S4_status
	//	delta_t	not set for S4_status
	//	delta_val	not set for S4_status
	
	{
		vector<string> labels;
		labels.push_back("Measurement data okay");
		labels.push_back("Underrange");
		labels.push_back("Overrange");
		labels.push_back("Sensor error");
		labels.push_back("Sensor off");
		labels.push_back("No sensor");
		labels.push_back("Identification error");
		s4_status_prop.set_enum_labels(labels);
	}
	s4_status->set_default_properties(s4_status_prop);
	//	Not Polled
	s4_status->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s4_status->set_change_event(true, false);
	att_list.push_back(s4_status);

	//	Attribute : S4_type
	S4_typeAttrib	*s4_type = new S4_typeAttrib();
	Tango::UserDefaultAttrProp	s4_type_prop;
	s4_type_prop.set_description("Sensor 4 type");
	s4_type_prop.set_label("Sensor 4 type");
	//	unit	not set for S4_type
	//	standard_unit	not set for S4_type
	//	display_unit	not set for S4_type
	//	format	not set for S4_type
	//	max_value	not set for S4_type
	//	min_value	not set for S4_type
	//	max_alarm	not set for S4_type
	//	min_alarm	not set for S4_type
	//	max_warning	not set for S4_type
	//	min_warning	not set for S4_type
	//	delta_t	not set for S4_type
	//	delta_val	not set for S4_type
	
	s4_type->set_default_properties(s4_type_prop);
	//	Not Polled
	s4_type->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s4_type->set_change_event(true, false);
	att_list.push_back(s4_type);

	//	Attribute : S5_name
	S5_nameAttrib	*s5_name = new S5_nameAttrib();
	Tango::UserDefaultAttrProp	s5_name_prop;
	s5_name_prop.set_description("Sensor 5 name");
	s5_name_prop.set_label("Sensor 5 name");
	//	unit	not set for S5_name
	//	standard_unit	not set for S5_name
	//	display_unit	not set for S5_name
	//	format	not set for S5_name
	//	max_value	not set for S5_name
	//	min_value	not set for S5_name
	//	max_alarm	not set for S5_name
	//	min_alarm	not set for S5_name
	//	max_warning	not set for S5_name
	//	min_warning	not set for S5_name
	//	delta_t	not set for S5_name
	//	delta_val	not set for S5_name
	
	s5_name->set_default_properties(s5_name_prop);
	//	Not Polled
	s5_name->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s5_name->set_change_event(true, false);
	att_list.push_back(s5_name);

	//	Attribute : S5_pressure
	S5_pressureAttrib	*s5_pressure = new S5_pressureAttrib();
	Tango::UserDefaultAttrProp	s5_pressure_prop;
	s5_pressure_prop.set_description("Pressure of sensor 5");
	s5_pressure_prop.set_label("Sensor 5 pressure");
	s5_pressure_prop.set_unit("mbar");
	s5_pressure_prop.set_standard_unit("mbar");
	s5_pressure_prop.set_display_unit("mbar");
	s5_pressure_prop.set_format("%3.2e");
	//	max_value	not set for S5_pressure
	//	min_value	not set for S5_pressure
	//	max_alarm	not set for S5_pressure
	//	min_alarm	not set for S5_pressure
	//	max_warning	not set for S5_pressure
	//	min_warning	not set for S5_pressure
	//	delta_t	not set for S5_pressure
	//	delta_val	not set for S5_pressure
	s5_pressure_prop.set_event_rel_change("1");
	
	s5_pressure->set_default_properties(s5_pressure_prop);
	//	Not Polled
	s5_pressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s5_pressure->set_change_event(true, false);
	att_list.push_back(s5_pressure);

	//	Attribute : S5_status
	S5_statusAttrib	*s5_status = new S5_statusAttrib();
	Tango::UserDefaultAttrProp	s5_status_prop;
	s5_status_prop.set_description("Sensor 5 status");
	s5_status_prop.set_label("Sensor 5 status");
	//	unit	not set for S5_status
	//	standard_unit	not set for S5_status
	//	display_unit	not set for S5_status
	//	format	not set for S5_status
	//	max_value	not set for S5_status
	//	min_value	not set for S5_status
	//	max_alarm	not set for S5_status
	//	min_alarm	not set for S5_status
	//	max_warning	not set for S5_status
	//	min_warning	not set for S5_status
	//	delta_t	not set for S5_status
	//	delta_val	not set for S5_status
	
	{
		vector<string> labels;
		labels.push_back("Measurement data okay");
		labels.push_back("Underrange");
		labels.push_back("Overrange");
		labels.push_back("Sensor error");
		labels.push_back("Sensor off");
		labels.push_back("No sensor");
		labels.push_back("Identification error");
		s5_status_prop.set_enum_labels(labels);
	}
	s5_status->set_default_properties(s5_status_prop);
	//	Not Polled
	s5_status->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s5_status->set_change_event(true, false);
	att_list.push_back(s5_status);

	//	Attribute : S5_type
	S5_typeAttrib	*s5_type = new S5_typeAttrib();
	Tango::UserDefaultAttrProp	s5_type_prop;
	s5_type_prop.set_description("Sensor 5 type");
	s5_type_prop.set_label("Sensor 5 type");
	//	unit	not set for S5_type
	//	standard_unit	not set for S5_type
	//	display_unit	not set for S5_type
	//	format	not set for S5_type
	//	max_value	not set for S5_type
	//	min_value	not set for S5_type
	//	max_alarm	not set for S5_type
	//	min_alarm	not set for S5_type
	//	max_warning	not set for S5_type
	//	min_warning	not set for S5_type
	//	delta_t	not set for S5_type
	//	delta_val	not set for S5_type
	
	s5_type->set_default_properties(s5_type_prop);
	//	Not Polled
	s5_type->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s5_type->set_change_event(true, false);
	att_list.push_back(s5_type);

	//	Attribute : S6_name
	S6_nameAttrib	*s6_name = new S6_nameAttrib();
	Tango::UserDefaultAttrProp	s6_name_prop;
	s6_name_prop.set_description("Sensor 6 name");
	s6_name_prop.set_label("Sensor 6 name");
	//	unit	not set for S6_name
	//	standard_unit	not set for S6_name
	//	display_unit	not set for S6_name
	//	format	not set for S6_name
	//	max_value	not set for S6_name
	//	min_value	not set for S6_name
	//	max_alarm	not set for S6_name
	//	min_alarm	not set for S6_name
	//	max_warning	not set for S6_name
	//	min_warning	not set for S6_name
	//	delta_t	not set for S6_name
	//	delta_val	not set for S6_name
	
	s6_name->set_default_properties(s6_name_prop);
	//	Not Polled
	s6_name->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s6_name->set_change_event(true, false);
	att_list.push_back(s6_name);

	//	Attribute : S6_pressure
	S6_pressureAttrib	*s6_pressure = new S6_pressureAttrib();
	Tango::UserDefaultAttrProp	s6_pressure_prop;
	s6_pressure_prop.set_description("Pressure of sensor 6");
	s6_pressure_prop.set_label("Sensor 6 pressure");
	s6_pressure_prop.set_unit("mbar");
	s6_pressure_prop.set_standard_unit("mbar");
	s6_pressure_prop.set_display_unit("mbar");
	s6_pressure_prop.set_format("%3.2e");
	//	max_value	not set for S6_pressure
	//	min_value	not set for S6_pressure
	//	max_alarm	not set for S6_pressure
	//	min_alarm	not set for S6_pressure
	//	max_warning	not set for S6_pressure
	//	min_warning	not set for S6_pressure
	//	delta_t	not set for S6_pressure
	//	delta_val	not set for S6_pressure
	s6_pressure_prop.set_event_rel_change("1");
	
	s6_pressure->set_default_properties(s6_pressure_prop);
	//	Not Polled
	s6_pressure->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s6_pressure->set_change_event(true, false);
	att_list.push_back(s6_pressure);

	//	Attribute : S6_status
	S6_statusAttrib	*s6_status = new S6_statusAttrib();
	Tango::UserDefaultAttrProp	s6_status_prop;
	s6_status_prop.set_description("Sensor 6 status");
	s6_status_prop.set_label("Sensor 6 status");
	//	unit	not set for S6_status
	//	standard_unit	not set for S6_status
	//	display_unit	not set for S6_status
	//	format	not set for S6_status
	//	max_value	not set for S6_status
	//	min_value	not set for S6_status
	//	max_alarm	not set for S6_status
	//	min_alarm	not set for S6_status
	//	max_warning	not set for S6_status
	//	min_warning	not set for S6_status
	//	delta_t	not set for S6_status
	//	delta_val	not set for S6_status
	
	{
		vector<string> labels;
		labels.push_back("Measurement data okay");
		labels.push_back("Underrange");
		labels.push_back("Overrange");
		labels.push_back("Sensor error");
		labels.push_back("Sensor off");
		labels.push_back("No sensor");
		labels.push_back("Identification error");
		s6_status_prop.set_enum_labels(labels);
	}
	s6_status->set_default_properties(s6_status_prop);
	//	Not Polled
	s6_status->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s6_status->set_change_event(true, false);
	att_list.push_back(s6_status);

	//	Attribute : S6_type
	S6_typeAttrib	*s6_type = new S6_typeAttrib();
	Tango::UserDefaultAttrProp	s6_type_prop;
	s6_type_prop.set_description("Sensor 6 type");
	s6_type_prop.set_label("Sensor 6 type");
	//	unit	not set for S6_type
	//	standard_unit	not set for S6_type
	//	display_unit	not set for S6_type
	//	format	not set for S6_type
	//	max_value	not set for S6_type
	//	min_value	not set for S6_type
	//	max_alarm	not set for S6_type
	//	min_alarm	not set for S6_type
	//	max_warning	not set for S6_type
	//	min_warning	not set for S6_type
	//	delta_t	not set for S6_type
	//	delta_val	not set for S6_type
	
	s6_type->set_default_properties(s6_type_prop);
	//	Not Polled
	s6_type->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	s6_type->set_change_event(true, false);
	att_list.push_back(s6_type);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(TPG256SrvClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void TPG256SrvClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(TPG256SrvClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::pipe_factory_before
	/*----- PROTECTED REGION ID(TPG256SrvClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void TPG256SrvClass::command_factory()
{
	/*----- PROTECTED REGION ID(TPG256SrvClass::command_factory_before) ENABLED START -----*/

	// Set 500 ms polling perod for command State
	Tango::Command &stateCmd = get_cmd_by_name("State");
	stateCmd.set_polling_period(500);

	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::command_factory_before


	//	Command TurnOn
	TurnOnClass	*pTurnOnCmd =
		new TurnOnClass("TurnOn",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Gauge number (1-6)",
			"",
			Tango::OPERATOR);
	command_list.push_back(pTurnOnCmd);

	//	Command TurnOff
	TurnOffClass	*pTurnOffCmd =
		new TurnOffClass("TurnOff",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Gauge number (1-6)",
			"",
			Tango::OPERATOR);
	command_list.push_back(pTurnOffCmd);

	/*----- PROTECTED REGION ID(TPG256SrvClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		TPG256SrvClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void TPG256SrvClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(TPG256SrvClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		TPG256SrvClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void TPG256SrvClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		TPG256Srv *dev = static_cast<TPG256Srv *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(TPG256SrvClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : TPG256SrvClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *TPG256SrvClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(TPG256SrvClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::Additional Methods
} //	namespace
