/*----- PROTECTED REGION ID(TPG256Srv.h) ENABLED START -----*/
//=============================================================================
//
// file :        TPG256Srv.h
//
// description : Include file for the TPG256Srv class
//
// project :     Pfeiffer TPG256 Device Server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TPG256Srv_H
#define TPG256Srv_H

#include <tango.h>

#define TPG256_STATUS_STRLEN  32     // Length of status and type string

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif

namespace TPG256Srv_ns
{
enum _statusEnum {
	_MEASUREMENT_DATA_OKAY,
	_UNDERRANGE,
	_OVERRANGE,
	_SENSOR_ERROR,
	_SENSOR_OFF,
	_NO_SENSOR,
	_IDENTIFICATION_ERROR,
};
typedef _statusEnum S1_statusEnum;
typedef _statusEnum S2_statusEnum;
typedef _statusEnum S3_statusEnum;
typedef _statusEnum S4_statusEnum;
typedef _statusEnum S5_statusEnum;
typedef _statusEnum S6_statusEnum;
}



/*----- PROTECTED REGION END -----*/	//	TPG256Srv.h

/**
 *  TPG256Srv class description:
 *    Pfeiffer TPG256 vacuum gauge controller device server
 */

namespace TPG256Srv_ns
{
// enum _S1_statusEnum {
// 	_MEASUREMENT_DATA_OKAY,
// 	_UNDERRANGE,
// 	_OVERRANGE,
// 	_SENSOR_ERROR,
// 	_SENSOR_OFF,
// 	_NO_SENSOR,
// 	_IDENTIFICATION_ERROR,
// } ;
// typedef _S1_statusEnum S1_statusEnum;
// 
// enum _S2_statusEnum {
// 	_MEASUREMENT_DATA_OKAY,
// 	_UNDERRANGE,
// 	_OVERRANGE,
// 	_SENSOR_ERROR,
// 	_SENSOR_OFF,
// 	_NO_SENSOR,
// 	_IDENTIFICATION_ERROR,
// } ;
// typedef _S2_statusEnum S2_statusEnum;
// 
// enum _S3_statusEnum {
// 	_MEASUREMENT_DATA_OKAY,
// 	_UNDERRANGE,
// 	_OVERRANGE,
// 	_SENSOR_ERROR,
// 	_SENSOR_OFF,
// 	_NO_SENSOR,
// 	_IDENTIFICATION_ERROR,
// } ;
// typedef _S3_statusEnum S3_statusEnum;
// 
// enum _S4_statusEnum {
// 	_MEASUREMENT_DATA_OKAY,
// 	_UNDERRANGE,
// 	_OVERRANGE,
// 	_SENSOR_ERROR,
// 	_SENSOR_OFF,
// 	_NO_SENSOR,
// 	_IDENTIFICATION_ERROR,
// } ;
// typedef _S4_statusEnum S4_statusEnum;
// 
// enum _S5_statusEnum {
// 	_MEASUREMENT_DATA_OKAY,
// 	_UNDERRANGE,
// 	_OVERRANGE,
// 	_SENSOR_ERROR,
// 	_SENSOR_OFF,
// 	_NO_SENSOR,
// 	_IDENTIFICATION_ERROR,
// } ;
// typedef _S5_statusEnum S5_statusEnum;
// 
// enum _S6_statusEnum {
// 	_MEASUREMENT_DATA_OKAY,
// 	_UNDERRANGE,
// 	_OVERRANGE,
// 	_SENSOR_ERROR,
// 	_SENSOR_OFF,
// 	_NO_SENSOR,
// 	_IDENTIFICATION_ERROR,
// } ;
// typedef _S6_statusEnum S6_statusEnum;

/*----- PROTECTED REGION ID(TPG256Srv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class TPGComm;

/*----- PROTECTED REGION END -----*/	//	TPG256Srv::Additional Class Declarations

class TPG256Srv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(TPG256Srv::Data Members) ENABLED START -----*/

//	Add your own data members
	TPGComm *dev;

/*----- PROTECTED REGION END -----*/	//	TPG256Srv::Data Members

//	Device property data members
public:
	//	Proxy:	Communication proxy
	string	proxy;
	//	PollingTime:	Polling time
	Tango::DevLong	pollingTime;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevString	*attr_S1_name_read;
	Tango::DevDouble	*attr_S1_pressure_read;
	S1_statusEnum	*attr_S1_status_read;
	Tango::DevString	*attr_S1_type_read;
	Tango::DevString	*attr_S2_name_read;
	Tango::DevDouble	*attr_S2_pressure_read;
	S2_statusEnum	*attr_S2_status_read;
	Tango::DevString	*attr_S2_type_read;
	Tango::DevString	*attr_S3_name_read;
	Tango::DevDouble	*attr_S3_pressure_read;
	S3_statusEnum	*attr_S3_status_read;
	Tango::DevString	*attr_S3_type_read;
	Tango::DevString	*attr_S4_name_read;
	Tango::DevDouble	*attr_S4_pressure_read;
	S4_statusEnum	*attr_S4_status_read;
	Tango::DevString	*attr_S4_type_read;
	Tango::DevString	*attr_S5_name_read;
	Tango::DevDouble	*attr_S5_pressure_read;
	S5_statusEnum	*attr_S5_status_read;
	Tango::DevString	*attr_S5_type_read;
	Tango::DevString	*attr_S6_name_read;
	Tango::DevDouble	*attr_S6_pressure_read;
	S6_statusEnum	*attr_S6_status_read;
	Tango::DevString	*attr_S6_type_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TPG256Srv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TPG256Srv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	TPG256Srv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~TPG256Srv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : TPG256Srv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute S1_name related methods
 *	Description: Sensor 1 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S1_name(Tango::Attribute &attr);
	virtual bool is_S1_name_allowed(Tango::AttReqType type);
/**
 *	Attribute S1_pressure related methods
 *	Description: Pressure of sensor 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_S1_pressure(Tango::Attribute &attr);
	virtual bool is_S1_pressure_allowed(Tango::AttReqType type);
/**
 *	Attribute S1_status related methods
 *	Description: Sensor 1 status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_S1_status(Tango::Attribute &attr);
	virtual bool is_S1_status_allowed(Tango::AttReqType type);
/**
 *	Attribute S1_type related methods
 *	Description: Sensor 1 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S1_type(Tango::Attribute &attr);
	virtual bool is_S1_type_allowed(Tango::AttReqType type);
/**
 *	Attribute S2_name related methods
 *	Description: Sensor 2 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S2_name(Tango::Attribute &attr);
	virtual bool is_S2_name_allowed(Tango::AttReqType type);
/**
 *	Attribute S2_pressure related methods
 *	Description: Pressure of sensor 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_S2_pressure(Tango::Attribute &attr);
	virtual bool is_S2_pressure_allowed(Tango::AttReqType type);
/**
 *	Attribute S2_status related methods
 *	Description: Sensor 2 status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_S2_status(Tango::Attribute &attr);
	virtual bool is_S2_status_allowed(Tango::AttReqType type);
/**
 *	Attribute S2_type related methods
 *	Description: Sensor 2 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S2_type(Tango::Attribute &attr);
	virtual bool is_S2_type_allowed(Tango::AttReqType type);
/**
 *	Attribute S3_name related methods
 *	Description: Sensor 3 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S3_name(Tango::Attribute &attr);
	virtual bool is_S3_name_allowed(Tango::AttReqType type);
/**
 *	Attribute S3_pressure related methods
 *	Description: Pressure of sensor 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_S3_pressure(Tango::Attribute &attr);
	virtual bool is_S3_pressure_allowed(Tango::AttReqType type);
/**
 *	Attribute S3_status related methods
 *	Description: Sensor 3 status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_S3_status(Tango::Attribute &attr);
	virtual bool is_S3_status_allowed(Tango::AttReqType type);
/**
 *	Attribute S3_type related methods
 *	Description: Sensor 3 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S3_type(Tango::Attribute &attr);
	virtual bool is_S3_type_allowed(Tango::AttReqType type);
/**
 *	Attribute S4_name related methods
 *	Description: Sensor 4 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S4_name(Tango::Attribute &attr);
	virtual bool is_S4_name_allowed(Tango::AttReqType type);
/**
 *	Attribute S4_pressure related methods
 *	Description: Pressure of sensor 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_S4_pressure(Tango::Attribute &attr);
	virtual bool is_S4_pressure_allowed(Tango::AttReqType type);
/**
 *	Attribute S4_status related methods
 *	Description: Sensor 4 status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_S4_status(Tango::Attribute &attr);
	virtual bool is_S4_status_allowed(Tango::AttReqType type);
/**
 *	Attribute S4_type related methods
 *	Description: Sensor 4 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S4_type(Tango::Attribute &attr);
	virtual bool is_S4_type_allowed(Tango::AttReqType type);
/**
 *	Attribute S5_name related methods
 *	Description: Sensor 5 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S5_name(Tango::Attribute &attr);
	virtual bool is_S5_name_allowed(Tango::AttReqType type);
/**
 *	Attribute S5_pressure related methods
 *	Description: Pressure of sensor 5
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_S5_pressure(Tango::Attribute &attr);
	virtual bool is_S5_pressure_allowed(Tango::AttReqType type);
/**
 *	Attribute S5_status related methods
 *	Description: Sensor 5 status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_S5_status(Tango::Attribute &attr);
	virtual bool is_S5_status_allowed(Tango::AttReqType type);
/**
 *	Attribute S5_type related methods
 *	Description: Sensor 5 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S5_type(Tango::Attribute &attr);
	virtual bool is_S5_type_allowed(Tango::AttReqType type);
/**
 *	Attribute S6_name related methods
 *	Description: Sensor 6 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S6_name(Tango::Attribute &attr);
	virtual bool is_S6_name_allowed(Tango::AttReqType type);
/**
 *	Attribute S6_pressure related methods
 *	Description: Pressure of sensor 6
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_S6_pressure(Tango::Attribute &attr);
	virtual bool is_S6_pressure_allowed(Tango::AttReqType type);
/**
 *	Attribute S6_status related methods
 *	Description: Sensor 6 status
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_S6_status(Tango::Attribute &attr);
	virtual bool is_S6_status_allowed(Tango::AttReqType type);
/**
 *	Attribute S6_type related methods
 *	Description: Sensor 6 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_S6_type(Tango::Attribute &attr);
	virtual bool is_S6_type_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : TPG256Srv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command TurnOn related method
	 *	Description: Turn on a gauge
	 *
	 *	@param argin Gauge number (1-6)
	 */
	virtual void turn_on(Tango::DevShort argin);
	virtual bool is_TurnOn_allowed(const CORBA::Any &any);
	/**
	 *	Command TurnOff related method
	 *	Description: Turn off a gauge
	 *
	 *	@param argin Gauge number (1-6)
	 */
	virtual void turn_off(Tango::DevShort argin);
	virtual bool is_TurnOff_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : TPG256Srv::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(TPG256Srv::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	TPG256Srv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(TPG256Srv::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class TPGComm : public omni_thread {

public:
	// Contructor
	TPGComm(std::string device, Tango::DevLong polling, TPG256Srv* parent) :
		_terminate(false),
		_device(device),
		_parent(parent),
		_polling(polling)
	{
		// Start monitor thread
		this->start_undetached();
	}

	// Destructor
	~TPGComm() {}

public:
	// Terminate thread loop
	void terminate() { _terminate = true; }

	// Send a command to the TPG an return the response
	std::string sendCommand(const char* cmd);

	// Read pressure and sensor status
	void readPressure(uint8_t n, double* pressure, uint16_t* status);

	// Convert status code to string
	enum _statusEnum convertStatus(uint16_t code);
	
	// Millisecond sleep
	static void msleep(uint32_t msec);

protected:
	// Main thread
	void *run_undetached(void* ptr);

private:
	// Proxy device name
	std::string _device;

	// Communication device
	Tango::DeviceProxy* dev;

	// Mutex
	omni_mutex _lock;

	// Polling period
	Tango::DevLong _polling;

	// Parent device
	TPG256Srv* _parent;

	// Termination flag
	bool _terminate;
	
	// Pressure reading timestamps
	struct timeval _p_timestamp[6];
	
	// DevEnum service variables
	Tango::DevEnum _S1_status_value;
	Tango::DevEnum _S2_status_value;
	Tango::DevEnum _S3_status_value;
	Tango::DevEnum _S4_status_value;
	Tango::DevEnum _S5_status_value;
	Tango::DevEnum _S6_status_value;
};

/*----- PROTECTED REGION END -----*/	//	TPG256Srv::Additional Classes Definitions

}	//	End of namespace

#endif   //	TPG256Srv_H
