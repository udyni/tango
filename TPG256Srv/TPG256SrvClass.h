/*----- PROTECTED REGION ID(TPG256SrvClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        TPG256SrvClass.h
//
// description : Include for the TPG256Srv root class.
//               This class is the singleton class for
//                the TPG256Srv device class.
//               It contains all properties and methods which the 
//               TPG256Srv requires only once e.g. the commands.
//
// project :     Pfeiffer TPG256 Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TPG256SrvClass_H
#define TPG256SrvClass_H

#include <tango.h>
#include <TPG256Srv.h>


/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass.h


namespace TPG256Srv_ns
{
/*----- PROTECTED REGION ID(TPG256SrvClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute S1_name class definition
class S1_nameAttrib: public Tango::Attr
{
public:
	S1_nameAttrib():Attr("S1_name",
			Tango::DEV_STRING, Tango::READ) {};
	~S1_nameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S1_name(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S1_name_allowed(ty);}
};

//	Attribute S1_pressure class definition
class S1_pressureAttrib: public Tango::Attr
{
public:
	S1_pressureAttrib():Attr("S1_pressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~S1_pressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S1_pressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S1_pressure_allowed(ty);}
};

//	Attribute S1_status class definition
class S1_statusAttrib: public Tango::Attr
{
public:
	S1_statusAttrib():Attr("S1_status",
			Tango::DEV_ENUM, Tango::READ) {};
	~S1_statusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S1_status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S1_status_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(S1_statusEnum) == in_type;}
	virtual string get_enum_type() {return string("S1_statusEnum");}
};

//	Attribute S1_type class definition
class S1_typeAttrib: public Tango::Attr
{
public:
	S1_typeAttrib():Attr("S1_type",
			Tango::DEV_STRING, Tango::READ) {};
	~S1_typeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S1_type(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S1_type_allowed(ty);}
};

//	Attribute S2_name class definition
class S2_nameAttrib: public Tango::Attr
{
public:
	S2_nameAttrib():Attr("S2_name",
			Tango::DEV_STRING, Tango::READ) {};
	~S2_nameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S2_name(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S2_name_allowed(ty);}
};

//	Attribute S2_pressure class definition
class S2_pressureAttrib: public Tango::Attr
{
public:
	S2_pressureAttrib():Attr("S2_pressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~S2_pressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S2_pressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S2_pressure_allowed(ty);}
};

//	Attribute S2_status class definition
class S2_statusAttrib: public Tango::Attr
{
public:
	S2_statusAttrib():Attr("S2_status",
			Tango::DEV_ENUM, Tango::READ) {};
	~S2_statusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S2_status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S2_status_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(S2_statusEnum) == in_type;}
	virtual string get_enum_type() {return string("S2_statusEnum");}
};

//	Attribute S2_type class definition
class S2_typeAttrib: public Tango::Attr
{
public:
	S2_typeAttrib():Attr("S2_type",
			Tango::DEV_STRING, Tango::READ) {};
	~S2_typeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S2_type(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S2_type_allowed(ty);}
};

//	Attribute S3_name class definition
class S3_nameAttrib: public Tango::Attr
{
public:
	S3_nameAttrib():Attr("S3_name",
			Tango::DEV_STRING, Tango::READ) {};
	~S3_nameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S3_name(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S3_name_allowed(ty);}
};

//	Attribute S3_pressure class definition
class S3_pressureAttrib: public Tango::Attr
{
public:
	S3_pressureAttrib():Attr("S3_pressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~S3_pressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S3_pressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S3_pressure_allowed(ty);}
};

//	Attribute S3_status class definition
class S3_statusAttrib: public Tango::Attr
{
public:
	S3_statusAttrib():Attr("S3_status",
			Tango::DEV_ENUM, Tango::READ) {};
	~S3_statusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S3_status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S3_status_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(S3_statusEnum) == in_type;}
	virtual string get_enum_type() {return string("S3_statusEnum");}
};

//	Attribute S3_type class definition
class S3_typeAttrib: public Tango::Attr
{
public:
	S3_typeAttrib():Attr("S3_type",
			Tango::DEV_STRING, Tango::READ) {};
	~S3_typeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S3_type(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S3_type_allowed(ty);}
};

//	Attribute S4_name class definition
class S4_nameAttrib: public Tango::Attr
{
public:
	S4_nameAttrib():Attr("S4_name",
			Tango::DEV_STRING, Tango::READ) {};
	~S4_nameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S4_name(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S4_name_allowed(ty);}
};

//	Attribute S4_pressure class definition
class S4_pressureAttrib: public Tango::Attr
{
public:
	S4_pressureAttrib():Attr("S4_pressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~S4_pressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S4_pressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S4_pressure_allowed(ty);}
};

//	Attribute S4_status class definition
class S4_statusAttrib: public Tango::Attr
{
public:
	S4_statusAttrib():Attr("S4_status",
			Tango::DEV_ENUM, Tango::READ) {};
	~S4_statusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S4_status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S4_status_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(S4_statusEnum) == in_type;}
	virtual string get_enum_type() {return string("S4_statusEnum");}
};

//	Attribute S4_type class definition
class S4_typeAttrib: public Tango::Attr
{
public:
	S4_typeAttrib():Attr("S4_type",
			Tango::DEV_STRING, Tango::READ) {};
	~S4_typeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S4_type(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S4_type_allowed(ty);}
};

//	Attribute S5_name class definition
class S5_nameAttrib: public Tango::Attr
{
public:
	S5_nameAttrib():Attr("S5_name",
			Tango::DEV_STRING, Tango::READ) {};
	~S5_nameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S5_name(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S5_name_allowed(ty);}
};

//	Attribute S5_pressure class definition
class S5_pressureAttrib: public Tango::Attr
{
public:
	S5_pressureAttrib():Attr("S5_pressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~S5_pressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S5_pressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S5_pressure_allowed(ty);}
};

//	Attribute S5_status class definition
class S5_statusAttrib: public Tango::Attr
{
public:
	S5_statusAttrib():Attr("S5_status",
			Tango::DEV_ENUM, Tango::READ) {};
	~S5_statusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S5_status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S5_status_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(S5_statusEnum) == in_type;}
	virtual string get_enum_type() {return string("S5_statusEnum");}
};

//	Attribute S5_type class definition
class S5_typeAttrib: public Tango::Attr
{
public:
	S5_typeAttrib():Attr("S5_type",
			Tango::DEV_STRING, Tango::READ) {};
	~S5_typeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S5_type(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S5_type_allowed(ty);}
};

//	Attribute S6_name class definition
class S6_nameAttrib: public Tango::Attr
{
public:
	S6_nameAttrib():Attr("S6_name",
			Tango::DEV_STRING, Tango::READ) {};
	~S6_nameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S6_name(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S6_name_allowed(ty);}
};

//	Attribute S6_pressure class definition
class S6_pressureAttrib: public Tango::Attr
{
public:
	S6_pressureAttrib():Attr("S6_pressure",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~S6_pressureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S6_pressure(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S6_pressure_allowed(ty);}
};

//	Attribute S6_status class definition
class S6_statusAttrib: public Tango::Attr
{
public:
	S6_statusAttrib():Attr("S6_status",
			Tango::DEV_ENUM, Tango::READ) {};
	~S6_statusAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S6_status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S6_status_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(S6_statusEnum) == in_type;}
	virtual string get_enum_type() {return string("S6_statusEnum");}
};

//	Attribute S6_type class definition
class S6_typeAttrib: public Tango::Attr
{
public:
	S6_typeAttrib():Attr("S6_type",
			Tango::DEV_STRING, Tango::READ) {};
	~S6_typeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TPG256Srv *>(dev))->read_S6_type(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TPG256Srv *>(dev))->is_S6_type_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command TurnOn class definition
class TurnOnClass : public Tango::Command
{
public:
	TurnOnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	TurnOnClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~TurnOnClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TPG256Srv *>(dev))->is_TurnOn_allowed(any);}
};

//	Command TurnOff class definition
class TurnOffClass : public Tango::Command
{
public:
	TurnOffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	TurnOffClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~TurnOffClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TPG256Srv *>(dev))->is_TurnOff_allowed(any);}
};


/**
 *	The TPG256SrvClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  TPG256SrvClass : public Tango::DeviceClass
#else
class TPG256SrvClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(TPG256SrvClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	TPG256SrvClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static TPG256SrvClass *init(const char *);
		static TPG256SrvClass *instance();
		~TPG256SrvClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		TPG256SrvClass(string &);
		static TPG256SrvClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	TPG256Srv_H
