/*----- PROTECTED REGION ID(TPG256Srv.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        TPG256Srv.cpp
//
// description : C++ source for the TPG256Srv class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TPG256Srv are implemented in this file.
//
// project :     Pfeiffer TPG256 Device Server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TPG256Srv.h>
#include <TPG256SrvClass.h>

/*----- PROTECTED REGION END -----*/	//	TPG256Srv.cpp

/**
 *  TPG256Srv class description:
 *    Pfeiffer TPG256 vacuum gauge controller device server
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  TurnOn        |  turn_on
//  TurnOff       |  turn_off
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  S1_name      |  Tango::DevString	Scalar
//  S1_pressure  |  Tango::DevDouble	Scalar
//  S1_status    |  Tango::DevEnum	Scalar
//  S1_type      |  Tango::DevString	Scalar
//  S2_name      |  Tango::DevString	Scalar
//  S2_pressure  |  Tango::DevDouble	Scalar
//  S2_status    |  Tango::DevEnum	Scalar
//  S2_type      |  Tango::DevString	Scalar
//  S3_name      |  Tango::DevString	Scalar
//  S3_pressure  |  Tango::DevDouble	Scalar
//  S3_status    |  Tango::DevEnum	Scalar
//  S3_type      |  Tango::DevString	Scalar
//  S4_name      |  Tango::DevString	Scalar
//  S4_pressure  |  Tango::DevDouble	Scalar
//  S4_status    |  Tango::DevEnum	Scalar
//  S4_type      |  Tango::DevString	Scalar
//  S5_name      |  Tango::DevString	Scalar
//  S5_pressure  |  Tango::DevDouble	Scalar
//  S5_status    |  Tango::DevEnum	Scalar
//  S5_type      |  Tango::DevString	Scalar
//  S6_name      |  Tango::DevString	Scalar
//  S6_pressure  |  Tango::DevDouble	Scalar
//  S6_status    |  Tango::DevEnum	Scalar
//  S6_type      |  Tango::DevString	Scalar
//================================================================

namespace TPG256Srv_ns
{
/*----- PROTECTED REGION ID(TPG256Srv::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TPG256Srv::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::TPG256Srv()
 *	Description : Constructors for a Tango device
 *                implementing the classTPG256Srv
 */
//--------------------------------------------------------
TPG256Srv::TPG256Srv(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TPG256Srv::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::constructor_1
}
//--------------------------------------------------------
TPG256Srv::TPG256Srv(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TPG256Srv::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::constructor_2
}
//--------------------------------------------------------
TPG256Srv::TPG256Srv(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TPG256Srv::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TPG256Srv::delete_device()
{
	DEBUG_STREAM << "TPG256Srv::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::delete_device) ENABLED START -----*/

	// Stop polling thread
	dev->terminate();
	int *retval;
	dev->join((void**)&retval);
	delete retval;

	//	Delete device allocated objects
	delete[] attr_S1_type_read[0];
	delete[] attr_S2_type_read[0];
	delete[] attr_S3_type_read[0];
	delete[] attr_S4_type_read[0];
	delete[] attr_S5_type_read[0];
	delete[] attr_S6_type_read[0];
	delete[] attr_S1_name_read[0];
	delete[] attr_S2_name_read[0];
	delete[] attr_S3_name_read[0];
	delete[] attr_S4_name_read[0];
	delete[] attr_S5_name_read[0];
	delete[] attr_S6_name_read[0];

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::delete_device
	delete[] attr_S1_name_read;
	delete[] attr_S1_pressure_read;
	delete[] attr_S1_status_read;
	delete[] attr_S1_type_read;
	delete[] attr_S2_name_read;
	delete[] attr_S2_pressure_read;
	delete[] attr_S2_status_read;
	delete[] attr_S2_type_read;
	delete[] attr_S3_name_read;
	delete[] attr_S3_pressure_read;
	delete[] attr_S3_status_read;
	delete[] attr_S3_type_read;
	delete[] attr_S4_name_read;
	delete[] attr_S4_pressure_read;
	delete[] attr_S4_status_read;
	delete[] attr_S4_type_read;
	delete[] attr_S5_name_read;
	delete[] attr_S5_pressure_read;
	delete[] attr_S5_status_read;
	delete[] attr_S5_type_read;
	delete[] attr_S6_name_read;
	delete[] attr_S6_pressure_read;
	delete[] attr_S6_status_read;
	delete[] attr_S6_type_read;
}

//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TPG256Srv::init_device()
{
	DEBUG_STREAM << "TPG256Srv::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_S1_name_read = new Tango::DevString[1];
	attr_S1_pressure_read = new Tango::DevDouble[1];
	attr_S1_status_read = new S1_statusEnum[1];
	attr_S1_type_read = new Tango::DevString[1];
	attr_S2_name_read = new Tango::DevString[1];
	attr_S2_pressure_read = new Tango::DevDouble[1];
	attr_S2_status_read = new S2_statusEnum[1];
	attr_S2_type_read = new Tango::DevString[1];
	attr_S3_name_read = new Tango::DevString[1];
	attr_S3_pressure_read = new Tango::DevDouble[1];
	attr_S3_status_read = new S3_statusEnum[1];
	attr_S3_type_read = new Tango::DevString[1];
	attr_S4_name_read = new Tango::DevString[1];
	attr_S4_pressure_read = new Tango::DevDouble[1];
	attr_S4_status_read = new S4_statusEnum[1];
	attr_S4_type_read = new Tango::DevString[1];
	attr_S5_name_read = new Tango::DevString[1];
	attr_S5_pressure_read = new Tango::DevDouble[1];
	attr_S5_status_read = new S5_statusEnum[1];
	attr_S5_type_read = new Tango::DevString[1];
	attr_S6_name_read = new Tango::DevString[1];
	attr_S6_pressure_read = new Tango::DevDouble[1];
	attr_S6_status_read = new S6_statusEnum[1];
	attr_S6_type_read = new Tango::DevString[1];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(TPG256Srv::init_device) ENABLED START -----*/

	// Allocate strings for sensor types ans statuses
	attr_S1_type_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S2_type_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S3_type_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S4_type_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S5_type_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S6_type_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S1_name_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S2_name_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S3_name_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S4_name_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S5_name_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S6_name_read[0] = new char[TPG256_STATUS_STRLEN];
	attr_S1_type_read[0][0] = '\0';
	attr_S2_type_read[0][0] = '\0';
	attr_S3_type_read[0][0] = '\0';
	attr_S4_type_read[0][0] = '\0';
	attr_S5_type_read[0][0] = '\0';
	attr_S6_type_read[0][0] = '\0';
	attr_S1_name_read[0][0] = '\0';
	attr_S2_name_read[0][0] = '\0';
	attr_S3_name_read[0][0] = '\0';
	attr_S4_name_read[0][0] = '\0';
	attr_S5_name_read[0][0] = '\0';
	attr_S6_name_read[0][0] = '\0';

	// Start polling thread
	dev = new TPGComm(proxy.c_str(), pollingTime, this);

	set_state(Tango::ON);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::init_device
}

//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void TPG256Srv::get_device_property()
{
	/*----- PROTECTED REGION ID(TPG256Srv::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Proxy"));
	dev_prop.push_back(Tango::DbDatum("PollingTime"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on TPG256SrvClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		TPG256SrvClass	*ds_class =
			(static_cast<TPG256SrvClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Proxy from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  proxy;
		else {
			//	Try to initialize Proxy from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  proxy;
		}
		//	And try to extract Proxy value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  proxy;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize PollingTime from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pollingTime;
		else {
			//	Try to initialize PollingTime from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pollingTime;
		}
		//	And try to extract PollingTime value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pollingTime;

	}

	/*----- PROTECTED REGION ID(TPG256Srv::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void TPG256Srv::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(TPG256Srv::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	TPG256Srv::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TPG256Srv::always_executed_hook()
{
	DEBUG_STREAM << "TPG256Srv::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"TPG256Srv::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(TPG256Srv::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TPG256Srv::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TPG256Srv::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute S1_name related method
 *	Description: Sensor 1 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S1_name(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S1_name(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S1_name) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S1_name_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S1_name
}
//--------------------------------------------------------
/**
 *	Read attribute S1_pressure related method
 *	Description: Pressure of sensor 1
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S1_pressure(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S1_pressure(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S1_pressure) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S1_pressure_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S1_pressure
}
//--------------------------------------------------------
/**
 *	Read attribute S1_status related method
 *	Description: Sensor 1 status
 *
 *	Data type:	Tango::DevEnum (S1_statusEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S1_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S1_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S1_status) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S1_status_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S1_status
}
//--------------------------------------------------------
/**
 *	Read attribute S1_type related method
 *	Description: Sensor 1 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S1_type(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S1_type(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S1_type) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S1_type_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S1_type
}
//--------------------------------------------------------
/**
 *	Read attribute S2_name related method
 *	Description: Sensor 2 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S2_name(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S2_name(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S2_name) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S2_name_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S2_name
}
//--------------------------------------------------------
/**
 *	Read attribute S2_pressure related method
 *	Description: Pressure of sensor 2
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S2_pressure(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S2_pressure(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S2_pressure) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S2_pressure_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S2_pressure
}
//--------------------------------------------------------
/**
 *	Read attribute S2_status related method
 *	Description: Sensor 2 status
 *
 *	Data type:	Tango::DevEnum (S2_statusEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S2_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S2_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S2_status) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S2_status_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S2_status
}
//--------------------------------------------------------
/**
 *	Read attribute S2_type related method
 *	Description: Sensor 2 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S2_type(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S2_type(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S2_type) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S2_type_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S2_type
}
//--------------------------------------------------------
/**
 *	Read attribute S3_name related method
 *	Description: Sensor 3 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S3_name(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S3_name(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S3_name) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S3_name_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S3_name
}
//--------------------------------------------------------
/**
 *	Read attribute S3_pressure related method
 *	Description: Pressure of sensor 3
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S3_pressure(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S3_pressure(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S3_pressure) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S3_pressure_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S3_pressure
}
//--------------------------------------------------------
/**
 *	Read attribute S3_status related method
 *	Description: Sensor 3 status
 *
 *	Data type:	Tango::DevEnum (S3_statusEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S3_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S3_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S3_status) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S3_status_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S3_status
}
//--------------------------------------------------------
/**
 *	Read attribute S3_type related method
 *	Description: Sensor 3 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S3_type(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S3_type(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S3_type) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S3_type_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S3_type
}
//--------------------------------------------------------
/**
 *	Read attribute S4_name related method
 *	Description: Sensor 4 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S4_name(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S4_name(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S4_name) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S4_name_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S4_name
}
//--------------------------------------------------------
/**
 *	Read attribute S4_pressure related method
 *	Description: Pressure of sensor 4
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S4_pressure(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S4_pressure(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S4_pressure) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S4_pressure_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S4_pressure
}
//--------------------------------------------------------
/**
 *	Read attribute S4_status related method
 *	Description: Sensor 4 status
 *
 *	Data type:	Tango::DevEnum (S4_statusEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S4_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S4_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S4_status) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S4_status_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S4_status
}
//--------------------------------------------------------
/**
 *	Read attribute S4_type related method
 *	Description: Sensor 4 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S4_type(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S4_type(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S4_type) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S4_type_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S4_type
}
//--------------------------------------------------------
/**
 *	Read attribute S5_name related method
 *	Description: Sensor 5 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S5_name(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S5_name(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S5_name) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S5_name_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S5_name
}
//--------------------------------------------------------
/**
 *	Read attribute S5_pressure related method
 *	Description: Pressure of sensor 5
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S5_pressure(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S5_pressure(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S5_pressure) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S5_pressure_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S5_pressure
}
//--------------------------------------------------------
/**
 *	Read attribute S5_status related method
 *	Description: Sensor 5 status
 *
 *	Data type:	Tango::DevEnum (S5_statusEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S5_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S5_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S5_status) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S5_status_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S5_status
}
//--------------------------------------------------------
/**
 *	Read attribute S5_type related method
 *	Description: Sensor 5 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S5_type(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S5_type(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S5_type) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S5_type_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S5_type
}
//--------------------------------------------------------
/**
 *	Read attribute S6_name related method
 *	Description: Sensor 6 name
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S6_name(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S6_name(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S6_name) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S6_name_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S6_name
}
//--------------------------------------------------------
/**
 *	Read attribute S6_pressure related method
 *	Description: Pressure of sensor 6
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S6_pressure(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S6_pressure(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S6_pressure) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S6_pressure_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S6_pressure
}
//--------------------------------------------------------
/**
 *	Read attribute S6_status related method
 *	Description: Sensor 6 status
 *
 *	Data type:	Tango::DevEnum (S6_statusEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S6_status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S6_status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S6_status) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S6_status_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S6_status
}
//--------------------------------------------------------
/**
 *	Read attribute S6_type related method
 *	Description: Sensor 6 type
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG256Srv::read_S6_type(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG256Srv::read_S6_type(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::read_S6_type) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_S6_type_read);

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::read_S6_type
}

//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TPG256Srv::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TPG256Srv::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command TurnOn related method
 *	Description: Turn on a gauge
 *
 *	@param argin Gauge number (1-6)
 */
//--------------------------------------------------------
void TPG256Srv::turn_on(Tango::DevShort argin)
{
	DEBUG_STREAM << "TPG256Srv::TurnOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::turn_on) ENABLED START -----*/

	if(argin < 1 || argin > 6)
		Tango::Except::throw_exception(
					(const char *)"Bad parameter",
					(const char *)"Sensor number must be between 1 and 6",
					(const char *)"TPG256Srv::TurnOff()");

	TangoSys_OMemStream cmd;
	cmd << "SEN";
	for(int16_t i = 0; i < 6; i++)
		if(i+1 == argin)
			cmd << ",2";
		else
			cmd << ",0";

	dev->sendCommand(cmd.str().c_str());

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::turn_on
}
//--------------------------------------------------------
/**
 *	Command TurnOff related method
 *	Description: Turn off a gauge
 *
 *	@param argin Gauge number (1-6)
 */
//--------------------------------------------------------
void TPG256Srv::turn_off(Tango::DevShort argin)
{
	DEBUG_STREAM << "TPG256Srv::TurnOff()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG256Srv::turn_off) ENABLED START -----*/

	if(argin < 1 || argin > 6)
		Tango::Except::throw_exception(
					(const char *)"Bad parameter",
					(const char *)"Sensor number must be between 1 and 6",
					(const char *)"TPG256Srv::TurnOff()");

	TangoSys_OMemStream cmd;
	cmd << "SEN";
	for(int16_t i = 0; i < 6; i++)
		if(i+1 == argin)
			cmd << ",1";
		else
			cmd << ",0";

	dev->sendCommand(cmd.str().c_str());

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::turn_off
}
//--------------------------------------------------------
/**
 *	Method      : TPG256Srv::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TPG256Srv::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TPG256Srv::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	TPG256Srv::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TPG256Srv::namespace_ending) ENABLED START -----*/

//	Additional Methods


// Send command to TPG256
std::string TPGComm::sendCommand(const char* cmd) {
	// Lock device proxy
	omni_mutex_lock(this->_lock);

	// Flush device
	dev->command_inout("Flush");

	bool command_successful = false;
	// Send command
	try {
		// Create input parameter
		Tango::DevVarCharArray* argin = new Tango::DevVarCharArray();
		argin->length(strlen(cmd)+1);
		memcpy(argin->get_buffer(), cmd, strlen(cmd));
		(*argin)[strlen(cmd)] = '\n';

		// Send command
		{
			Tango::DeviceData din;
			din << argin;
			dev->command_inout("Send", din);
		}

		// Read ACK or NACK
		{
			Tango::DeviceData din;
			din << (Tango::DevLong)3;
			Tango::DeviceData dout = dev->command_inout("Recv", din);
			const Tango::DevVarCharArray* argout;
			dout >> argout;

			if((*argout)[0] == 0x06) {
				// ACK
				command_successful = true;
			} else if((*argout)[0] == 0x15) {
				// NACK
				command_successful = false;
			} else {
				// Unexpected response
				Tango::Except::throw_exception(
					(const char *)"Communication error",
					(const char *)"Received an unexpected response from device",
					(const char *)"TPGComm::sendCommand()");
			}
		}

	} catch(Tango::DevFailed &e) {
		Tango::Except::re_throw_exception(e,
			(const char *)"Communication error",
			(const char *)"Failed to send command to device",
			(const char *)"TPGComm::sendCommand()");
	}

	// Response buffer
	char buffer[64];
	memset(buffer, 0, 64);

	// Enquire response
	try {
		// Send enquiry
		{
			Tango::DevVarCharArray* argin = new Tango::DevVarCharArray();
			argin->length(1);
			(*argin)[0] = 0x05;
			Tango::DeviceData din;
			din << argin;
			dev->command_inout("Send", din);
		}

		// Read response
		{
			Tango::DeviceData din;
			din << (Tango::DevLong)64;
			Tango::DeviceData dout = dev->command_inout("Recv", din);
			const Tango::DevVarCharArray* argout;
			dout >> argout;

			// Copy response to string buffer
			for(size_t i = 0; i < argout->length(); i++) {
				if((*argout)[i] == '\n' || (*argout)[i] == '\r')
					buffer[i] = '\0';
				else
					buffer[i] = (*argout)[i];
			}
		}

	} catch(Tango::DevFailed &e) {
		Tango::Except::re_throw_exception(e,
			(const char *)"Communication error",
			(const char *)"Failed to receive response from device",
			(const char *)"TPGComm::sendCommand()");
	}

	if(!command_successful) {
		// Throw exception with error codes
		TangoSys_OMemStream msg;
		msg << "Failed to communicate with device (Error codes: " << buffer << ")";
		Tango::Except::throw_exception(
			(const char *)"Communication error",
			msg.str().c_str(),
			(const char *)"TPGComm::sendCommand()");
	}

	// Return response
	return std::string(buffer);
}


// Read pressure from sensor
void TPGComm::readPressure(uint8_t n, double* pressure, uint16_t* status) {
	if(n == 0 || n > 6) {
		Tango::Except::throw_exception(
				(const char *)"ID out of range",
				(const char *)"Sensor ID out of range (should be between 1 and 6)",
				(const char *)"TPGComm::readPressure()");
	}

	// Send read command
	char command[64];
	snprintf(command, 64, "PR%d", n);
	std::string rsp = sendCommand(command);

	int ans = sscanf(rsp.c_str(), "%hu,%lG", status, pressure);
	if(ans != 2)
		*status = 3;
	if(*status > 2)
		*pressure = std::numeric_limits<double>::quiet_NaN();
	
	if(_parent->get_logger()->is_debug_enabled())
		_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Read pressure from sensor " << int(n) << ". Got: " << *pressure << ", status " << *status << endl;
}


// Convert status code to string
enum _statusEnum TPGComm::convertStatus(uint16_t code) {
	switch(code) {
		case 0:
			return _MEASUREMENT_DATA_OKAY;
		case 1:
			return _UNDERRANGE;
		case 2:
			return _OVERRANGE;
		case 3:
			return _SENSOR_ERROR;
		case 4:
			return _SENSOR_OFF;
		case 5:
			return _NO_SENSOR;
		case 6:
			return _IDENTIFICATION_ERROR;
	}
	return _SENSOR_ERROR;
}


// Millisecond sleep
void TPGComm::msleep(uint32_t msec) {
	if(msec <= 0)
		return;
	struct timespec st;
	struct timeval start, stop;
	gettimeofday(&start, NULL);
	// Setup delay
	st.tv_sec = msec / 1000;
	st.tv_nsec = (msec % 1000) * 1000000;

	while(1) {
		int ans = nanosleep(&st, NULL);
		if(ans == -1 && errno == EINTR) {
			// Nanosleep was interrupted by a signal
			gettimeofday(&stop, NULL);
			uint32_t rem = msec - ELAPSED_TIME_MS(start, stop);
			if(rem > 0) {
				st.tv_sec = rem / 1000;
				st.tv_nsec = (rem % 1000) * 1000000;
			} else {
				break;
			}
		} else {
			break;
		}
	}
}


// Polling thread
void *TPGComm::run_undetached(void* ptr) {

	// Create device proxy
	dev = new Tango::DeviceProxy(_device);

	// Timing structures
	struct timeval b, e, last_id;
	size_t err_count = 0;
	gettimeofday(&last_id, NULL);
	last_id.tv_sec -= 60;

	_parent->get_logger()->info_stream() << log4tango::LogInitiator::_begin_log << "Starting polling thread" << endl;

	while(!_terminate) {

		// Get starting time
		gettimeofday(&b, NULL);

		bool error = false;

		double pressure;
		double p_change;
		uint16_t status;

		// Read all pressures
		try {
			// Read sensor 1
			readPressure(1, &pressure, &status);
			if(convertStatus(status) != *(_parent->attr_S1_status_read)) {
				*(_parent->attr_S1_status_read) = convertStatus(status);
				_S1_status_value = *(_parent->attr_S1_status_read);
				_parent->push_change_event("S1_status", &_S1_status_value);
			}
			p_change = fabs((*(_parent->attr_S1_pressure_read) - pressure) / *(_parent->attr_S1_pressure_read));
			*(_parent->attr_S1_pressure_read) = pressure;
			if(p_change > 0.05) {
				_parent->push_change_event("S1_pressure", _parent->attr_S1_pressure_read);
			}

		} catch(Tango::DevFailed &e) {
			error = true;
			err_count++;
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error reading sensor 1 [" << e.errors[0].origin << "]: " << e.errors[0].desc << endl;
		}

		try {
			// Read sensor 2
			readPressure(2, &pressure, &status);
			if(convertStatus(status) != *(_parent->attr_S2_status_read)) {
				*(_parent->attr_S2_status_read) = convertStatus(status);
				_S2_status_value = *(_parent->attr_S2_status_read);
				_parent->push_change_event("S2_status", &_S2_status_value);
			}
			p_change = fabs((*(_parent->attr_S2_pressure_read) - pressure) / *(_parent->attr_S2_pressure_read));
			*(_parent->attr_S2_pressure_read) = pressure;
			if(p_change > 0.05) {
				_parent->push_change_event("S2_pressure", _parent->attr_S2_pressure_read);
			}
		} catch(Tango::DevFailed &e) {
			error = true;
			err_count++;
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error reading sensor 2 [" << e.errors[0].origin << "]: " << e.errors[0].desc << endl;
		}

		try {
			// Read sensor 3
			readPressure(3, &pressure, &status);
			if(convertStatus(status) != *(_parent->attr_S3_status_read)) {
				*(_parent->attr_S3_status_read) = convertStatus(status);
				_S3_status_value = *(_parent->attr_S3_status_read);
				_parent->push_change_event("S3_status", &_S3_status_value);
			}
			p_change = fabs((*(_parent->attr_S3_pressure_read) - pressure) / *(_parent->attr_S3_pressure_read));
			*(_parent->attr_S3_pressure_read) = pressure;
			if(p_change > 0.05) {
				_parent->push_change_event("S3_pressure", _parent->attr_S3_pressure_read);
			}
		} catch(Tango::DevFailed &e) {
			error = true;
			err_count++;
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error reading sensor 3 [" << e.errors[0].origin << "]: " << e.errors[0].desc << endl;
		}

		try {
			// Read sensor 4
			readPressure(4, &pressure, &status);
			if(convertStatus(status) != *(_parent->attr_S4_status_read)) {
				*(_parent->attr_S4_status_read) = convertStatus(status);
				_S4_status_value = *(_parent->attr_S4_status_read);
				_parent->push_change_event("S4_status", &_S4_status_value);
			}
			p_change = fabs((*(_parent->attr_S4_pressure_read) - pressure) / *(_parent->attr_S4_pressure_read));
			*(_parent->attr_S4_pressure_read) = pressure;
			if(p_change > 0.05) {
				_parent->push_change_event("S4_pressure", _parent->attr_S4_pressure_read);
			}
		} catch(Tango::DevFailed &e) {
			error = true;
			err_count++;
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error reading sensor 4 [" << e.errors[0].origin << "]: " << e.errors[0].desc << endl;
		}

		try {
			// Read sensor 5
			readPressure(5, &pressure, &status);
			if(convertStatus(status) != *(_parent->attr_S5_status_read)) {
				*(_parent->attr_S5_status_read) = convertStatus(status);
				_S5_status_value = *(_parent->attr_S5_status_read);
				_parent->push_change_event("S5_status", &_S5_status_value);
			}
			p_change = fabs((*(_parent->attr_S5_pressure_read) - pressure) / *(_parent->attr_S5_pressure_read));
			*(_parent->attr_S5_pressure_read) = pressure;
			if(p_change > 0.05) {
				_parent->push_change_event("S5_pressure", _parent->attr_S5_pressure_read);
			}
		} catch(Tango::DevFailed &e) {
			error = true;
			err_count++;
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error reading sensor 5 [" << e.errors[0].origin << "]: " << e.errors[0].desc << endl;
		}

		try {
			// Read sensor 6
			readPressure(6, &pressure, &status);
			if(convertStatus(status) != *(_parent->attr_S6_status_read)) {
				*(_parent->attr_S6_status_read) = convertStatus(status);
				_S6_status_value = *(_parent->attr_S6_status_read);
				_parent->push_change_event("S6_status", &_S6_status_value);
			}
			p_change = fabs((*(_parent->attr_S6_pressure_read) - pressure) / *(_parent->attr_S6_pressure_read));
			*(_parent->attr_S6_pressure_read) = pressure;
			if(p_change > 0.05) {
				_parent->push_change_event("S6_pressure", _parent->attr_S6_pressure_read);
			}
		} catch(Tango::DevFailed &e) {
			error = true;
			err_count++;
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error reading sensor 6 [" << e.errors[0].origin << "]: " << e.errors[0].desc << endl;
		}

		// Check if we have to poll sensor type (every 20 polling cycles...)
		gettimeofday(&e, NULL);
		int elapsed = ELAPSED_TIME_MS(last_id, e);
		if(elapsed > 30000) { // Check ID and names every 30 seconds
			try {
				// Get types
				std::string types = sendCommand("TID");
				size_t offset = 0, pos = 0;

				if(_parent->get_logger()->is_debug_enabled())
					_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Sensor identification: " << types << endl;

				// Sensor 1 type
				pos = types.find(",", offset);
				if(strncmp(*(_parent->attr_S1_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S1_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S1_type", _parent->attr_S1_type_read);
				}
				offset = pos + 1;
				// Sensor 2 type
				pos = types.find(",", offset);
				if(strncmp(*(_parent->attr_S2_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S2_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S2_type", _parent->attr_S2_type_read);
				}
				offset = pos + 1;
				// Sensor 3 type
				pos = types.find(",", offset);
				if(strncmp(*(_parent->attr_S3_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S3_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S3_type", _parent->attr_S3_type_read);
				}
				offset = pos + 1;
				// Sensor 4 type
				pos = types.find(",", offset);
				if(strncmp(*(_parent->attr_S4_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S4_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S4_type", _parent->attr_S4_type_read);
				}
				offset = pos + 1;
				// Sensor 5 type
				pos = types.find(",", offset);
				if(strncmp(*(_parent->attr_S5_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S5_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S5_type", _parent->attr_S5_type_read);
				}
				offset = pos + 1;
				// Sensor 6 type
				pos = types.find(",", offset);
				if(strncmp(*(_parent->attr_S6_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S6_type_read), types.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S6_type", _parent->attr_S6_type_read);
				}

			} catch(Tango::DevFailed &e) {
				error = true;
				err_count++;
				_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error checking sensor type [" << e.errors[0].origin << "]: " << e.errors[0].desc << endl;
			}

			try {
				// Get names
				std::string names = sendCommand("CID");
				size_t offset = 0, pos = 0;

				if(_parent->get_logger()->is_debug_enabled())
					_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Sensor names: " << names << endl;

				// Sensor 1 type
				pos = names.find(",", offset);
				if(strncmp(*(_parent->attr_S1_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S1_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S1_name", _parent->attr_S1_name_read);
				}
				offset = pos + 1;
				// Sensor 2 type
				pos = names.find(",", offset);
				if(strncmp(*(_parent->attr_S2_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S2_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S2_name", _parent->attr_S2_name_read);
				}
				offset = pos + 1;
				// Sensor 3 type
				pos = names.find(",", offset);
				if(strncmp(*(_parent->attr_S3_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S3_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S3_name", _parent->attr_S3_name_read);
				}
				offset = pos + 1;
				// Sensor 4 type
				pos = names.find(",", offset);
				if(strncmp(*(_parent->attr_S4_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S4_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S4_name", _parent->attr_S4_name_read);
				}
				offset = pos + 1;
				// Sensor 5 type
				pos = names.find(",", offset);
				if(strncmp(*(_parent->attr_S5_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S5_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S5_name", _parent->attr_S5_name_read);
				}
				offset = pos + 1;
				// Sensor 6 type
				pos = names.find(",", offset);
				if(strncmp(*(_parent->attr_S6_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN) != 0) {
					strncpy(*(_parent->attr_S6_name_read), names.substr(offset,pos-offset).c_str(), TPG256_STATUS_STRLEN);
					_parent->push_change_event("S6_name", _parent->attr_S6_name_read);
				}

			} catch(Tango::DevFailed &e) {
				error = true;
				err_count++;
				_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error checking sensor names [" << e.errors[0].origin << "]: " << e.errors[0].desc << endl;
			}

			// Update timestamp
			gettimeofday(&last_id, NULL);
		}

		// Check sensor status
		bool alarm = false;
		TangoSys_OMemStream err_msg;
		if(*_parent->attr_S1_status_read == _SENSOR_ERROR || *_parent->attr_S1_status_read == _IDENTIFICATION_ERROR) {
			alarm = true;
			err_msg << "Error with sensor 1. ";
		}
		if(*_parent->attr_S2_status_read == _SENSOR_ERROR || *_parent->attr_S2_status_read == _IDENTIFICATION_ERROR) {
			alarm = true;
			err_msg << "Error with sensor 2. ";
		}
		if(*_parent->attr_S3_status_read == _SENSOR_ERROR || *_parent->attr_S3_status_read == _IDENTIFICATION_ERROR) {
			alarm = true;
			err_msg << "Error with sensor 3. ";
		}
		if(*_parent->attr_S4_status_read == _SENSOR_ERROR || *_parent->attr_S4_status_read == _IDENTIFICATION_ERROR) {
			alarm = true;
			err_msg << "Error with sensor 4. ";
		}
		if(*_parent->attr_S5_status_read == _SENSOR_ERROR || *_parent->attr_S5_status_read == _IDENTIFICATION_ERROR) {
			alarm = true;
			err_msg << "Error with sensor 5. ";
		}
		if(*_parent->attr_S6_status_read == _SENSOR_ERROR || *_parent->attr_S6_status_read == _IDENTIFICATION_ERROR) {
			alarm = true;
			err_msg << "Error with sensor 6. ";
		}

		// If this polling cycle was without errors, reset error count
		if(!error)
			err_count = 0;

		// If the error count is more than 10, set FAULT status
		if(err_count > 10) {
			err_count = 0;
			_parent->set_state(Tango::FAULT);
			_parent->set_status("Communication error");
		}

		if(_parent->get_state() != Tango::FAULT || !error) {
			if(alarm) {
				_parent->set_state(Tango::ALARM);
				_parent->set_status(err_msg.str());
			} else {
				_parent->set_state(Tango::ON);
				_parent->set_status("Normal operation");
			}
		}

		// Get end time
		gettimeofday(&e, NULL);
		elapsed = ELAPSED_TIME_MS(b, e);
		if(elapsed < _polling) {
			msleep(_polling - elapsed);
		}
	}

	// Delete device proxy
	delete dev;

	int *retval = new int();
	*retval = 0;
	return (void*)retval;
}

/*----- PROTECTED REGION END -----*/	//	TPG256Srv::namespace_ending
} //	namespace
