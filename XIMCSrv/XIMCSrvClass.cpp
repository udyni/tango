/*----- PROTECTED REGION ID(XIMCSrvClass.cpp) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//=============================================================================
//
// file :        XIMCSrvClass.cpp
//
// description : C++ source for the XIMCSrvClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the XIMCSrv once per process.
//
// project :     Device server for XIMC controller
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <XIMCSrvClass.h>

/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass.cpp

//-------------------------------------------------------------------
/**
 *	Create XIMCSrvClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_XIMCSrv_class(const char *name) {
		return XIMCSrv_ns::XIMCSrvClass::init(name);
	}
}

namespace XIMCSrv_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
XIMCSrvClass *XIMCSrvClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		XIMCSrvClass::XIMCSrvClass(std::string &s)
 * description : 	constructor for the XIMCSrvClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
XIMCSrvClass::XIMCSrvClass(std::string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering XIMCSrvClass constructor" << std::endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(XIMCSrvClass::constructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::constructor

	cout2 << "Leaving XIMCSrvClass constructor" << std::endl;
}

//--------------------------------------------------------
/**
 * method : 		XIMCSrvClass::~XIMCSrvClass()
 * description : 	destructor for the XIMCSrvClass
 */
//--------------------------------------------------------
XIMCSrvClass::~XIMCSrvClass()
{
	/*----- PROTECTED REGION ID(XIMCSrvClass::destructor) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		XIMCSrvClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
XIMCSrvClass *XIMCSrvClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			std::string s(name);
			_instance = new XIMCSrvClass(s);
		}
		catch (std::bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		XIMCSrvClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
XIMCSrvClass *XIMCSrvClass::instance()
{
	if (_instance == NULL)
	{
		std::cerr << "Class is not initialised !!" << std::endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		GoHomeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GoHomeClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GoHomeClass::execute(): arrived" << std::endl;
	((static_cast<XIMCSrv *>(device))->go_home());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetZeroClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetZeroClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SetZeroClass::execute(): arrived" << std::endl;
	((static_cast<XIMCSrv *>(device))->set_zero());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		MoveAbsoluteClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *MoveAbsoluteClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "MoveAbsoluteClass::execute(): arrived" << std::endl;
	Tango::DevDouble argin;
	extract(in_any, argin);
	((static_cast<XIMCSrv *>(device))->move_absolute(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		MoveRelativeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *MoveRelativeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "MoveRelativeClass::execute(): arrived" << std::endl;
	Tango::DevDouble argin;
	extract(in_any, argin);
	((static_cast<XIMCSrv *>(device))->move_relative(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PowerOffClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PowerOffClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "PowerOffClass::execute(): arrived" << std::endl;
	((static_cast<XIMCSrv *>(device))->power_off());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		MoveLeftClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *MoveLeftClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "MoveLeftClass::execute(): arrived" << std::endl;
	((static_cast<XIMCSrv *>(device))->move_left());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		MoveRightClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *MoveRightClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "MoveRightClass::execute(): arrived" << std::endl;
	((static_cast<XIMCSrv *>(device))->move_right());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StopClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopClass::execute(): arrived" << std::endl;
	((static_cast<XIMCSrv *>(device))->stop());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetClass::execute(): arrived" << std::endl;
	((static_cast<XIMCSrv *>(device))->reset());
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum XIMCSrvClass::get_class_property(std::string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum XIMCSrvClass::get_default_device_property(std::string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum XIMCSrvClass::get_default_class_property(std::string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void XIMCSrvClass::set_default_property()
{
	std::string	prop_name;
	std::string	prop_desc;
	std::string	prop_def;
	std::vector<std::string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "SerialNumber";
	prop_desc = "XIMC device serial number";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Referenced";
	prop_desc = "If set to true at init the stage will search for it`s home position and set it to zero, then move to the last saved position.";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Polling";
	prop_desc = "Polling period in ms";
	prop_def  = "1000";
	vect_data.clear();
	vect_data.push_back("1000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Conversion";
	prop_desc = "Conversion of steps to physical units";
	prop_def  = "1.0";
	vect_data.clear();
	vect_data.push_back("1.0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ConversionEnc";
	prop_desc = "Conversion of encoder counts to physical units";
	prop_def  = "1.0";
	vect_data.clear();
	vect_data.push_back("1.0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "UseEncoder";
	prop_desc = "Enable the use of the encoder";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Units";
	prop_desc = "Units for position (for velocity will be units/s, for acceleration units/s^2)";
	prop_def  = "mm";
	vect_data.clear();
	vect_data.push_back("mm");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PositionFormat";
	prop_desc = "Format string for stage position";
	prop_def  = "%.3f";
	vect_data.clear();
	vect_data.push_back("%.3f");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "FirstHomingSpeed";
	prop_desc = "Speed of the first homing move for the standard protocol (step/s)";
	prop_def  = "500";
	vect_data.clear();
	vect_data.push_back("500");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "SecondHomingSpeed";
	prop_desc = "Speed of the second homing move for the standard algorithm (step/s).\nIf the Fast Homing Algorithm is enabled, is the speed of the homing operation.";
	prop_def  = "10";
	vect_data.clear();
	vect_data.push_back("10");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "UseFastAlgorithm";
	prop_desc = "Use fast homing algorithm";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "HomingDirection";
	prop_desc = "Homing move direction: false for left, true for right (default left, i.e. negative direction))";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "BlindMoveBeforeHoming";
	prop_desc = "Move by this relative amount (in user units) before starting home search";
	prop_def  = "0.0";
	vect_data.clear();
	vect_data.push_back("0.0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "HomingDelta";
	prop_desc = "Move to reach home position after limit swith trigger.";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "PositionAtHome";
	prop_desc = "Position value at home";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void XIMCSrvClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	std::string	classname = get_name();
	std::string	header;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	std::string	str_title("Device server for XIMC controller");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	std::vector<std::string>	str_desc;
	str_desc.push_back("Device server for XIMC controllers like Standa 8SMC4-USB");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	std::vector<std::string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void XIMCSrvClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(XIMCSrvClass::device_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << std::endl;
		device_list.push_back(new XIMCSrv(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		XIMCSrv *dev = static_cast<XIMCSrv *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(XIMCSrvClass::device_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void XIMCSrvClass::attribute_factory(std::vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(XIMCSrvClass::attribute_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::attribute_factory_before
	//	Attribute : Position
	PositionAttrib	*position = new PositionAttrib();
	Tango::UserDefaultAttrProp	position_prop;
	position_prop.set_description("Position in steps");
	position_prop.set_label("Position");
	position_prop.set_unit("steps");
	position_prop.set_standard_unit("steps");
	position_prop.set_display_unit("steps");
	//	format	not set for Position
	//	max_value	not set for Position
	//	min_value	not set for Position
	//	max_alarm	not set for Position
	//	min_alarm	not set for Position
	//	max_warning	not set for Position
	//	min_warning	not set for Position
	//	delta_t	not set for Position
	//	delta_val	not set for Position
	
	position->set_default_properties(position_prop);
	//	Not Polled
	position->set_disp_level(Tango::OPERATOR);
	position->set_memorized();
	position->set_memorized_init(false);
	position->set_change_event(true, false);
	att_list.push_back(position);

	//	Attribute : Velocity
	VelocityAttrib	*velocity = new VelocityAttrib();
	Tango::UserDefaultAttrProp	velocity_prop;
	velocity_prop.set_description("Velocity in steps/s");
	velocity_prop.set_label("Velocity");
	velocity_prop.set_unit("steps/s");
	velocity_prop.set_standard_unit("steps/s");
	velocity_prop.set_display_unit("steps/s");
	//	format	not set for Velocity
	//	max_value	not set for Velocity
	//	min_value	not set for Velocity
	//	max_alarm	not set for Velocity
	//	min_alarm	not set for Velocity
	//	max_warning	not set for Velocity
	//	min_warning	not set for Velocity
	//	delta_t	not set for Velocity
	//	delta_val	not set for Velocity
	
	velocity->set_default_properties(velocity_prop);
	//	Not Polled
	velocity->set_disp_level(Tango::OPERATOR);
	velocity->set_memorized();
	velocity->set_memorized_init(false);
	velocity->set_change_event(true, false);
	att_list.push_back(velocity);

	//	Attribute : Temperature
	TemperatureAttrib	*temperature = new TemperatureAttrib();
	Tango::UserDefaultAttrProp	temperature_prop;
	temperature_prop.set_description("Controller temperature");
	temperature_prop.set_label("Temperature");
	temperature_prop.set_unit("°C");
	temperature_prop.set_standard_unit("°C");
	temperature_prop.set_display_unit("°C");
	temperature_prop.set_format("%.1f");
	//	max_value	not set for Temperature
	//	min_value	not set for Temperature
	//	max_alarm	not set for Temperature
	//	min_alarm	not set for Temperature
	//	max_warning	not set for Temperature
	//	min_warning	not set for Temperature
	//	delta_t	not set for Temperature
	//	delta_val	not set for Temperature
	
	temperature->set_default_properties(temperature_prop);
	//	Not Polled
	temperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	temperature->set_change_event(true, false);
	att_list.push_back(temperature);

	//	Attribute : Acceleration
	AccelerationAttrib	*acceleration = new AccelerationAttrib();
	Tango::UserDefaultAttrProp	acceleration_prop;
	acceleration_prop.set_description("Acceleration and deceleration");
	acceleration_prop.set_label("Acceleration");
	acceleration_prop.set_unit("step/s^2");
	acceleration_prop.set_standard_unit("step/s^2");
	acceleration_prop.set_display_unit("step/s^2");
	//	format	not set for Acceleration
	//	max_value	not set for Acceleration
	//	min_value	not set for Acceleration
	//	max_alarm	not set for Acceleration
	//	min_alarm	not set for Acceleration
	//	max_warning	not set for Acceleration
	//	min_warning	not set for Acceleration
	//	delta_t	not set for Acceleration
	//	delta_val	not set for Acceleration
	
	acceleration->set_default_properties(acceleration_prop);
	//	Not Polled
	acceleration->set_disp_level(Tango::OPERATOR);
	acceleration->set_memorized();
	acceleration->set_memorized_init(false);
	acceleration->set_change_event(true, false);
	att_list.push_back(acceleration);

	//	Attribute : USBvoltage
	USBvoltageAttrib	*usbvoltage = new USBvoltageAttrib();
	Tango::UserDefaultAttrProp	usbvoltage_prop;
	usbvoltage_prop.set_description("USB voltage");
	usbvoltage_prop.set_label("USB Voltage");
	usbvoltage_prop.set_unit("V");
	usbvoltage_prop.set_standard_unit("V");
	usbvoltage_prop.set_display_unit("V");
	usbvoltage_prop.set_format("%.2f");
	//	max_value	not set for USBvoltage
	//	min_value	not set for USBvoltage
	//	max_alarm	not set for USBvoltage
	//	min_alarm	not set for USBvoltage
	//	max_warning	not set for USBvoltage
	//	min_warning	not set for USBvoltage
	//	delta_t	not set for USBvoltage
	//	delta_val	not set for USBvoltage
	
	usbvoltage->set_default_properties(usbvoltage_prop);
	//	Not Polled
	usbvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	usbvoltage->set_change_event(true, false);
	att_list.push_back(usbvoltage);

	//	Attribute : USBcurrent
	USBcurrentAttrib	*usbcurrent = new USBcurrentAttrib();
	Tango::UserDefaultAttrProp	usbcurrent_prop;
	usbcurrent_prop.set_description("USB current");
	usbcurrent_prop.set_label("USB current");
	usbcurrent_prop.set_unit("mA");
	usbcurrent_prop.set_standard_unit("mA");
	usbcurrent_prop.set_display_unit("mA");
	//	format	not set for USBcurrent
	//	max_value	not set for USBcurrent
	//	min_value	not set for USBcurrent
	//	max_alarm	not set for USBcurrent
	//	min_alarm	not set for USBcurrent
	//	max_warning	not set for USBcurrent
	//	min_warning	not set for USBcurrent
	//	delta_t	not set for USBcurrent
	//	delta_val	not set for USBcurrent
	
	usbcurrent->set_default_properties(usbcurrent_prop);
	//	Not Polled
	usbcurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	usbcurrent->set_change_event(true, false);
	att_list.push_back(usbcurrent);

	//	Attribute : PwrVoltage
	PwrVoltageAttrib	*pwrvoltage = new PwrVoltageAttrib();
	Tango::UserDefaultAttrProp	pwrvoltage_prop;
	pwrvoltage_prop.set_description("Motor power supply voltage");
	pwrvoltage_prop.set_label("Power voltage");
	pwrvoltage_prop.set_unit("V");
	pwrvoltage_prop.set_standard_unit("V");
	pwrvoltage_prop.set_display_unit("V");
	pwrvoltage_prop.set_format("%.2f");
	//	max_value	not set for PwrVoltage
	//	min_value	not set for PwrVoltage
	//	max_alarm	not set for PwrVoltage
	//	min_alarm	not set for PwrVoltage
	//	max_warning	not set for PwrVoltage
	//	min_warning	not set for PwrVoltage
	//	delta_t	not set for PwrVoltage
	//	delta_val	not set for PwrVoltage
	
	pwrvoltage->set_default_properties(pwrvoltage_prop);
	//	Not Polled
	pwrvoltage->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	pwrvoltage->set_change_event(true, false);
	att_list.push_back(pwrvoltage);

	//	Attribute : PwrCurrent
	PwrCurrentAttrib	*pwrcurrent = new PwrCurrentAttrib();
	Tango::UserDefaultAttrProp	pwrcurrent_prop;
	pwrcurrent_prop.set_description("Motor supply current consumption");
	pwrcurrent_prop.set_label("Power current");
	pwrcurrent_prop.set_unit("mA");
	pwrcurrent_prop.set_standard_unit("mA");
	pwrcurrent_prop.set_display_unit("mA");
	//	format	not set for PwrCurrent
	//	max_value	not set for PwrCurrent
	//	min_value	not set for PwrCurrent
	//	max_alarm	not set for PwrCurrent
	//	min_alarm	not set for PwrCurrent
	//	max_warning	not set for PwrCurrent
	//	min_warning	not set for PwrCurrent
	//	delta_t	not set for PwrCurrent
	//	delta_val	not set for PwrCurrent
	
	pwrcurrent->set_default_properties(pwrcurrent_prop);
	//	Not Polled
	pwrcurrent->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	pwrcurrent->set_change_event(true, false);
	att_list.push_back(pwrcurrent);

	//	Attribute : FirmwareVersion
	FirmwareVersionAttrib	*firmwareversion = new FirmwareVersionAttrib();
	Tango::UserDefaultAttrProp	firmwareversion_prop;
	//	description	not set for FirmwareVersion
	firmwareversion_prop.set_label("Firmware version");
	//	unit	not set for FirmwareVersion
	//	standard_unit	not set for FirmwareVersion
	//	display_unit	not set for FirmwareVersion
	//	format	not set for FirmwareVersion
	//	max_value	not set for FirmwareVersion
	//	min_value	not set for FirmwareVersion
	//	max_alarm	not set for FirmwareVersion
	//	min_alarm	not set for FirmwareVersion
	//	max_warning	not set for FirmwareVersion
	//	min_warning	not set for FirmwareVersion
	//	delta_t	not set for FirmwareVersion
	//	delta_val	not set for FirmwareVersion
	
	firmwareversion->set_default_properties(firmwareversion_prop);
	//	Not Polled
	firmwareversion->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(firmwareversion);

	//	Attribute : PowerState
	PowerStateAttrib	*powerstate = new PowerStateAttrib();
	Tango::UserDefaultAttrProp	powerstate_prop;
	//	description	not set for PowerState
	//	label	not set for PowerState
	//	unit	not set for PowerState
	//	standard_unit	not set for PowerState
	//	display_unit	not set for PowerState
	//	format	not set for PowerState
	//	max_value	not set for PowerState
	//	min_value	not set for PowerState
	//	max_alarm	not set for PowerState
	//	min_alarm	not set for PowerState
	//	max_warning	not set for PowerState
	//	min_warning	not set for PowerState
	//	delta_t	not set for PowerState
	//	delta_val	not set for PowerState
	
	{
		vector<std::string> labels;
		labels.push_back("Unknown");
		labels.push_back("Off");
		labels.push_back("Undefined");
		labels.push_back("Normal");
		labels.push_back("Reduced");
		labels.push_back("Maximum");
		powerstate_prop.set_enum_labels(labels);
	}
	powerstate->set_default_properties(powerstate_prop);
	//	Not Polled
	powerstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	powerstate->set_change_event(true, false);
	att_list.push_back(powerstate);

	//	Attribute : Referenced
	ReferencedAttrib	*referenced = new ReferencedAttrib();
	Tango::UserDefaultAttrProp	referenced_prop;
	//	description	not set for Referenced
	//	label	not set for Referenced
	//	unit	not set for Referenced
	//	standard_unit	not set for Referenced
	//	display_unit	not set for Referenced
	//	format	not set for Referenced
	//	max_value	not set for Referenced
	//	min_value	not set for Referenced
	//	max_alarm	not set for Referenced
	//	min_alarm	not set for Referenced
	//	max_warning	not set for Referenced
	//	min_warning	not set for Referenced
	//	delta_t	not set for Referenced
	//	delta_val	not set for Referenced
	
	referenced->set_default_properties(referenced_prop);
	//	Not Polled
	referenced->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	referenced->set_change_event(true, false);
	att_list.push_back(referenced);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(XIMCSrvClass::attribute_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void XIMCSrvClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(XIMCSrvClass::pipe_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::pipe_factory_before
	/*----- PROTECTED REGION ID(XIMCSrvClass::pipe_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void XIMCSrvClass::command_factory()
{
	/*----- PROTECTED REGION ID(XIMCSrvClass::command_factory_before) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::command_factory_before

	//	Set polling perod for command State
	Tango::Command	&stateCmd = get_cmd_by_name("State");
	stateCmd.set_polling_period(500);
	

	//	Command GoHome
	GoHomeClass	*pGoHomeCmd =
		new GoHomeClass("GoHome",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGoHomeCmd);

	//	Command SetZero
	SetZeroClass	*pSetZeroCmd =
		new SetZeroClass("SetZero",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetZeroCmd);

	//	Command MoveAbsolute
	MoveAbsoluteClass	*pMoveAbsoluteCmd =
		new MoveAbsoluteClass("MoveAbsolute",
			Tango::DEV_DOUBLE, Tango::DEV_VOID,
			"Position",
			"",
			Tango::OPERATOR);
	command_list.push_back(pMoveAbsoluteCmd);

	//	Command MoveRelative
	MoveRelativeClass	*pMoveRelativeCmd =
		new MoveRelativeClass("MoveRelative",
			Tango::DEV_DOUBLE, Tango::DEV_VOID,
			"Position",
			"",
			Tango::OPERATOR);
	command_list.push_back(pMoveRelativeCmd);

	//	Command PowerOff
	PowerOffClass	*pPowerOffCmd =
		new PowerOffClass("PowerOff",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPowerOffCmd);

	//	Command MoveLeft
	MoveLeftClass	*pMoveLeftCmd =
		new MoveLeftClass("MoveLeft",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pMoveLeftCmd);

	//	Command MoveRight
	MoveRightClass	*pMoveRightCmd =
		new MoveRightClass("MoveRight",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pMoveRightCmd);

	//	Command Stop
	StopClass	*pStopCmd =
		new StopClass("Stop",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopCmd);

	//	Command Reset
	ResetClass	*pResetCmd =
		new ResetClass("Reset",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetCmd);

	/*----- PROTECTED REGION ID(XIMCSrvClass::command_factory_after) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		XIMCSrvClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void XIMCSrvClass::create_static_attribute_list(std::vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		std::string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << std::endl;

	/*----- PROTECTED REGION ID(XIMCSrvClass::create_static_att_list) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		XIMCSrvClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void XIMCSrvClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, std::vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((std::string)(*devlist_ptr)[i]).c_str());
		XIMCSrv *dev = static_cast<XIMCSrv *> (dev_impl);

		std::vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		std::vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			std::string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			std::vector<std::string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << std::endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(XIMCSrvClass::erase_dynamic_attributes) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : XIMCSrvClass::get_attr_object_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *XIMCSrvClass::get_attr_object_by_name(std::vector<Tango::Attr *> &att_list, std::string attname)
{
	std::vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(XIMCSrvClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	XIMCSrvClass::Additional Methods
} //	namespace
