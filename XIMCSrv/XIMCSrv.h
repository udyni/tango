/*----- PROTECTED REGION ID(XIMCSrv.h) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//=============================================================================
//
// file :        XIMCSrv.h
//
// description : Include file for the XIMCSrv class
//
// project :     Device server for XIMC controller
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef XIMCSrv_H
#define XIMCSrv_H

#include <tango.h>
#include <omnithread.h>
#include <sstream>
#include <iomanip>
#include "ximc_protocol.h"

#define XIMC_MAX_RETRY 4

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif


/*----- PROTECTED REGION END -----*/	//	XIMCSrv.h

/**
 *  XIMCSrv class description:
 *    Device server for XIMC controllers like Standa 8SMC4-USB
 */

namespace XIMCSrv_ns
{
/*----- PROTECTED REGION ID(XIMCSrv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class XIMCThread;


/*----- PROTECTED REGION END -----*/	//	XIMCSrv::Additional Class Declarations

class XIMCSrv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(XIMCSrv::Data Members) ENABLED START -----*/

//	Add your own data members
private:
	XIMCThread *dev;

/*----- PROTECTED REGION END -----*/	//	XIMCSrv::Data Members

//	Device property data members
public:
	//	Proxy:	Communication Tango device
	string	proxy;
	//	Referenced:	If set to true at init the stage will search for it`s home position and set it to zero, then move to the last saved position.
	Tango::DevBoolean	referenced;
	//	FirstHomingSpeed:	Speed for the first search of the home position (if SecondHomingSpeed is zero this is the only one used!)
	Tango::DevLong	firstHomingSpeed;
	//	SecondHomingSpeed:	Speed for the second, much finer, search of the home position (set to zero to disable second search))
	Tango::DevLong	secondHomingSpeed;
	//	Polling:	Polling period in ms
	Tango::DevULong	polling;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevFloat	*attr_Position_read;
	Tango::DevFloat	*attr_Velocity_read;
	Tango::DevFloat	*attr_Temperature_read;
	Tango::DevUShort	*attr_Acceleration_read;
	Tango::DevFloat	*attr_USBvoltage_read;
	Tango::DevLong	*attr_USBcurrent_read;
	Tango::DevFloat	*attr_PwrVoltage_read;
	Tango::DevLong	*attr_PwrCurrent_read;
	Tango::DevLong64	*attr_PositionEnc_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	XIMCSrv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	XIMCSrv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	XIMCSrv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~XIMCSrv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : XIMCSrv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : XIMCSrv::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Position related methods
 *	Description: Position in steps
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Position(Tango::Attribute &attr);
	virtual void write_Position(Tango::WAttribute &attr);
	virtual bool is_Position_allowed(Tango::AttReqType type);
/**
 *	Attribute Velocity related methods
 *	Description: Velocity in steps/s
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Velocity(Tango::Attribute &attr);
	virtual void write_Velocity(Tango::WAttribute &attr);
	virtual bool is_Velocity_allowed(Tango::AttReqType type);
/**
 *	Attribute Temperature related methods
 *	Description: Controller temperature
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Temperature(Tango::Attribute &attr);
	virtual bool is_Temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute Acceleration related methods
 *	Description: Acceleration and deceleration
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Acceleration(Tango::Attribute &attr);
	virtual void write_Acceleration(Tango::WAttribute &attr);
	virtual bool is_Acceleration_allowed(Tango::AttReqType type);
/**
 *	Attribute USBvoltage related methods
 *	Description: USB voltage
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_USBvoltage(Tango::Attribute &attr);
	virtual bool is_USBvoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute USBcurrent related methods
 *	Description: USB current
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_USBcurrent(Tango::Attribute &attr);
	virtual bool is_USBcurrent_allowed(Tango::AttReqType type);
/**
 *	Attribute PwrVoltage related methods
 *	Description: Motor power supply voltage
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_PwrVoltage(Tango::Attribute &attr);
	virtual bool is_PwrVoltage_allowed(Tango::AttReqType type);
/**
 *	Attribute PwrCurrent related methods
 *	Description: Motor supply current consumption
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_PwrCurrent(Tango::Attribute &attr);
	virtual bool is_PwrCurrent_allowed(Tango::AttReqType type);
/**
 *	Attribute PositionEnc related methods
 *	Description: Encoder position
 *
 *	Data type:	Tango::DevLong64
 *	Attr type:	Scalar
 */
	virtual void read_PositionEnc(Tango::Attribute &attr);
	virtual bool is_PositionEnc_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : XIMCSrv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command GoHome related method
	 *	Description: Search home position
	 *
	 */
	virtual void go_home();
	virtual bool is_GoHome_allowed(const CORBA::Any &any);
	/**
	 *	Command SetZero related method
	 *	Description: Set current position as zero
	 *
	 */
	virtual void set_zero();
	virtual bool is_SetZero_allowed(const CORBA::Any &any);
	/**
	 *	Command MoveAbsolute related method
	 *	Description: Move to an absolute position
	 *
	 *	@param argin Position (steps)
	 */
	virtual void move_absolute(Tango::DevFloat argin);
	virtual bool is_MoveAbsolute_allowed(const CORBA::Any &any);
	/**
	 *	Command MoveRelative related method
	 *	Description: Move to an relative position
	 *
	 *	@param argin Position (steps)
	 */
	virtual void move_relative(Tango::DevFloat argin);
	virtual bool is_MoveRelative_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOff related method
	 *	Description: Power off motor
	 *
	 */
	virtual void power_off();
	virtual bool is_PowerOff_allowed(const CORBA::Any &any);
	/**
	 *	Command MoveLeft related method
	 *	Description: Start continuous move to the left
	 *
	 */
	virtual void move_left();
	virtual bool is_MoveLeft_allowed(const CORBA::Any &any);
	/**
	 *	Command MoveRight related method
	 *	Description: Start continuous move to the right
	 *
	 */
	virtual void move_right();
	virtual bool is_MoveRight_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: Stop motion
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Reset the controller sending a hard stop command
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : XIMCSrv::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(XIMCSrv::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	XIMCSrv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(XIMCSrv::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class XIMCThread : public omni_thread, protected XIMCProtocolHandler {
public:
	XIMCThread(const char* device, XIMCSrv *parent);
	XIMCThread(string device, XIMCSrv *parent);

	// Command STOP: stop all movements immediately
	void stop();

	// Command PWOF: turn off motor power
	void powerOff();

	// Command MOVE: absolute move
	void moveAbs(float fpos);
	void moveAbs(const position_t &pos);

	// Command MOVR: relative move
	void moveRel(float fpos);
	void moveRel(const position_t &pos);

	// Command HOME: go home
	void goHome();

	// Command LEFT: start a continuous move to the left
	void moveLeft();

	// Command RIGT: start a continuous move to the right
	void moveRight();

	// Command SSTP: soft stop (with deceleration)
	void softStop();

	// Command GPOS: get position
	void getPosition(gposition_t& pos);

	// Command SPOS: set position
	void setPosition(const sposition_t& pos);

	// Command ZERO: set current position as zero
	void zero();

	// Command READ: read settings from flash
	void restoreSettings();

	// Command SFBS: set feedback settings
	void setFeedback(const feedback_settings_t& fb);

	// Command SMOV: configure setup movement (speed, acceleration, threshold and etc)
	void setMotionSettings(const move_settings_t& mov);

	// Command SENG: set engine settings
	void setEngineSettings(const engine_settings_t& eng);

	// Command SHOM: set home settings
	void setHomeSettings(const home_settings_t& home);

	// Command GFBS: get feedback settings
	const feedback_settings_t& getFeedback()const { return _feedback; }

	// Command GMOV: read setup movement (speed, acceleration, threshold and etc)
	const move_settings_t& getMotionSettings()const { return _motion; }

	// Command GENG: read engine settings
	const engine_settings_t& getEngineSettings()const { return _engine; }

	// Command GHOM: read home settings
	const home_settings_t& getHomeSettings()const { return _home; }

	// Return status
	const status_t& getStatus()const { return _status; }

	// Terminate thread
	void terminate() { _terminate = true; }

	// Compute float position from status struct
	float getStatusPos()const { return _st_pos; }

	// Return encoder position from status
	int64_t getStatusPosEnc()const { return _st_enc; }

	// Return supply information from status struct
	float getUSB_V()const { return _st_usb_v; }
	Tango::DevLong getUSB_I()const { return _st_usb_i; }
	float getPWR_V()const { return _st_pwr_v; }
	Tango::DevLong getPWR_I()const { return _st_pwr_i; }

	// Return controller temperature from status struct
	float getTemperature()const { return _st_temp; }

	// Update configuration structures
	void updateConfig();

	// Get current velocity
	float getVelocity() { return float(_motion.speed) + float(_motion.uspeed) / 256.0; }

	// Set current velocity
	void setVelocity(float vel);

	// Get current acceleration and deceleration
	uint16_t getAcceleration() { return _motion.accel; }

	// Set current acceleration and deceleration
	void setAcceleration(uint16_t acc);



protected:
	// Command GETS: get controller status
	void readStatus(status_t& s);

	// Command GFBS: get feedback settings
	void readFeedback(feedback_settings_t& fb);

	// Command GMOV: read setup movement (speed, acceleration, threshold and etc)
	void readMotionSettings(move_settings_t& mov);

	// Command GENG: read engine settings
	void readEngineSettings(engine_settings_t& eng);

	// Command GHOM: read home settings
	void readHomeSettings(home_settings_t& home);

	// Search for home
	void searchHome();

protected:
	// Send a command to the controller
	void sendCommand(uint32_t cmd, const uint8_t* payload, size_t payload_len, uint8_t *rsp_payload, size_t& rsp_len);

	// Resynchronize communication with device
	bool resync();

	// Service function to convert command code to str
	const char* cmd2string(uint32_t cmd);

protected:
	void* run_undetached(void *arg);

	// Communication device
	Tango::DeviceProxy *commdev;

	// Communication device mutex
	omni_mutex _lock;

	// Terminate flag
	bool _terminate;

	// Parent device
	XIMCSrv *_parent;

	// Controller status
	status_t _status;

	// Status variables for attributes
	float _st_pos;
	int64_t _st_enc;
	float _st_usb_v;
	Tango::DevLong _st_usb_i;
	float _st_pwr_v;
	Tango::DevLong _st_pwr_i;
	float _st_temp;

	// Controller motion settings
	move_settings_t _motion;

	// Controller engine settings;
	engine_settings_t _engine;

	// Controller feedback settings
	feedback_settings_t _feedback;

	// Controller homing settings
	home_settings_t _home;

	// Home search requested
	bool _home_search;
};


/*----- PROTECTED REGION END -----*/	//	XIMCSrv::Additional Classes Definitions

}	//	End of namespace

#endif   //	XIMCSrv_H
