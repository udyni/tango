/*----- PROTECTED REGION ID(VibrationMeterClass.h) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//=============================================================================
//
// file :        VibrationMeterClass.h
//
// description : Include for the VibrationMeter root class.
//               This class is the singleton class for
//                the VibrationMeter device class.
//               It contains all properties and methods which the
//               VibrationMeter requires only once e.g. the commands.
//
// project :     Vibration meter
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
// 2021 CNR-IFN
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef VibrationMeterClass_H
#define VibrationMeterClass_H

#include <tango.h>
#include <VibrationMeter.h>


/*----- PROTECTED REGION END -----*/	//	VibrationMeterClass.h


namespace VibrationMeter_ns
{
/*----- PROTECTED REGION ID(VibrationMeterClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	VibrationMeterClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute Samples class definition
class SamplesAttrib: public Tango::Attr
{
public:
	SamplesAttrib():Attr("Samples",
			Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~SamplesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_Samples(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<VibrationMeter *>(dev))->write_Samples(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_Samples_allowed(ty);}
};

//	Attribute SampleFrequency class definition
class SampleFrequencyAttrib: public Tango::Attr
{
public:
	SampleFrequencyAttrib():Attr("SampleFrequency",
			Tango::DEV_ENUM, Tango::READ_WRITE) {};
	~SampleFrequencyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_SampleFrequency(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<VibrationMeter *>(dev))->write_SampleFrequency(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_SampleFrequency_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(SampleFrequencyEnum) == in_type;}
	virtual string get_enum_type() {return string("SampleFrequencyEnum");}
};

//	Attribute Period class definition
class PeriodAttrib: public Tango::Attr
{
public:
	PeriodAttrib():Attr("Period",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~PeriodAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_Period(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_Period_allowed(ty);}
};

//	Attribute FrequencyStep class definition
class FrequencyStepAttrib: public Tango::Attr
{
public:
	FrequencyStepAttrib():Attr("FrequencyStep",
			Tango::DEV_DOUBLE, Tango::READ) {};
	~FrequencyStepAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_FrequencyStep(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_FrequencyStep_allowed(ty);}
};

//	Attribute X_spectrum class definition
class X_spectrumAttrib: public Tango::SpectrumAttr
{
public:
	X_spectrumAttrib():SpectrumAttr("X_spectrum",
			Tango::DEV_DOUBLE, Tango::READ, 40960) {};
	~X_spectrumAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_X_spectrum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_X_spectrum_allowed(ty);}
};

//	Attribute Y_spectrum class definition
class Y_spectrumAttrib: public Tango::SpectrumAttr
{
public:
	Y_spectrumAttrib():SpectrumAttr("Y_spectrum",
			Tango::DEV_DOUBLE, Tango::READ, 40960) {};
	~Y_spectrumAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_Y_spectrum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_Y_spectrum_allowed(ty);}
};

//	Attribute Z_spectrum class definition
class Z_spectrumAttrib: public Tango::SpectrumAttr
{
public:
	Z_spectrumAttrib():SpectrumAttr("Z_spectrum",
			Tango::DEV_DOUBLE, Tango::READ, 40960) {};
	~Z_spectrumAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_Z_spectrum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_Z_spectrum_allowed(ty);}
};

//	Attribute RawX class definition
class RawXAttrib: public Tango::SpectrumAttr
{
public:
	RawXAttrib():SpectrumAttr("RawX",
			Tango::DEV_DOUBLE, Tango::READ, 40960) {};
	~RawXAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_RawX(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_RawX_allowed(ty);}
};

//	Attribute RawY class definition
class RawYAttrib: public Tango::SpectrumAttr
{
public:
	RawYAttrib():SpectrumAttr("RawY",
			Tango::DEV_DOUBLE, Tango::READ, 40960) {};
	~RawYAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_RawY(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_RawY_allowed(ty);}
};

//	Attribute RawZ class definition
class RawZAttrib: public Tango::SpectrumAttr
{
public:
	RawZAttrib():SpectrumAttr("RawZ",
			Tango::DEV_DOUBLE, Tango::READ, 40960) {};
	~RawZAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<VibrationMeter *>(dev))->read_RawZ(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<VibrationMeter *>(dev))->is_RawZ_allowed(ty);}
};


/**
 *	The VibrationMeterClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  VibrationMeterClass : public Tango::DeviceClass
#else
class VibrationMeterClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(VibrationMeterClass::Additionnal DServer data members) ENABLED START -----*/


	/*----- PROTECTED REGION END -----*/	//	VibrationMeterClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static VibrationMeterClass *init(const char *);
		static VibrationMeterClass *instance();
		~VibrationMeterClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		VibrationMeterClass(string &);
		static VibrationMeterClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	VibrationMeter_H
