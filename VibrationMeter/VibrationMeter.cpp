/*----- PROTECTED REGION ID(VibrationMeter.cpp) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//=============================================================================
//
// file :        VibrationMeter.cpp
//
// description : C++ source for the VibrationMeter class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               VibrationMeter are implemented in this file.
//
// project :     Vibration meter
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
// 2021 CNR-IFN
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <VibrationMeter.h>
#include <VibrationMeterClass.h>

#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif


/*----- PROTECTED REGION END -----*/	//	VibrationMeter.cpp

/**
 *  VibrationMeter class description:
 *    Vibration meter based on ADXL345
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Samples          |  Tango::DevULong	Scalar
//  SampleFrequency  |  Tango::DevEnum	Scalar
//  Period           |  Tango::DevDouble	Scalar
//  FrequencyStep    |  Tango::DevDouble	Scalar
//  X_spectrum       |  Tango::DevDouble	Spectrum  ( max = 40960)
//  Y_spectrum       |  Tango::DevDouble	Spectrum  ( max = 40960)
//  Z_spectrum       |  Tango::DevDouble	Spectrum  ( max = 40960)
//  RawX             |  Tango::DevDouble	Spectrum  ( max = 40960)
//  RawY             |  Tango::DevDouble	Spectrum  ( max = 40960)
//  RawZ             |  Tango::DevDouble	Spectrum  ( max = 40960)
//================================================================

namespace VibrationMeter_ns
{
/*----- PROTECTED REGION ID(VibrationMeter::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	VibrationMeter::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::VibrationMeter()
 *	Description : Constructors for a Tango device
 *                implementing the classVibrationMeter
 */
//--------------------------------------------------------
VibrationMeter::VibrationMeter(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(VibrationMeter::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::constructor_1
}
//--------------------------------------------------------
VibrationMeter::VibrationMeter(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(VibrationMeter::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::constructor_2
}
//--------------------------------------------------------
VibrationMeter::VibrationMeter(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(VibrationMeter::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void VibrationMeter::delete_device()
{
	DEBUG_STREAM << "VibrationMeter::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	if(dev) {
		dev->terminate();
		int *retval;
		dev->join((void**)&retval);
		dev = NULL;
	}

	delete[] attr_SampleFrequency_value_read;

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::delete_device
	delete[] attr_Samples_read;
	delete[] attr_SampleFrequency_read;
	delete[] attr_Period_read;
	delete[] attr_FrequencyStep_read;
	delete[] attr_X_spectrum_read;
	delete[] attr_Y_spectrum_read;
	delete[] attr_Z_spectrum_read;
	delete[] attr_RawX_read;
	delete[] attr_RawY_read;
	delete[] attr_RawZ_read;
}

//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void VibrationMeter::init_device()
{
	DEBUG_STREAM << "VibrationMeter::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call
	set_state(Tango::INIT);

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Samples_read = new Tango::DevULong[1];
	attr_SampleFrequency_read = new SampleFrequencyEnum[1];
	attr_Period_read = new Tango::DevDouble[1];
	attr_FrequencyStep_read = new Tango::DevDouble[1];
	attr_X_spectrum_read = new Tango::DevDouble[40960];
	attr_Y_spectrum_read = new Tango::DevDouble[40960];
	attr_Z_spectrum_read = new Tango::DevDouble[40960];
	attr_RawX_read = new Tango::DevDouble[40960];
	attr_RawY_read = new Tango::DevDouble[40960];
	attr_RawZ_read = new Tango::DevDouble[40960];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(VibrationMeter::init_device) ENABLED START -----*/

	attr_SampleFrequency_value_read = new Tango::DevShort[1];

	// Initialize memory
	memset(attr_RawX_read, 0, sizeof(Tango::DevDouble) * 40960);
	memset(attr_RawY_read, 0, sizeof(Tango::DevDouble) * 40960);
	memset(attr_RawZ_read, 0, sizeof(Tango::DevDouble) * 40960);
	memset(attr_X_spectrum_read, 0, sizeof(Tango::DevDouble) * 40960);
	memset(attr_Y_spectrum_read, 0, sizeof(Tango::DevDouble) * 40960);
	memset(attr_Z_spectrum_read, 0, sizeof(Tango::DevDouble) * 40960);

	//	Initialize device
	try{
		dev = new AdxlDev(this);

	} catch(Tango::DevFailed &e) {
		ERROR_STREAM << "Failed to initialize ADXL355 device. (Error: " << e.errors[0].desc << ")" << endl;
		Tango::Except::re_throw_exception (e, "Initilization failed", "Failed to initialize ADXL355 device", "Picomotor::init_device()");
	}

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::init_device
}

//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void VibrationMeter::get_device_property()
{
	/*----- PROTECTED REGION ID(VibrationMeter::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("bus"));
	dev_prop.push_back(Tango::DbDatum("address"));
	dev_prop.push_back(Tango::DbDatum("disable_fft"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on VibrationMeterClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		VibrationMeterClass	*ds_class =
			(static_cast<VibrationMeterClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize bus from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  bus;
		else {
			//	Try to initialize bus from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  bus;
		}
		//	And try to extract bus value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  bus;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize address from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  address;
		else {
			//	Try to initialize address from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  address;
		}
		//	And try to extract address value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  address;

		//	Try to initialize disable_fft from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  disable_fft;
		else {
			//	Try to initialize disable_fft from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  disable_fft;
		}
		//	And try to extract disable_fft value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  disable_fft;

	}

	/*----- PROTECTED REGION ID(VibrationMeter::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void VibrationMeter::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(VibrationMeter::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	VibrationMeter::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void VibrationMeter::always_executed_hook()
{
	DEBUG_STREAM << "VibrationMeter::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"VibrationMeter::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(VibrationMeter::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void VibrationMeter::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "VibrationMeter::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void VibrationMeter::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "VibrationMeter::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::write_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Samples related method
 *	Description: Number of samples
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VibrationMeter::read_Samples(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_Samples(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_Samples) ENABLED START -----*/

	*attr_Samples_read = dev->getNSamples();

	//	Set the attribute value
	attr.set_value(attr_Samples_read);

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_Samples
}
//--------------------------------------------------------
/**
 *	Write attribute Samples related method
 *	Description: Number of samples
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VibrationMeter::write_Samples(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::write_Samples(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(VibrationMeter::write_Samples) ENABLED START -----*/

	if(w_val > 40960)
		Tango::Except::throw_exception(
					(const char *)"Value too high",
					(const char *)"Value too high. The maximum number of samples is 40960",
					(const char *)"VibrationMeter::always_executed_hook()");

	dev->setNSamples(w_val);

	*attr_Samples_read = dev->getNSamples();
	push_change_event("Samples", attr_Samples_read);

	// Push change event for FrequencyStep
	*attr_FrequencyStep_read = dev->getFrequecyStep();
	push_change_event("FrequencyStep", attr_FrequencyStep_read);

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::write_Samples
}
//--------------------------------------------------------
/**
 *	Read attribute SampleFrequency related method
 *	Description: Sample Frequency
 *
 *	Data type:	Tango::DevEnum (SampleFrequencyEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VibrationMeter::read_SampleFrequency(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_SampleFrequency(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_SampleFrequency) ENABLED START -----*/

	*attr_SampleFrequency_value_read = dev->getDataRate();

	//	Set the attribute value
	attr.set_value(attr_SampleFrequency_value_read);

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_SampleFrequency
}
//--------------------------------------------------------
/**
 *	Write attribute SampleFrequency related method
 *	Description: Sample Frequency
 *
 *	Data type:	Tango::DevEnum (SampleFrequencyEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VibrationMeter::write_SampleFrequency(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::write_SampleFrequency(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	SampleFrequencyEnum	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(VibrationMeter::write_SampleFrequency) ENABLED START -----*/

	dev->setDataRate(static_cast<uint8_t>(w_val));

	*attr_SampleFrequency_value_read = static_cast<Tango::DevShort>(dev->getDataRate());
	push_change_event("SampleFrequency", attr_SampleFrequency_value_read);

	// Push change event for FrequencyStep
	*attr_FrequencyStep_read = dev->getFrequecyStep();
	push_change_event("FrequencyStep", attr_FrequencyStep_read);

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::write_SampleFrequency
}
//--------------------------------------------------------
/**
 *	Read attribute Period related method
 *	Description: Sample period in seconds
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VibrationMeter::read_Period(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_Period(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_Period) ENABLED START -----*/

	*attr_Period_read = dev->getPeriod();

	//	Set the attribute value
	attr.set_value(attr_Period_read);

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_Period
}
//--------------------------------------------------------
/**
 *	Read attribute FrequencyStep related method
 *	Description: Frequecy step of the FFT
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void VibrationMeter::read_FrequencyStep(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_FrequencyStep(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_FrequencyStep) ENABLED START -----*/

	*attr_FrequencyStep_read = dev->getFrequecyStep();

	//	Set the attribute value
	attr.set_value(attr_FrequencyStep_read);

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_FrequencyStep
}
//--------------------------------------------------------
/**
 *	Read attribute X_spectrum related method
 *	Description: Vibration spectrum on X axis
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 40960
 */
//--------------------------------------------------------
void VibrationMeter::read_X_spectrum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_X_spectrum(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_X_spectrum) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_X_spectrum_read, dev->getNSamples());

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_X_spectrum
}
//--------------------------------------------------------
/**
 *	Read attribute Y_spectrum related method
 *	Description: Vibration spectrum on Y axis
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 40960
 */
//--------------------------------------------------------
void VibrationMeter::read_Y_spectrum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_Y_spectrum(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_Y_spectrum) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Y_spectrum_read, dev->getNSamples());

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_Y_spectrum
}
//--------------------------------------------------------
/**
 *	Read attribute Z_spectrum related method
 *	Description: Vibration spectrum on Z axis
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 40960
 */
//--------------------------------------------------------
void VibrationMeter::read_Z_spectrum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_Z_spectrum(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_Z_spectrum) ENABLED START -----*/

	//	Set the attribute value
	attr.set_value(attr_Z_spectrum_read, dev->getNSamples());

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_Z_spectrum
}
//--------------------------------------------------------
/**
 *	Read attribute RawX related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 40960
 */
//--------------------------------------------------------
void VibrationMeter::read_RawX(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_RawX(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_RawX) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RawX_read, dev->getNSamples());

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_RawX
}
//--------------------------------------------------------
/**
 *	Read attribute RawY related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 40960
 */
//--------------------------------------------------------
void VibrationMeter::read_RawY(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_RawY(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_RawY) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RawY_read, dev->getNSamples());

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_RawY
}
//--------------------------------------------------------
/**
 *	Read attribute RawZ related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 40960
 */
//--------------------------------------------------------
void VibrationMeter::read_RawZ(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VibrationMeter::read_RawZ(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(VibrationMeter::read_RawZ) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RawZ_read, dev->getNSamples());

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::read_RawZ
}

//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void VibrationMeter::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(VibrationMeter::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : VibrationMeter::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void VibrationMeter::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(VibrationMeter::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	VibrationMeter::add_dynamic_commands
}

/*----- PROTECTED REGION ID(VibrationMeter::namespace_ending) ENABLED START -----*/

//	Additional Methods

// Constructor
AdxlDev::AdxlDev(VibrationMeter* parent) :
	_parent(parent),
	_dev(NULL),
	_samplerate(0),
	_period(0.0),
	_x_buffer(NULL),
	_y_buffer(NULL),
	_z_buffer(NULL),
	_index(0),
	_fft_p(NULL),
	_fft_in(NULL),
	_fft_out(NULL),
	_terminate(false)
{
	// Create ADXL device
	try {
		_dev = new ADXL355(_parent->bus, _parent->address);
	} catch(ADXLException &e) {
		Tango::Except::throw_exception(
					(const char *)"Failed to initialize ADXL355",
					e.what(),
					(const char *)"AdxlDev::AdxlDev()");
	}

	try {
		_dev->setDataRate(ADXL355_ODR_3P906);
		_samplerate = _dev->getDataRate();
		_period = convertSampleRate(_samplerate);
	} catch(ADXLException &e) {
		Tango::Except::throw_exception(
					(const char *)"Failed to initialize ADXL355",
					e.what(),
					(const char *)"AdxlDev::AdxlDev()");
	}

	// Allocate x_buffer, y_buffer, z_buffer
	_x_buffer = new double[40960];
	_y_buffer = new double[40960];
	_z_buffer = new double[40960];

	// Allocate FFTW buffers
	if(!(_parent->disable_fft)) {
		_fft_in = fftw_alloc_complex(40960);
		_fft_out = fftw_alloc_complex(40960);
	}

	// Start thread
	start_undetached();
}

// Destructor
AdxlDev::~AdxlDev() {
	if(_dev) {
		delete _dev;
		_dev = NULL;
	}
	if(_x_buffer) {
		delete _x_buffer;
		_x_buffer = NULL;
	}
	if(_y_buffer) {
		delete _y_buffer;
		_y_buffer = NULL;
	}
	if(_z_buffer) {
		delete _z_buffer;
		_z_buffer = NULL;
	}
	if(_fft_p) {
		fftw_destroy_plan(_fft_p);
		_fft_p = NULL;
	}
	if(_fft_in) {
		fftw_free(_fft_in);
		_fft_in = NULL;
	}
	if(_fft_out) {
		fftw_free(_fft_out);
		_fft_out = NULL;
	}
}

// Set rate
void AdxlDev::setDataRate(uint8_t rate) {
	try {
		omni_mutex_lock l(_lock);
		_dev->setDataRate(rate);
		_samplerate = _dev->getDataRate();

		// Update period and number of samples
		updatePeriodSamples();

	} catch(ADXLException &e) {
		Tango::Except::throw_exception(
					(const char *)"Failed to set data rate",
					e.what(),
					(const char *)"AdxlDev::setDataRate()");
	}
}

// Update period, samples and FFTW plan
void AdxlDev::updatePeriodSamples() {
	// Update period
	_period = convertSampleRate(_samplerate);

	// Clear buffer
	_index = 0;
	memset(_x_buffer, 0, sizeof(double) * 40960);
	memset(_y_buffer, 0, sizeof(double) * 40960);
	memset(_z_buffer, 0, sizeof(double) * 40960);

	if(!(_parent->disable_fft)) {
		// Update FFTW plan
		if(_fft_p) {
			fftw_destroy_plan(_fft_p);
			_fft_p = NULL;
		}
		_fft_p = fftw_plan_dft_1d(_nsamples, _fft_in, _fft_out, FFTW_FORWARD, FFTW_ESTIMATE);
		_parent->get_logger()->info_stream() << log4tango::LogInitiator::_begin_log << "Updated FFT plan for " << _nsamples << " samples." << endl;
	}
}

// Convert sample rate ID to period
double AdxlDev::convertSampleRate(uint8_t rate) {
	double period = 0.0;
	switch(rate) {
		case ADXL355_ODR_4000:
			period = 2.5E-4;
			break;
		case ADXL355_ODR_2000:
			period = 2.5E-4 * 2;
			break;
		case ADXL355_ODR_1000:
			period = 2.5E-4 * 4;
			break;
		case ADXL355_ODR_500:
			period = 2.5E-4 * 8;
			break;
		case ADXL355_ODR_250:
			period = 2.5E-4 * 16;
			break;
		case ADXL355_ODR_125:
			period = 2.5E-4 * 32;
			break;
		case ADXL355_ODR_62P5:
			period = 2.5E-4 * 64;
			break;
		case ADXL355_ODR_31P25:
			period = 2.5E-4 * 128;
			break;
		case ADXL355_ODR_15P625:
			period = 2.5E-4 * 256;
			break;
		case ADXL355_ODR_7P813:
			period = 2.5E-4 * 512;
			break;
		case ADXL355_ODR_3P906:
			period = 2.5E-4 * 1024;
			break;
		default:
			stringstream msg;
			msg << "Unexpected sample rate ID " << rate;
			Tango::Except::throw_exception(
					(const char *)"Unexpected sample rate",
					msg.str().c_str(),
					(const char *)"AdxlDev::convertSampleRate()");
	}
	return period;
}

// Compute shift and magnitude of FFT
void AdxlDev::computeShiftMagnitude(const fftw_complex* in, double *out, size_t length) {
	size_t n = length/2;
	for(size_t i=0; i<n; i++) {
		out[n+i] = ::sqrt(in[i][0]*in[i][0] + in[i][1]*in[i][1]);
	}
	for(size_t i=n; i<length; i++) {
		out[i-n] = ::sqrt(in[i][0]*in[i][0] + in[i][1]*in[i][1]);
	}
}

// Set integration time
void AdxlDev::setNSamples(uint32_t samples) {
	omni_mutex_lock l(_lock);
	_nsamples = samples;
	updatePeriodSamples();
}

// Main loop function
void* AdxlDev::run_undetached(void *arg) {
	// Starting state
	_parent->get_logger()->info_stream() << log4tango::LogInitiator::_begin_log << " Started monitoring thread." << endl;

	// Start acquisition
	_dev->Start();

	double x = 0, y = 0, z = 0;
	int fifo = 0;

	struct timespec slp;
	slp.tv_sec = 0;
	slp.tv_nsec = 250000;

	bool wait_for_data = false;
	while(!_terminate) {

		try {
			// Lock
			omni_mutex_lock l(_lock);

			// Check if FIFO has samples
			uint8_t samples = _dev->getFifoSamples();

			if(samples > 6) {
				// FIFO has enough samples
				wait_for_data = false;

				// Get acceleration
				_dev->getAcceleration(x, y, z);

				// Store acceleration values
				_x_buffer[_index] = x;
				_y_buffer[_index] = y;
				_z_buffer[_index] = z;
				_index++;
				if(_parent->get_logger()->is_debug_enabled())
					_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Acceleration: X = " << x << ", Y = " << y << ", Z = " << z << " (FIFO: " << fifo << ")" << endl;

				// If we reached _nsamples we should copy and process data
				if(_index >= _nsamples) {

					// Copy data in raw arrays
					memcpy(_parent->attr_RawX_read, _x_buffer, sizeof(double) * _nsamples);
					memcpy(_parent->attr_RawY_read, _y_buffer, sizeof(double) * _nsamples);
					memcpy(_parent->attr_RawZ_read, _z_buffer, sizeof(double) * _nsamples);

					// Send raw events
					try {
						_parent->push_change_event("RawX", _parent->attr_RawX_read, _nsamples);
						_parent->push_change_event("RawY", _parent->attr_RawY_read, _nsamples);
						_parent->push_change_event("RawZ", _parent->attr_RawZ_read, _nsamples);
					} catch(Tango::DevFailed &e) {
						_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Failed to push events for raw data attributes (Error: " << e.errors[0].desc << ")" << endl;
					}

					// If enabled we compute a DFT
					if(!(_parent->disable_fft) && _fft_p) {
						// Copy input X
						for(size_t i=0; i<_nsamples; i++) {
							_fft_in[i][0] = _x_buffer[i];
							_fft_in[i][1] = 0.0;
						}
						fftw_execute(_fft_p);
						computeShiftMagnitude(_fft_out, _parent->attr_X_spectrum_read, _nsamples);

						// Copy input Y
						for(size_t i=0; i<_nsamples; i++) {
							_fft_in[i][0] = _y_buffer[i];
							_fft_in[i][1] = 0.0;
						}
						fftw_execute(_fft_p);
						computeShiftMagnitude(_fft_out, _parent->attr_Y_spectrum_read, _nsamples);

						// Copy input Z
						for(size_t i=0; i<_nsamples; i++) {
							_fft_in[i][0] = _z_buffer[i];
							_fft_in[i][1] = 0.0;
						}
						fftw_execute(_fft_p);
						computeShiftMagnitude(_fft_out, _parent->attr_Z_spectrum_read, _nsamples);

						// Push events
						try {
							_parent->push_change_event("X_spectrum", _parent->attr_X_spectrum_read, _nsamples);
							_parent->push_change_event("Y_spectrum", _parent->attr_Y_spectrum_read, _nsamples);
							_parent->push_change_event("Z_spectrum", _parent->attr_Z_spectrum_read, _nsamples);
						} catch(Tango::DevFailed &e) {
							_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Failed to push events (Error: " << e.errors[0].desc << ")" << endl;
						}
					}

					// Reset counter
					_index = 0;
				}

				// Update state
				_parent->set_state(Tango::ON);

			} else {
				wait_for_data = true;
			}

		} catch(ADXLException &e) {
			// Failed to read acceleration / wait for FIFO
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error in reading loop (Error: " << e.what() << ")" << endl;
			_parent->set_state(Tango::FAULT);
		}

		if(wait_for_data)
			nanosleep(&slp, NULL);
	}

	return (void*)NULL;
}

/*----- PROTECTED REGION END -----*/	//	VibrationMeter::namespace_ending
} //	namespace
