/*----- PROTECTED REGION ID(AnalogProxy::DynAttrUtils.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        AnalogProxyDynAttrUtils.cpp
//
// description : Dynamic attributes utilities file for the AnalogProxy class
//
// project :     Analog proxy
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <AnalogProxy.h>
#include <AnalogProxyClass.h>

/*----- PROTECTED REGION END -----*/	//	AnalogProxy::DynAttrUtils.cpp

//================================================================
//  Attributes managed is:
//================================================================
//  AnalogValue  |  Tango::DevDouble	Scalar
//================================================================

namespace AnalogProxy_ns
{
//=============================================================
//	Add/Remove dynamic attribute methods
//=============================================================

//--------------------------------------------------------
/**
 *	Add a AnalogValue dynamic attribute.
 *
 *  parameter attname: attribute name to be cretated and added.
 */
//--------------------------------------------------------
void AnalogProxy::add_AnalogValue_dynamic_attribute(string attname)
{
	//	Attribute : AnalogValue
	AnalogValueAttrib	*analogvalue = new AnalogValueAttrib(attname);
	Tango::UserDefaultAttrProp	analogvalue_prop;
	analogvalue_prop.set_description("Analog voltage");
	//	label	not set for AnalogValue
	analogvalue_prop.set_unit("V");
	analogvalue_prop.set_standard_unit("V");
	analogvalue_prop.set_display_unit("V");
	analogvalue_prop.set_format("%.02f");
	//	max_value	not set for AnalogValue
	//	min_value	not set for AnalogValue
	//	max_alarm	not set for AnalogValue
	//	min_alarm	not set for AnalogValue
	//	max_warning	not set for AnalogValue
	//	min_warning	not set for AnalogValue
	//	delta_t	not set for AnalogValue
	//	delta_val	not set for AnalogValue
	
	/*----- PROTECTED REGION ID(AnalogProxy::att_AnalogValue_dynamic_attribute) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::att_AnalogValue_dynamic_attribute
	analogvalue->set_default_properties(analogvalue_prop);
	//	Not Polled
	analogvalue->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	analogvalue->set_change_event(true, false);
	AnalogValue_data.insert(make_pair(attname, 0.0));
	add_attribute(analogvalue);
}
//--------------------------------------------------------
/**
 *	remove a AnalogValue dynamic attribute.
 *
 *  parameter attname: attribute name to be removed and added.
 */
//--------------------------------------------------------
void AnalogProxy::remove_AnalogValue_dynamic_attribute(string attname)
{
	remove_attribute(attname, true);
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=AnalogValue_data.find(attname))!=AnalogValue_data.end())
    {
    	/*----- PROTECTED REGION ID(AnalogProxy::remove_AnalogValue_dynamic_attribute) ENABLED START -----*/
    	
    	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::remove_AnalogValue_dynamic_attribute
		AnalogValue_data.erase(ite);
	}
}


//============================================================
//	Tool methods to get pointer on attribute data buffer 
//============================================================
//--------------------------------------------------------
/**
 *	Return a pointer on AnalogValue data.
 *
 *  parameter attname: the specified attribute name.
 */
//--------------------------------------------------------
Tango::DevDouble *AnalogProxy::get_AnalogValue_data_ptr(string &name)
{
	map<string,Tango::DevDouble>::iterator ite;
    if ((ite=AnalogValue_data.find(name))==AnalogValue_data.end())
    {
		TangoSys_OMemStream	tms;
		tms << "Dynamic attribute " << name << " has not been created";
		Tango::Except::throw_exception(
					(const char *)"ATTRIBUTE_NOT_FOUND",
					tms.str().c_str(),
					(const char *)"AnalogProxy::get_AnalogValue_data_ptr()");
    }
	return  &(ite->second);
}

} //	namespace
