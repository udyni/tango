/*----- PROTECTED REGION ID(AnalogProxy.h) ENABLED START -----*/
//=============================================================================
//
// file :        AnalogProxy.h
//
// description : Include file for the AnalogProxy class
//
// project :     Analog proxy
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef AnalogProxy_H
#define AnalogProxy_H

#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <time.h>
#include <sys/time.h>

#include <tango.h>
#include <omnithread.h>

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif

#define FOPS_MAX_RETRY   5  // Max number of retries in file operations


/*----- PROTECTED REGION END -----*/	//	AnalogProxy.h

/**
 *  AnalogProxy class description:
 *    Proxy to read analog values from pseudo-files (e.g. from /sys).
 */

namespace AnalogProxy_ns
{
/*----- PROTECTED REGION ID(AnalogProxy::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class AnalogPolling;

/*----- PROTECTED REGION END -----*/	//	AnalogProxy::Additional Class Declarations

class AnalogProxy : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(AnalogProxy::Data Members) ENABLED START -----*/

//	Add your own data members

	// Polling thread
	AnalogPolling *dev;
	
	// Done setting up dynamic attributes
public:
	bool done_dyn_attr;

/*----- PROTECTED REGION END -----*/	//	AnalogProxy::Data Members

//	Device property data members
public:
	//	AnalogConversion:	Conversion factor from ADC reading to volts (mandatory, if one value is missing the default will be 1.0)
	vector<Tango::DevDouble>	analogConversion;
	//	AnalogFiles:	List of files to read
	vector<string>	analogFiles;
	//	AnalogNames:	Attribute names related to the files. If missing defaults to ANx, with x starting from 0
	vector<string>	analogNames;
	//	Polling:	Polling time in milliseconds
	Tango::DevULong	polling;

	bool	mandatoryNotDefined;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	AnalogProxy(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	AnalogProxy(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	AnalogProxy(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~AnalogProxy() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : AnalogProxy::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

//	Dynamic attribute methods
public:

	/**
	 *	Attribute AnalogValue related methods
	 *	Description: Analog voltage
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar
	 */
	virtual void read_AnalogValue(Tango::Attribute &attr);
	virtual bool is_AnalogValue_allowed(Tango::AttReqType type);
	void add_AnalogValue_dynamic_attribute(string attname);
	void remove_AnalogValue_dynamic_attribute(string attname);
	Tango::DevDouble *get_AnalogValue_data_ptr(string &name);
	map<string,Tango::DevDouble>	   AnalogValue_data;

	//--------------------------------------------------------
	/**
	 *	Method      : AnalogProxy::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:


/*----- PROTECTED REGION ID(AnalogProxy::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	AnalogProxy::Additional Method prototypes
};

/*----- PROTECTED REGION ID(AnalogProxy::Additional Classes Definitions) ENABLED START -----*/

class AnalogPolling : public omni_thread {
public:
	// Constructor
	AnalogPolling(AnalogProxy* parent, const std::vector<string>& files, const std::vector<string>& names, const std::vector<double>& conversion);

	// Destructor
	~AnalogPolling();

	// Copy constructor and assignment operator
	AnalogPolling(const AnalogPolling&) =delete;
	AnalogPolling& operator=(const AnalogPolling&) =delete;

	// Size
	size_t size()const { return _values.size(); }

	// Get analog value
	double getValue(size_t id);

	// Get name
	const char* getName(size_t id)const { return ((id < _names.size()) ? _names[id].c_str() : ""); }

	// Find id
	ssize_t findID(const string& name) { return findID(name.c_str()); }
	ssize_t findID(const char *name);

	// Terminate thread loop
	void terminate() { _terminate = true; }

	// Millisecond sleep
	static void msleep(uint32_t msec);

protected:
	// Main loop
	void *run_undetached(void* ptr);

	// Read analog value from file
	uint16_t readAnalog(size_t id);

	// Re-open a file
	void reOpenFile(size_t id);

private:
	// Parent device
	AnalogProxy* _parent;

	// Termination flag
	bool _terminate;

	// Vector of analog values
	std::vector<uint16_t> _values;

	// Vector of file handles
	std::vector<int> _fids;

	// Vector of attribute names
	std::vector<string> _names;

	// Vector of file names
	std::vector<string> _filenames;

	// Vector of conversion factors
	std::vector<double> _conversion;
	
	// Lock for file access
	omni_mutex _filelock;
	
	// Values for events
	double* _ev_vals;
};

/*----- PROTECTED REGION END -----*/	//	AnalogProxy::Additional Classes Definitions

}	//	End of namespace

#endif   //	AnalogProxy_H
