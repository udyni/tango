/*----- PROTECTED REGION ID(AnalogProxy.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        AnalogProxy.cpp
//
// description : C++ source for the AnalogProxy class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               AnalogProxy are implemented in this file.
//
// project :     Analog proxy
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <AnalogProxy.h>
#include <AnalogProxyClass.h>

/*----- PROTECTED REGION END -----*/	//	AnalogProxy.cpp

/**
 *  AnalogProxy class description:
 *    Proxy to read analog values from pseudo-files (e.g. from /sys).
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace AnalogProxy_ns
{
/*----- PROTECTED REGION ID(AnalogProxy::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	AnalogProxy::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : AnalogProxy::AnalogProxy()
 *	Description : Constructors for a Tango device
 *                implementing the classAnalogProxy
 */
//--------------------------------------------------------
AnalogProxy::AnalogProxy(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(AnalogProxy::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::constructor_1
}
//--------------------------------------------------------
AnalogProxy::AnalogProxy(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(AnalogProxy::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::constructor_2
}
//--------------------------------------------------------
AnalogProxy::AnalogProxy(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(AnalogProxy::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : AnalogProxy::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void AnalogProxy::delete_device()
{
	DEBUG_STREAM << "AnalogProxy::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(AnalogProxy::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	if(dev) {
		int *retval;
		dev->terminate();
		dev->join((void**)&retval);
	}
	dev = NULL;

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : AnalogProxy::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void AnalogProxy::init_device()
{
	DEBUG_STREAM << "AnalogProxy::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(AnalogProxy::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call
	done_dyn_attr = false;

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	if (mandatoryNotDefined)
		return;
	

	/*----- PROTECTED REGION ID(AnalogProxy::init_device) ENABLED START -----*/

	//	Initialize device
	dev = new AnalogPolling(this, analogFiles, analogNames, analogConversion);

	set_state(Tango::ON);

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::init_device
}

//--------------------------------------------------------
/**
 *	Method      : AnalogProxy::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void AnalogProxy::get_device_property()
{
	/*----- PROTECTED REGION ID(AnalogProxy::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("AnalogConversion"));
	dev_prop.push_back(Tango::DbDatum("AnalogFiles"));
	dev_prop.push_back(Tango::DbDatum("AnalogNames"));
	dev_prop.push_back(Tango::DbDatum("Polling"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on AnalogProxyClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		AnalogProxyClass	*ds_class =
			(static_cast<AnalogProxyClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize AnalogConversion from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  analogConversion;
		else {
			//	Try to initialize AnalogConversion from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  analogConversion;
		}
		//	And try to extract AnalogConversion value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  analogConversion;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize AnalogFiles from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  analogFiles;
		else {
			//	Try to initialize AnalogFiles from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  analogFiles;
		}
		//	And try to extract AnalogFiles value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  analogFiles;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize AnalogNames from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  analogNames;
		else {
			//	Try to initialize AnalogNames from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  analogNames;
		}
		//	And try to extract AnalogNames value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  analogNames;

		//	Try to initialize Polling from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  polling;
		else {
			//	Try to initialize Polling from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  polling;
		}
		//	And try to extract Polling value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  polling;

	}

	/*----- PROTECTED REGION ID(AnalogProxy::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : AnalogProxy::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void AnalogProxy::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(AnalogProxy::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	AnalogProxy::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : AnalogProxy::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void AnalogProxy::always_executed_hook()
{
// 	INFO_STREAM << "AnalogProxy::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"AnalogProxy::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(AnalogProxy::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : AnalogProxy::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void AnalogProxy::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
// 	DEBUG_STREAM << "AnalogProxy::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(AnalogProxy::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Read attribute AnalogValue related method
 *	Description: Analog voltage
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void AnalogProxy::read_AnalogValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "AnalogProxy::read_AnalogValue(Tango::Attribute &attr) entering... " << endl;
	Tango::DevDouble	*att_value = get_AnalogValue_data_ptr(attr.get_name());
	/*----- PROTECTED REGION ID(AnalogProxy::read_AnalogValue) ENABLED START -----*/

	// Find ID
	ssize_t id = dev->findID(attr.get_name());

	if(id == -1)
		Tango::Except::throw_exception(
			(const char*)"Bad attribute name",
			(const char*)"Found a bad attribute name",
			(const char*)"AnalogProxy::read_AnalogValue()");

	*att_value = dev->getValue(id);

	//	Set the attribute value
	attr.set_value(att_value);

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::read_AnalogValue
}
//--------------------------------------------------------
/**
 *	Method      : AnalogProxy::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void AnalogProxy::add_dynamic_attributes()
{
	//	Example to add dynamic attribute:
	//	add_AnalogValue_dynamic_attribute("MyAnalogValueAttribute");
	
	/*----- PROTECTED REGION ID(AnalogProxy::add_dynamic_attributes) ENABLED START -----*/

	for(size_t i = 0; i < dev->size(); i++) {
		add_AnalogValue_dynamic_attribute(dev->getName(i));
	}

	done_dyn_attr = true;

	/*----- PROTECTED REGION END -----*/	//	AnalogProxy::add_dynamic_attributes
}


/*----- PROTECTED REGION ID(AnalogProxy::namespace_ending) ENABLED START -----*/

// Constructor
AnalogPolling::AnalogPolling(AnalogProxy *parent, const std::vector<string>& files, const std::vector<string>& names, const std::vector<double>& conversion) :
	_parent(parent),
	_terminate(false),
	_ev_vals(NULL)
{
	// Open all files
	for(size_t i = 0; i < files.size(); i++) {
		// Try to open file
		int fid = ::open(files[i].c_str(), O_RDONLY);
		if(fid != -1) {
			// Open successful
			_fids.push_back(fid);
			_values.push_back(0.0);
			_filenames.push_back(files[i]);

		} else {
			// Open failed
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Error opening file '" << files[i] << "'. Error: " << strerror(errno) << endl;

			// Add fake file to list
			_fids.push_back(-1);
			_values.push_back(0);
			_filenames.push_back("/dev/zero");
		}

		// Add attribute name
		if(names.size() > i) {
			_names.push_back(names[i]);
		} else {
			char name[16];
			snprintf(name, 15, "AN%02zu", i);
			// Build filename
			_names.push_back(name);
		}

		// Add conversion factor
		if(conversion.size() > i)
			_conversion.push_back(conversion[i]);
		else
			_conversion.push_back(1.0);

		// Initialize value to actual reading
		if(_fids[i] != -1) {
			_values[i] = readAnalog(i);
		}
	}

	// Allocate heap memory for event values
	_ev_vals = new double[_values.size()];
	if(!_ev_vals)
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Failed to allocate memory for event values. Events will be disabled." << endl;
	
	// Start thread
	start_undetached();
}


// Destructor
AnalogPolling::~AnalogPolling() {
	// Close all files
	for(size_t i = 0; i < _fids.size(); i++)
		if(_fids[i] != -1)
			::close(_fids[i]);

	// Clear all vectors
	_values.clear();
	_fids.clear();
	_names.clear();
}


// Get analog value
double AnalogPolling::getValue(size_t id) {
	if(id < _values.size() && _fids[id] != -1)
		return _values[id] * _conversion[id];
	else
		return ::nan("");
}


// Find attribute name
ssize_t AnalogPolling::findID(const char* name) {
	for(size_t i = 0; i < _names.size(); i++)
		if(_names[i] == name)
			return i;
	return -1;
}


// Try to close and reopen a file
void AnalogPolling::reOpenFile(size_t id) {
	// Close file
	::close(_fids[id]);
	// Reopen
	_fids[id] = ::open(_filenames[id].c_str(), O_RDONLY);
	if(_fids[id] == -1) {
		// In case of error throw an exception
		TangoSys_OMemStream msg;
		msg << "Failed to re-open file '" << _filenames[id] << "'";
		_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << msg.str() << endl;
		Tango::Except::throw_exception(
			(const char*)"Open failed",
			(const char*)msg.str().c_str(),
			(const char*)"AnalogPolling::reOpenFile()");
	}
}


// Read analog value
uint16_t AnalogPolling::readAnalog(size_t id) {
	char buffer[16];
	uint16_t val = 0;

	if(_fids[id] == -1) {
		return 0;
	}

	omni_mutex_lock sync(this->_filelock);

	size_t count = 0;
	while(true) {
		count++;

		// Seek to the beginning of file
		off_t pos = ::lseek(_fids[id], 0, SEEK_SET);

		if(pos != 0) {
			// Error seeking file
			_parent->get_logger()->warn_stream() << log4tango::LogInitiator::_begin_log << "Failed to seek file '" << _filenames[id] << "'. Trying to reopen file." << endl;
			reOpenFile(id);
		}

		// Read raw value
		ssize_t ret = ::read(_fids[id], buffer, 15);

		if(ret <= 0) {
			// Error reading file
			_parent->get_logger()->warn_stream() << log4tango::LogInitiator::_begin_log << "Failed to read file '" << _filenames[id] << "'. Trying to reopen file." << endl;
			reOpenFile(id);
		} else {
			buffer[ret] = '\0';
			// Convert value
			if(sscanf(buffer, "%hu\n", &val) == 1) {
				// Read successful
				break;
			} else {
				_parent->get_logger()->warn_stream() << log4tango::LogInitiator::_begin_log << "Failed to parse value read from file '" << _filenames[id] << "'" << endl;
			}
		}

		if(count >= FOPS_MAX_RETRY) {
			TangoSys_OMemStream msg;
			msg << "Failed to read analog value from '" << _filenames[id] << "'. Exceeded max number of retries, given up!";
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << msg.str() << endl;
			Tango::Except::throw_exception(
				(const char*)"Read failed",
				(const char*)msg.str().c_str(),
				(const char*)"AnalogPolling::readAnalog()");
		}
	}

	return val;
}


// Millisecond sleep
void AnalogPolling::msleep(uint32_t msec) {
	if(msec <= 0)
		return;
	struct timespec st;
	struct timeval start, stop;
	gettimeofday(&start, NULL);
	// Setup delay
	st.tv_sec = msec / 1000;
	st.tv_nsec = (msec % 1000) * 1000000;

	while(1) {
		int ans = nanosleep(&st, NULL);
		if(ans == -1 && errno == EINTR) {
			// Nanosleep was interrupted by a signal
			gettimeofday(&stop, NULL);
			uint32_t rem = msec - ELAPSED_TIME_MS(start, stop);
			if(rem > 0) {
				st.tv_sec = rem / 1000;
				st.tv_nsec = (rem % 1000) * 1000000;
			} else {
				break;
			}
		} else {
			break;
		}
	}
}


// Main loop
void* AnalogPolling::run_undetached(void* ptr) {

	struct timeval beg, end;

	// Wait for the creation of dynamic attributes
	while(!_parent->done_dyn_attr) {
		// Sleep for 1 second
		msleep(1000);
	}

	while(!_terminate) {
		gettimeofday(&beg, NULL);

		for(size_t i = 0; i < _fids.size(); i++) {
			try {
				if(_fids[i] != -1) {
					uint16_t val = 0;
					try {
						val = readAnalog(i);
					} catch(Tango::DevFailed &e) {
						// Read failed
						_values[i] = 0;
						if(_fids[i] == -1 && _ev_vals != NULL) {
							// If the file is not available any more, we send a nan to all event subscribers
							_ev_vals[i] = ::nan("");
							_parent->push_change_event(_names[i], &(_ev_vals[i]));
						}
						// Skip to next file
						continue;
					}

					// Check if we should fire an event
					if(val != _values[i] && _ev_vals != NULL) {
						// Fire a change event
						_ev_vals[i] = val * _conversion[i];
						_parent->push_change_event(_names[i], &(_ev_vals[i]));
					}
					// Store value
					_values[i] = val;
				}
			} catch(Tango::DevFailed &e) {
				_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "Exception in monitoring thread: ";
				for(size_t i = 0; i < e.errors.length(); i++)
					_parent->get_logger()->error_stream() << "[" << i << "] " << e.errors[i].desc << " (from: " << e.errors[i].origin << ")" << endl;
			}
		}

		// Sleep
		gettimeofday(&end, NULL);
		int elapsed = ELAPSED_TIME_MS(beg, end);
		if(_parent->polling - elapsed > 0)
			msleep(_parent->polling - elapsed);
	}

	int *retval = new int();
	*retval = 0;
	return (void*)retval;
}


/*----- PROTECTED REGION END -----*/	//	AnalogProxy::namespace_ending
} //	namespace
