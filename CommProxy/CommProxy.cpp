/*----- PROTECTED REGION ID(CommProxy.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        CommProxy.cpp
//
// description : C++ source for the CommProxy class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               CommProxy are implemented in this file.
//
// project :     Multipurpose communication proxy
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <CommProxy.h>
#include <CommProxyClass.h>

/*----- PROTECTED REGION END -----*/	//	CommProxy.cpp

/**
 *  CommProxy class description:
 *    Communication proxy for shared serial or TCP communication.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name                      |  Method name
//================================================================
//  State                             |  Inherited (no method)
//  Status                            |  Inherited (no method)
//  Connect                           |  connect
//  Disconnect                        |  disconnect
//  Flush                             |  flush
//  SendCommand                       |  send_command
//  SendCommandWithResponse           |  send_command_with_response
//  SendCommandWithMultilineResponse  |  send_command_with_multiline_response
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace CommProxy_ns
{
/*----- PROTECTED REGION ID(CommProxy::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	CommProxy::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : CommProxy::CommProxy()
 *	Description : Constructors for a Tango device
 *                implementing the classCommProxy
 */
//--------------------------------------------------------
CommProxy::CommProxy(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(CommProxy::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	CommProxy::constructor_1
}
//--------------------------------------------------------
CommProxy::CommProxy(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(CommProxy::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	CommProxy::constructor_2
}
//--------------------------------------------------------
CommProxy::CommProxy(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(CommProxy::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	CommProxy::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void CommProxy::delete_device()
{
	DEBUG_STREAM << "CommProxy::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(CommProxy::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	if(sock)
		delete sock;
	sock = NULL;

	/*----- PROTECTED REGION END -----*/	//	CommProxy::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void CommProxy::init_device()
{
	DEBUG_STREAM << "CommProxy::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(CommProxy::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	CommProxy::init_device_before


	//	Get the device properties from database
	get_device_property();

	//	No longer if mandatory property not set.
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(CommProxy::init_device) ENABLED START -----*/

	force_disconnect = false;

	if(terminator == "pc")
		terminator = "\r\n";
	else if(terminator == "micronix") // Special option for broken Micronix serial protocol...
		terminator = "\n\r";
	else if(terminator == "pfeiffer") // Special option for Pfeiffer Vacuum protocol...
		terminator = "\r";
	else
		terminator = "\n";

	//	Initialize device
	if(deviceType == "serial") {
		sock = new SerialSocket();

	} else if(deviceType == "tcp") {
		sock = new TcpSocket();

	} else {
		TangoSys_OMemStream msg;
		msg << "Device type '" << deviceType << "' is not supported.";
		ERROR_STREAM << "CommProxy::init_device(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Unsupported type",
					msg.str(),
					(const char *)"CommProxy::init_device()");
	}

	if(autoReconnect) {
		try {
			this->connect();
		} catch(Tango::DevFailed &e) {
			set_state(Tango::FAULT);
			set_status("Connection at startup failed.");
		}
	} else {
		set_state(Tango::OFF);
		set_status("Disconnected.");
	}

	/*----- PROTECTED REGION END -----*/	//	CommProxy::init_device
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void CommProxy::get_device_property()
{
	/*----- PROTECTED REGION ID(CommProxy::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	CommProxy::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DeviceAddress"));
	dev_prop.push_back(Tango::DbDatum("Timeout"));
	dev_prop.push_back(Tango::DbDatum("AutoReconnect"));
	dev_prop.push_back(Tango::DbDatum("DeviceType"));
	dev_prop.push_back(Tango::DbDatum("SerialBaud"));
	dev_prop.push_back(Tango::DbDatum("SerialSetup"));
	dev_prop.push_back(Tango::DbDatum("Terminator"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);

		//	get instance on CommProxyClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		CommProxyClass	*ds_class =
			(static_cast<CommProxyClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize DeviceAddress from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceAddress;
		else {
			//	Try to initialize DeviceAddress from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceAddress;
		}
		//	And try to extract DeviceAddress value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceAddress;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize Timeout from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  timeout;
		else {
			//	Try to initialize Timeout from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  timeout;
		}
		//	And try to extract Timeout value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  timeout;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize AutoReconnect from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  autoReconnect;
		else {
			//	Try to initialize AutoReconnect from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  autoReconnect;
		}
		//	And try to extract AutoReconnect value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  autoReconnect;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize DeviceType from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceType;
		else {
			//	Try to initialize DeviceType from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceType;
		}
		//	And try to extract DeviceType value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceType;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize SerialBaud from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serialBaud;
		else {
			//	Try to initialize SerialBaud from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serialBaud;
		}
		//	And try to extract SerialBaud value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialBaud;

		//	Try to initialize SerialSetup from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serialSetup;
		else {
			//	Try to initialize SerialSetup from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serialSetup;
		}
		//	And try to extract SerialSetup value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialSetup;

		//	Try to initialize Terminator from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  terminator;
		else {
			//	Try to initialize Terminator from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  terminator;
		}
		//	And try to extract Terminator value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  terminator;

	}

	/*----- PROTECTED REGION ID(CommProxy::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	CommProxy::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : CommProxy::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void CommProxy::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(CommProxy::check_mandatory_property) ENABLED START -----*/
		//cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	CommProxy::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : CommProxy::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void CommProxy::always_executed_hook()
{
// 	DEBUG_STREAM << "CommProxy::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"CommProxy::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(CommProxy::always_executed_hook) ENABLED START -----*/

	if(!(sock->isConnected())) {
		if(get_state() == Tango::ON) {
			set_state(Tango::FAULT);
			set_status("Connection closed for an error");
		}

		if(autoReconnect && !force_disconnect) {
			// Try to reconnect
			try {
				this->connect();
				set_state(Tango::ON);
				set_status("Reconnected successfully");
			} catch(Tango::DevFailed &e) {
				set_state(Tango::FAULT);
				set_status("Reconnection failed");
			}
		}
	}

	/*----- PROTECTED REGION END -----*/	//	CommProxy::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void CommProxy::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
// 	DEBUG_STREAM << "CommProxy::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(CommProxy::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	CommProxy::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : CommProxy::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void CommProxy::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(CommProxy::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	CommProxy::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Connect related method
 *	Description: Open connection to device
 *
 */
//--------------------------------------------------------
void CommProxy::connect()
{
	DEBUG_STREAM << "CommProxy::Connect()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CommProxy::connect) ENABLED START -----*/

	try {
		sock->connect(deviceAddress);

		if(deviceType == "serial") {
			// Cast socket to serial type
			SerialSocket *temp = static_cast<SerialSocket*>(sock);

			// Convert baud rate to constant
			speed_t baud;
			Tango::DevLong tempbaud = (serialBaud / 9600) * 9600;
			switch(tempbaud) {
				case 9600:
				default:
					baud = B9600;
					break;
				case 19200:
					baud = B19200;
					break;
				case 38400:
					baud = B38400;
					break;
				case 57600:
					baud = B57600;
					break;
				case 115200:
					baud = B115200;
					break;
			}

			// Extract port configuration
			char parity = 'N';
			uint8_t databits = 8;
			uint8_t stopbits = 1;
			if(sscanf(serialSetup.c_str(), "%hhu%c%hhu", &databits, &parity, &stopbits) == 3) {
				temp->configure_port(baud, parity, databits, stopbits);
			} else {
				temp->configure_port(baud);
			}
		}

		force_disconnect = false;
		set_state(Tango::ON);
		set_status("Connection successful");

	} catch(SocketException& e) {
		TangoSys_OMemStream msg;
		msg << "Connection failed (Error: " << e.what() << ")";
		ERROR_STREAM << "CommProxy::Connect(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Initialization failed",
					msg.str(),
					(const char *)"CommProxy::Connect()");
	}

	/*----- PROTECTED REGION END -----*/	//	CommProxy::connect
}
//--------------------------------------------------------
/**
 *	Command Disconnect related method
 *	Description: Close connection to device
 *
 */
//--------------------------------------------------------
void CommProxy::disconnect()
{
	DEBUG_STREAM << "CommProxy::Disconnect()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CommProxy::disconnect) ENABLED START -----*/

	sock->disconnect();
	force_disconnect = true;
	set_state(Tango::OFF);
	set_status("Disconnected.");

	/*----- PROTECTED REGION END -----*/	//	CommProxy::disconnect
}
//--------------------------------------------------------
/**
 *	Command Flush related method
 *	Description: Make sure that the receive buffer is empty.
 *
 */
//--------------------------------------------------------
void CommProxy::flush()
{
// 	DEBUG_STREAM << "CommProxy::Flush()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CommProxy::flush) ENABLED START -----*/

	try {
		sock->flush();

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Flush failed (Error: " << e.what() << ")";
		ERROR_STREAM << "CommProxy::Flush(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Flush failed",
					msg.str(),
					(const char *)"CommProxy::Flush()");
	}

	/*----- PROTECTED REGION END -----*/	//	CommProxy::flush
}
//--------------------------------------------------------
/**
 *	Command SendCommand related method
 *	Description: Send a command that does not expect a response from the device
 *
 *	@param argin Command
 */
//--------------------------------------------------------
void CommProxy::send_command(Tango::DevString argin)
{
// 	DEBUG_STREAM << "CommProxy::SendCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CommProxy::send_command) ENABLED START -----*/

	try {
		// Send command
		std::string cmd = argin;
		cmd += terminator;
		sock->send(cmd.c_str(), cmd.size());

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Command failed (Error: " << e.what() << ")";
		ERROR_STREAM << "CommProxy::SendCommand(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Command failed",
					msg.str(),
					(const char *)"CommProxy::SendCommand()");
	}

	/*----- PROTECTED REGION END -----*/	//	CommProxy::send_command
}
//--------------------------------------------------------
/**
 *	Command SendCommandWithResponse related method
 *	Description: Send a command that expect a response from the device
 *
 *	@param argin Command
 *	@returns Response
 */
//--------------------------------------------------------
Tango::DevString CommProxy::send_command_with_response(Tango::DevString argin)
{
	Tango::DevString argout;
// 	DEBUG_STREAM << "CommProxy::SendCommandWithResponse()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CommProxy::send_command_with_response) ENABLED START -----*/

	try {
		// Send command
		std::string cmd = argin;
		cmd += terminator;
		sock->send(cmd.c_str(), cmd.size());

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Command failed (Error: " << e.what() << ")";
		ERROR_STREAM << "CommProxy::SendCommand(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Command failed",
					msg.str(),
					(const char *)"CommProxy::SendCommand()");
	}

	std::string response = "";
	try {
		// Receive response
		sock->recv_msg(response, terminator.c_str(), timeout);

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Command failed (Error: " << e.what() << ")";
		ERROR_STREAM << "CommProxy::SendCommand(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Command failed",
					msg.str(),
					(const char *)"CommProxy::SendCommand()");
	}

	// Duplicate response
	argout = CORBA::string_dup(response.c_str());

	/*----- PROTECTED REGION END -----*/	//	CommProxy::send_command_with_response
	return argout;
}
//--------------------------------------------------------
/**
 *	Command SendCommandWithMultilineResponse related method
 *	Description: Send a command that expect a multiline response.
 *
 *	@param argin The function takes two arguments passed as strings:
 *               1) the command
 *               2) the timeout to wait for multiple lines in ms (default to 500ms)
 *	@returns The response as an array of strings
 */
//--------------------------------------------------------
Tango::DevVarStringArray *CommProxy::send_command_with_multiline_response(const Tango::DevVarStringArray *argin)
{
	Tango::DevVarStringArray *argout;
// 	DEBUG_STREAM << "CommProxy::SendCommandWithMultilineResponse()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CommProxy::send_command_with_multiline_response) ENABLED START -----*/

	if(argin->length() < 1) {
		ERROR_STREAM << "CommProxy::SendCommand(): Command failed. No command sting supplied." << endl;
		Tango::Except::throw_exception(
					(const char *)"Command failed",
					"Command failed. No command sting supplied.",
					(const char *)"CommProxy::SendCommand()");
	}

	Tango::DevLong tm = 500;
	// Extract input parameters
	if(argin->length() > 1) {
#if SIZEOF_LONG == 4
		if(sscanf((*argin)[1], "%ld", &tm))
#else
		if(sscanf((*argin)[1], "%d", &tm))
#endif
			tm = 500;
	}

	try {
		// Send command
		std::string cmd = (const char*)(*argin)[0];
		cmd += terminator;
		sock->send(cmd.c_str(), cmd.size());

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Command failed (Error: " << e.what() << ")";
		ERROR_STREAM << "CommProxy::SendCommand(): " << msg.str() << endl;
			Tango::Except::throw_exception(
						(const char *)"Command failed",
						msg.str(),
						(const char *)"CommProxy::SendCommand()");
	}

	// Receive multiple line response

	// Timeout structs
	argout = new Tango::DevVarStringArray();

	while(1) {
		std::string response = "";
		try {
			// Receive response
			int ans = sock->recv_msg(response, terminator.c_str(), tm);
			if(ans == -1)
				break;

			// Store response
			argout->length(argout->length()+1);
			(*argout)[argout->length()-1] = CORBA::string_dup(response.c_str());

		} catch(SocketException &e) {
			TangoSys_OMemStream msg;
			msg << "Command failed (Error: " << e.what() << ")";
			ERROR_STREAM << "CommProxy::SendCommand(): " << msg.str() << endl;
				Tango::Except::throw_exception(
							(const char *)"Command failed",
							msg.str(),
							(const char *)"CommProxy::SendCommand()");
		}
	}

	/*----- PROTECTED REGION END -----*/	//	CommProxy::send_command_with_multiline_response
	return argout;
}
//--------------------------------------------------------
/**
 *	Method      : CommProxy::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void CommProxy::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(CommProxy::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	CommProxy::add_dynamic_commands
}

/*----- PROTECTED REGION ID(CommProxy::namespace_ending) ENABLED START -----*/

//	Additional Methods


/*----- PROTECTED REGION END -----*/	//	CommProxy::namespace_ending
} //	namespace
