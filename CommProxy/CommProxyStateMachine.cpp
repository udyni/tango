/*----- PROTECTED REGION ID(CommProxyStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        CommProxyStateMachine.cpp
//
// description : State machine file for the CommProxy class
//
// project :     Multipurpose communication proxy
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <CommProxy.h>

/*----- PROTECTED REGION END -----*/	//	CommProxy::CommProxyStateMachine.cpp

//================================================================
//  States  |  Description
//================================================================


namespace CommProxy_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : CommProxy::is_Connect_allowed()
 *	Description : Execution allowed for Connect attribute
 */
//--------------------------------------------------------
bool CommProxy::is_Connect_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Connect command.
	/*----- PROTECTED REGION ID(CommProxy::ConnectStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CommProxy::ConnectStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::is_Disconnect_allowed()
 *	Description : Execution allowed for Disconnect attribute
 */
//--------------------------------------------------------
bool CommProxy::is_Disconnect_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Disconnect command.
	/*----- PROTECTED REGION ID(CommProxy::DisconnectStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CommProxy::DisconnectStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::is_Flush_allowed()
 *	Description : Execution allowed for Flush attribute
 */
//--------------------------------------------------------
bool CommProxy::is_Flush_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Flush command.
	/*----- PROTECTED REGION ID(CommProxy::FlushStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CommProxy::FlushStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::is_SendCommand_allowed()
 *	Description : Execution allowed for SendCommand attribute
 */
//--------------------------------------------------------
bool CommProxy::is_SendCommand_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SendCommand command.
	/*----- PROTECTED REGION ID(CommProxy::SendCommandStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CommProxy::SendCommandStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::is_SendCommandWithResponse_allowed()
 *	Description : Execution allowed for SendCommandWithResponse attribute
 */
//--------------------------------------------------------
bool CommProxy::is_SendCommandWithResponse_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SendCommandWithResponse command.
	/*----- PROTECTED REGION ID(CommProxy::SendCommandWithResponseStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CommProxy::SendCommandWithResponseStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : CommProxy::is_SendCommandWithMultilineResponse_allowed()
 *	Description : Execution allowed for SendCommandWithMultilineResponse attribute
 */
//--------------------------------------------------------
bool CommProxy::is_SendCommandWithMultilineResponse_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SendCommandWithMultilineResponse command.
	/*----- PROTECTED REGION ID(CommProxy::SendCommandWithMultilineResponseStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CommProxy::SendCommandWithMultilineResponseStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(CommProxy::CommProxyStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	CommProxy::CommProxyStateAllowed.AdditionalMethods

}	//	End of namespace
