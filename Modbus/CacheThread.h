// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//+*********************************************************************
//
// File:        CacheThread.h
//
// Project:     Device Servers in C++
//
// Description: public include file containing definitions and declarations
//		for implementing the thread dedicated to filling the data cache
//
// Author(s);   Emmanuel Taurel
//
// Original:    March 2008
//
// $Log: not supported by cvs2svn $
// Revision 1.5  2008/12/01 08:23:06  taurel
// - Another change in include files
//
// Revision 1.4  2008/12/01 08:02:44  taurel
// - Fix a bug in the WriteCoil command
// - Fix warnings generated by gcc 4.3
//
// Revision 1.3  2008/11/13 15:19:13  jean_coquet
// suppressed includes
//
// Revision 1.2  2008/06/06 13:51:13  taurel
// - Better management of error when using the cache thread
// - Fix open file leak in case of TCP protocol and reconnection to the
// modbus device
//
// Revision 1.1  2008/03/17 14:37:34  taurel
// - Add a data cache for the ReadHoldingRegisters, ReadMultipleCoilsStatus, ReadInputRegisters and ReadInputStatus commands
// - Fix some bugs related to closing the sockets in TCP mode
// - The Address property is used for the modbus ID sent at the frame
// beginning
//
//
// Copyright (c) 2008 by European Synchrotron Radiation Facility,
//                       Grenoble, France
//
//
//
//-*********************************************************************

#ifndef _CacheThread_H
#define _CacheThread_H

#include <Modbus.h>

#ifndef _TG_WINDOWS_
 	#include <sys/time.h>
 	#include <time.h>
#endif

//+=====================================================================
// Class definition
//-=====================================================================

namespace Modbus_ns
{

class Modbus;

typedef enum
{
	RUN = 0,
	SUICIDE
} ThreadCmd;

struct CacheDataBlock
{
	string						cmd_name;
	Tango::DevVarShortArray		in_args;
	bool						err;
	Tango::DevErrorList			errors;
	omni_mutex					*data_block_mutex;
	char						*char_data_cache_ptr;
	short						*short_data_cache_ptr;
	unsigned int				nb_sec;
};

class CacheThread: public omni_thread
{
public:
	CacheThread(vector<CacheDataBlock> &, omni_mutex &, ThreadCmd *, long, Modbus *);
	~CacheThread() {}

	void *run_undetached(void *);
	void start() {start_undetached();}

protected:
	vector<CacheDataBlock>		&data_blocks;
	omni_mutex					&cmd_mutex;
	ThreadCmd					*th_cmd;
	unsigned long				sleeping_time_s;
	unsigned long				sleeping_time_ns;
	Modbus						*the_dev;
};

} // End of namespace

#endif /* _CacheThread_H */
