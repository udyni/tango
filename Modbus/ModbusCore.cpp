// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//+*********************************************************************
//
// File:	ModbusCore.cpp
//
// Project:	Device Servers in C++
//
// Description:	Code for implementing the Modbus protocol class in C++
//		independently of TACO or TANGO.
//
// Author(s);	Andy Gotz
//
// Original:	August 2001
//
// $Log: not supported by cvs2svn $
// Revision 1.3  2011/05/19 14:59:53  jensmeyer
// Added mutex to protect the serial line access in case of serveral modbus devices in the same server, accessing the same serial line.
// Example : RS485 with serveral nodes
//
// Revision 1.2  2010/03/11 11:45:59  buteau
// - change include files order to avoid conflict reagarding WINVER symbol (due to omnithread 4.1.4)
//
// Revision 1.1  2009/02/25 13:58:41  buteau
// - files moved to src subdirectory
//
// Revision 1.9  2008/12/01 08:02:44  taurel
// - Fix a bug in the WriteCoil command
// - Fix warnings generated by gcc 4.3
//
// Revision 1.8  2008/07/18 10:40:26  taurel
// - Add a new TCPTimeout property used during communication between
// the device and the Modbus equipment
//
// Revision 1.7  2008/07/03 09:16:26  jensmeyer
// Added a SocketConnectionSleep property to define the wait time between
// a socket closing and the reopening of a new socket to connect to the hardware.
//
// Revision 1.6  2008/06/06 13:51:13  taurel
// - Better management of error when using the cache thread
// - Fix open file leak in case of TCP protocol and reconnection to the
// modbus device
//
// Revision 1.5  2008/03/17 14:37:35  taurel
// - Add a data cache for the ReadHoldingRegisters, ReadMultipleCoilsStatus, ReadInputRegisters and ReadInputStatus commands
// - Fix some bugs related to closing the sockets in TCP mode
// - The Address property is used for the modbus ID sent at the frame
// beginning
//
// Revision 1.4  2008/02/11 14:29:29  taurel
// - Ported to Windows VC8
//
// Revision 1.3  2005/03/31 15:07:05  jlpons
// Changed namespace name
//
// Revision 1.2  2005/03/01 17:53:35  jlpons
// Few updates.
//
// Revision 1.1  2005/01/14 15:36:55  jlpons
// Initial import
//
// Revision 2.0  2004/12/02 14:23:59  perez
// Split Modbus.cpp
//
//
//
//
//
// Copyright (c) 2001 by European Synchrotron Radiation Facility,
//                       Grenoble, France
//
//
//
//-*********************************************************************

#include <ModbusCore.h>

using namespace std;

// mutex to protect the serial line access in case
// of serveral modbus devices in the same server
// accessing the same serial line.
// Example : RS485 with serveral nodes
omni_mutex serialAccess;


//+======================================================================
// Function:    ModbusCore::ModbusCore()
//
// Description:	create a ModbusCore object
//
// Arg(s) In:
//
// Arg(s) Out:
//-=====================================================================
ModbusCore::ModbusCore (
	char  *serialline_name,
	short protocol,
	short address,
	char  *ip_host,
	long  socketConnectionSleep,
	int tcp_to)
{

	this->serialline_name  = serialline_name;
	this->address          = address;
	this->protocol         = protocol;
	this->ip_host          = ip_host;
	this->connection_sleep = socketConnectionSleep;
	this->ip_timeout       = tcp_to;

	if (protocol == MBUS_RTU || protocol == MBUS_ASCII) {
		sl = new ModbusCoreSL(serialline_name);

	} else if(protocol == MBUS_TCP) {
		// establish a tcp/ip connection to the node using the ASA standard port 502
		TCPOpenSocket();

	} else {
		throw ModbusException("ModbusCore(): protocol not recognised. Must be one of rtu, tcp or ascii");
	}
}


//+=====================================================================
// Function:    ModbusCore::~ModbusCore()
//
// Description: destructor to destroy an object of the Modbus class
//
// input:       none
//
// Output:      none
//
//-=====================================================================
ModbusCore::~ModbusCore()
{
	if (protocol == MBUS_TCP) {
		if (ip_connection == true) {
#ifdef WIN32
			closesocket(ip_socket);
#else
			close(ip_socket);
#endif
		}
	} else if(protocol == MBUS_RTU || protocol == MBUS_ASCII) {
		if(sl)
			delete sl;
	}
}


//+=====================================================================
// Function:    ModbusCore::Status()
//
// Description: return a static status string
//
// input:       none
//
// Output:      none
//
//-=====================================================================
char *ModbusCore::Status() {
	static const char *protocol_type[] = {"None", "RTU", "ASCII", "TCP"};
	static char mess[2048];

	//
	// request parameters
	//
	sprintf(mess,"Modbus node address %d protocol %s ", address, protocol_type[protocol]);
	if (protocol == MBUS_TCP) {
		if (ip_host != NULL) {
			sprintf(mess+strlen(mess)," iphost %s\n", ip_host);
		} else {
			sprintf(mess+strlen(mess)," iphost UNDEFINED !\n");
		}

	} else if (protocol == MBUS_RTU && protocol == MBUS_ASCII) {
		if (serialline_name != NULL) {
			sprintf(mess+strlen(mess)," serialline %s\n", serialline_name);
		} else {
			sprintf(mess+strlen(mess)," serialline UNDEFINED !\n");
		}
	}

	return mess;
}


//+=====================================================================
// Function:    ModbusCore::CalculateCRC()
//
// Description:	Calculate the 16 bit CRC for a Modbus RTU frame.
//
//		This routine is taken from the example in Modicon Modbus
//		Protocol Reference Guide (PI-MBUS-300 Rev E.) page 114.
//		It uses lookup tables to generate the CRC and is should
//		therefore be faster than calculating the CRC.
//-=====================================================================

void ModbusCore::CalculateCRC (uint8_t *frame, size_t frame_length, uint8_t *crc)
{
	/* Table of CRC values for high-order byte */
	static uint8_t auchCRCHi[] = {
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40};

	/* Table of CRC values for low-order byte */
	static uint8_t auchCRCLo[] = {
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
	0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
	0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
	0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
	0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
	0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
	0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
	0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
	0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
	0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
	0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
	0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
	0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
	0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
	0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
	0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
	0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
	0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

	uint8_t uchCRCHi = 0xFF ; /* high CRC byte initialized */
	uint8_t uchCRCLo = 0xFF ; /* low CRC byte initialized  */
	uint8_t uIndex;           /* will index into CRC lookup table */

	while (frame_length--) {        /* pass through message buffer */
		uIndex = uchCRCHi ^ *frame++ ;     /* calculate the CRC */
		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ;
		uchCRCLo = auchCRCLo[uIndex] ;
	}

	crc[0] = uchCRCHi;
	crc[1] = uchCRCLo;
}


//+=====================================================================
// Function:    ModbusCore::TCPOpenSocket()
//
// Description:	Open a TCP/IP socket connection
//
// Arg(s) In:	none
//
// Arg(s) Out:	none
//-=====================================================================

void ModbusCore::TCPOpenSocket(void)
{
	struct timeval timeout;
	fd_set fds_write;
	int socket_err;
#ifdef WIN32
	int serrlen = sizeof socket_err;
#else
	socklen_t serrlen = sizeof socket_err;
#endif


	/* create a socket */
	ip_socket = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);

	/* Set it to non-blocking */
#ifdef WIN32
	unsigned long iMode = 0;
	if (ioctlsocket(ip_socket,FIONBIO,&iMode) != 0) {
#else
	if (fcntl(ip_socket, F_SETFL, O_NONBLOCK) == -1) {
#endif
		ip_connection = false;
#ifdef WIN32
		closesocket(ip_socket);
#else
		close(ip_socket);
#endif
		throw ModbusException("ModbusCore::TCPOpenSocket(): cannot set non-blocking socket (Error: %s)", strerror(errno));
	}

	/* Attempt to initiate a connection */
	ip_address.sin_family = AF_INET;
	ip_address.sin_port = htons(502);
	ip_address.sin_addr.s_addr = inet_addr(ip_host);
	ip_status = connect(ip_socket, (struct sockaddr *)&ip_address, sizeof(struct sockaddr));
	if (ip_status < 0) {
		ip_connection = false;
		throw ModbusException("ModbusCore::TCPOpenSocket(): cannot connect to ip node %s (Error: %s)", ip_host, strerror(errno));
	}

	/* Wait for the connect() to finish, or timeout seconds */
	timeout.tv_usec = 0;
	timeout.tv_sec  = 2;

	FD_ZERO(&fds_write);
	FD_SET(ip_socket, &fds_write);
	if(select(ip_socket + 1, NULL, &fds_write, NULL, &timeout) == -1)  {
		ip_connection = false;
#ifdef WIN32
		closesocket(ip_socket);
#else
		close(ip_socket);
#endif
		throw ModbusException("ModbusCore::TCPOpenSocket(): select() failed (Error: %s)", strerror(errno));
	}

	/* Check if the connect() has finished */
	if (FD_ISSET(ip_socket, &fds_write)) {
#ifdef WIN32
		if (getsockopt(ip_socket, SOL_SOCKET, SO_ERROR, (char *)&socket_err, &serrlen) != 0) {
#else
		if (getsockopt(ip_socket, SOL_SOCKET, SO_ERROR, &socket_err, &serrlen) == -1) {
#endif
			ip_connection = false;
#ifdef WIN32
			closesocket(ip_socket);
#else
	 		close(ip_socket);
#endif
			throw ModbusException("ModbusCore::TCPOpenSocket(): getsockopt() failed (Error: %s)", strerror(errno));
		}

		if (socket_err == 0) {
			ip_connection = true;

#ifdef WIN32
			closesocket(ip_socket);
#else
			close(ip_socket);

			// convert into seconds and ns
			struct timespec ts;
			div_t timing;

			timing = div ((int)connection_sleep, 1000);

			ts.tv_sec  = timing.quot;
			ts.tv_nsec = timing.rem * 1000000;
			nanosleep(&ts,NULL);

#endif
			ip_socket = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
			ip_status = connect(ip_socket, (struct sockaddr *)&ip_address, sizeof(struct sockaddr));
		} else {
			errno = socket_err;
			ip_connection = false;
#ifdef WIN32
			closesocket(ip_socket);
#else
			close(ip_socket);
#endif
			throw ModbusException("ModbusCore::TCPOpenSocket(): connect() failed (Error: %s)", strerror(errno));
		}
	} else  {
		ip_connection = false;
#ifdef WIN32
		closesocket(ip_socket);
#else
		close(ip_socket);
#endif
		throw ModbusException("ModbusCore::TCPOpenSocket(): connect() timed out (Error: %s)", strerror(errno));
	}
}


//+=====================================================================
// Function:    ModbusCore::SendFrame()
//
// Description:	Send a Modbus frame to a node via serial line (RTU/ASCII)
//		or TCP/IP
//-=====================================================================
void ModbusCore::SendFrame (uint8_t *query, size_t query_length)
{
	if (protocol == MBUS_RTU) {
		SendRTUFrame(query, query_length);
	}

	else if (protocol == MBUS_TCP) {
		SendTCPFrame(query, query_length);
	}
}


//+=====================================================================
// Function:    ModbusCore::SendRTUFrame()
//
// Description:	Send a Modbus frame to a node via serial line using the
//		RTU (binary) protocol
//
// Arg(s) In:	unsigned char function - function code
//		short * data - data to send
//		short length - number of data words to send
//
// Arg(s) Out:	none
//-=====================================================================
void ModbusCore::SendRTUFrame (uint8_t *query, size_t query_length)
{
	uint8_t frame[1024], crc[2];
	int status;

	size_t iframe=0;

	frame[iframe++] = address;
	for (size_t i=0; i<query_length; i++) {
		frame[iframe++] = query[i];
	}
	CalculateCRC(frame, query_length+1, crc);
	frame[iframe++] = crc[0];
	frame[iframe++] = crc[1];

	// NOTE: on error throw ModbusException
	sl->write(frame, iframe);
}


//+=====================================================================
// Function:    ModbusCore::SendTCPFrame()
//
// Description:	Send a Modbus frame to a node using the TCP protocol
//-=====================================================================
void ModbusCore::SendTCPFrame (uint8_t *query, size_t query_length)
{
	uint8_t frame[1024];

	size_t iframe = 0;
	frame[iframe++] = address;

	for (size_t i=0; i<4; i++) {
		frame[iframe++] = 0;
	}
	frame[iframe++] = query_length+1; /* no. of bytes */
	frame[iframe++] = address;
	for (size_t i=0; i<query_length; i++) {
		frame[iframe++] = query[i];
	}

	if (ip_connection == true) {
#ifdef WIN32
		const char *tmp_ptr = (const char *)&(frame[0]);
		ip_status = send(ip_socket, tmp_ptr, query_length+7, 0);
#else
		ip_status = send(ip_socket, frame, query_length+7, 0);
#endif
	}

	/*
	* try to reopen and resend the frame if it fails the first time
	* maybe there is a problem with the socket being closed on the
	* node side e.g. for the Beckhoff modules with watchdog enabled
	*
	* - andy 28/11/01
	*/
	if (ip_status != (ssize_t)query_length+7 || ip_connection == false) {
		if (ip_connection == true) {
#ifdef WIN32
			closesocket(ip_socket);
#else
			close(ip_socket);
#endif
		}

		try {
			TCPOpenSocket();
			if (ip_connection == true) {
#ifdef WIN32
				const char *tmp_ptr = (const char *)&(frame[0]);
				ip_status = send(ip_socket, tmp_ptr, query_length+7, 0);
#else
				ip_status = send(ip_socket, frame, query_length+7, 0);
#endif
			}
		} catch(ModbusException &e) {

		}
	}

	if (ip_status != (ssize_t)query_length+7)
		throw ModbusException("ModbusCore::SendTCPFrame(): error while sending frame (Error: %s)", strerror(errno));
}


//+=====================================================================
// Function:    ModbusCore::GetResponse()
//
// Description:	Get response from Modbus node via serial line (RTU/ASCII)
//		or TCP/IP
//
// Arg(s) In:	short * data - data to send
//		short length - number of data words to send
//
// Arg(s) Out:	none
//-=====================================================================
void ModbusCore::GetResponse (uint8_t *response, size_t response_length)
{
	if (protocol == MBUS_RTU) {
		GetRTUResponse(response, response_length);
	}

	else if (protocol == MBUS_TCP) {
		GetTCPResponse(response, response_length);
	}
}


//+=====================================================================
// Function:    ModbusCore::GetRTUResponse()
//
// Description:	Get response from Modbus node via serial line using the
//		RTU (binary) protocol
//
// Arg(s) In:	short * data - data to send
//		short length - number of data words to send
//
// Arg(s) Out:	none
//-=====================================================================
void ModbusCore::GetRTUResponse (uint8_t *response, size_t response_length)
{
	uint8_t frame[1024], crc[2];

	size_t ncharexp = 2, nchar = 0;
	sl->read(frame, ncharexp, &nchar);

	if (frame[1] & 0x80)  {
		ncharexp = 3;
		sl->read(frame, ncharexp, &nchar);

		throw ModbusException("ModbusCore::GetRTUResponse(): Modbus error %d", int(frame[0]));
	}

	response[0] = frame[1];
	/* function code echoed correctly, read rest of response */

	ncharexp = (response_length+1);
	sl->read((frame+2), ncharexp, &nchar);

	if( ncharexp != nchar ) {
		throw ModbusException("ModbusCore::GetRTUResponse(): missing characters. Expecting %d, received %d", ncharexp, nchar);
	}

	// CRC
	CalculateCRC(frame, nchar, crc);

	if ((crc[0] != frame[nchar]) && (crc[1] != frame[nchar+1])) {
		throw ModbusException("ModbusCore::GetRTUResponse(): invlid CRC");
	}

	for (size_t i=1; i<response_length; i++) {
		response[i] = frame[i+1];
	}
}


//+=====================================================================
// Function:    ModbusCore::GetTCPResponse()
//
// Description:	Get response from Modbus node via ethernet using the
//		TCP protocol
//
// Arg(s) In:	short * data - data to send
//		short length - number of data words to send
//
// Arg(s) Out:	none
//-=====================================================================
void ModbusCore::GetTCPResponse (uint8_t *response, size_t response_length)
{
	uint8_t frame[1024];
	int status;
	struct timeval timeout = {this->ip_timeout, 0};
	fd_set fds;

	FD_ZERO(&fds);
	FD_SET(ip_socket, &fds);
	status = select(ip_socket+1, &fds, NULL, NULL, &timeout);

	if (status < 0) {
		throw ModbusException("ModbusCore::GetTCPResponse(): failed to get response (Error: %s)", strerror(errno));
	}

	if (status == 0) {
		throw ModbusException("ModbusCore::GetTCPResponse(): timed out");
	}

	if (!FD_ISSET(ip_socket, &fds)) {
		throw ModbusException("ModbusCore::GetTCPResponse(): select() failed");
	}

#ifdef WIN32
	char *tmp_ptr = (char *)&(frame[0]);
	status = recv(ip_socket, tmp_ptr, 1024, 0);
#else
	status = recv(ip_socket, frame, 1024, 0);
#endif
	if (status == 0) {
		throw ModbusException("ModbusCore::GetTCPResponse(): recv() failed");
	}

	if (frame[7] & 0x80) {
		throw ModbusException("ModbusCore::GetTCPResponse(): Modbus error %d", int(frame[8]));
	}

	for (size_t i=0; i<response_length+1; i++) {
		response[i] = frame[i+7];
	}
}


//+=====================================================================
// Function:    ModbusCore::SendGet()
//
// Description:	Send a Modbus frame and get its answer
//
// Arg(s) In:	short * data - data to send
//		short length - number of data words to send
//
// Arg(s) Out:	none
//-=====================================================================
void ModbusCore::SendGet(uint8_t *query, size_t query_length, uint8_t *response, size_t response_length)
{

	_query = query;
	_query_length = query_length;


	// For the serial lne protocol, protect against
	// unsynchronized writing and reading
	if (protocol != MBUS_TCP) {
		serialAccess.lock();
	}

	omni_mutex_lock oml(modb_access);

	try {

		SendFrame(query, query_length);

	} catch(ModbusException &e) {
		if(protocol == MBUS_TCP) {
#ifdef WIN32
			closesocket(ip_socket);
#else
			close(ip_socket);
#endif
			TCPOpenSocket();
		} else {
			serialAccess.unlock();
		}
		throw e;
	}

	try {
		GetResponse(response, response_length);


	} catch(ModbusException &e) {
		if(protocol == MBUS_TCP) {
#ifdef WIN32
			closesocket(ip_socket);
#else
			close(ip_socket);
#endif
			TCPOpenSocket();
		} else {
			serialAccess.unlock();
		}
		throw e;
	}

	if(protocol != MBUS_TCP) {
		serialAccess.unlock();
	}
}


//+=====================================================================
// Function:    ModbusCore::Send()
//
// Description:	Send a Modbus frame, does not wait for the answer
//
// Arg(s) In:	short * data - data to send
//		short length - number of data words to send
//
// Arg(s) Out:	none
//-=====================================================================
void ModbusCore::Send(uint8_t *query, size_t query_length)
{
	// For the serial lne protocol, protect against
	// unsynchronized writing and reading
	if (protocol != MBUS_TCP) {
		serialAccess.lock();
	}

	omni_mutex_lock oml(modb_access);

	try {
		SendFrame(query, query_length);

	} catch(ModbusException &e) {
		if(protocol == MBUS_TCP) {
#ifdef WIN32
			closesocket(ip_socket);
#else
			close(ip_socket);
#endif
			TCPOpenSocket();
		} else {
			serialAccess.unlock();
		}
		throw e;
	}

	if(protocol != MBUS_TCP) {
		serialAccess.unlock();
	}
}
