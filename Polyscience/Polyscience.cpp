/*----- PROTECTED REGION ID(Polyscience.cpp) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//=============================================================================
//
// file :        Polyscience.cpp
//
// description : C++ source for the Polyscience class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Polyscience are implemented in this file.
//
// project :     Polyscience series 6000
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Polyscience.h>
#include <PolyscienceClass.h>
#include <cmath>
#include <iomanip>

/*----- PROTECTED REGION END -----*/	//	Polyscience.cpp

/**
 *  Polyscience class description:
 *    Device server to control a Polyscience series 6000 chiller
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Start         |  start
//  Stop          |  stop
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Temperature  |  Tango::DevDouble	Scalar
//  Setpoint     |  Tango::DevDouble	Scalar
//  Flow         |  Tango::DevDouble	Scalar
//================================================================

namespace Polyscience_ns
{
/*----- PROTECTED REGION ID(Polyscience::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Polyscience::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Polyscience::Polyscience()
 *	Description : Constructors for a Tango device
 *                implementing the classPolyscience
 */
//--------------------------------------------------------
Polyscience::Polyscience(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Polyscience::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	Polyscience::constructor_1
}
//--------------------------------------------------------
Polyscience::Polyscience(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Polyscience::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	Polyscience::constructor_2
}
//--------------------------------------------------------
Polyscience::Polyscience(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Polyscience::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	Polyscience::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Polyscience::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Polyscience::delete_device()
{
	DEBUG_STREAM << "Polyscience::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Polyscience::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	if(_dev) {
		_dev->terminate();
		int *retval = NULL;
		_dev->join((void**)&retval);
		_dev = NULL;
	}

	/*----- PROTECTED REGION END -----*/	//	Polyscience::delete_device
	delete[] attr_Temperature_read;
	delete[] attr_Setpoint_read;
	delete[] attr_Flow_read;
}

//--------------------------------------------------------
/**
 *	Method      : Polyscience::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Polyscience::init_device()
{
	DEBUG_STREAM << "Polyscience::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Polyscience::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	Polyscience::init_device_before

	//	Get the device properties from database
	get_device_property();

	attr_Temperature_read = new Tango::DevDouble[1];
	attr_Setpoint_read = new Tango::DevDouble[1];
	attr_Flow_read = new Tango::DevDouble[1];
	//	No longer if mandatory property not set.
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(Polyscience::init_device) ENABLED START -----*/

	set_state(Tango::INIT);

	//	Start monitoring thread
	_dev = new PolyMonitor(proxy.c_str(), this);

	/*----- PROTECTED REGION END -----*/	//	Polyscience::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Polyscience::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Polyscience::get_device_property()
{
	/*----- PROTECTED REGION ID(Polyscience::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	Polyscience::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("proxy"));
	dev_prop.push_back(Tango::DbDatum("polling"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);

		//	get instance on PolyscienceClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PolyscienceClass	*ds_class =
			(static_cast<PolyscienceClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize proxy from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  proxy;
		else {
			//	Try to initialize proxy from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  proxy;
		}
		//	And try to extract proxy value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  proxy;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize polling from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  polling;
		else {
			//	Try to initialize polling from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  polling;
		}
		//	And try to extract polling value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  polling;

	}

	/*----- PROTECTED REGION ID(Polyscience::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	Polyscience::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : Polyscience::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void Polyscience::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(Polyscience::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	Polyscience::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : Polyscience::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Polyscience::always_executed_hook()
{
// 	DEBUG_STREAM << "Polyscience::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"Polyscience::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(Polyscience::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	Polyscience::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Polyscience::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Polyscience::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
// 	DEBUG_STREAM << "Polyscience::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Polyscience::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Polyscience::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Polyscience::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Polyscience::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
// 	DEBUG_STREAM << "Polyscience::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Polyscience::write_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Polyscience::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Temperature related method
 *	Description: Actual temperature of the cooling circuit
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Polyscience::read_Temperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Polyscience::read_Temperature(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Polyscience::read_Temperature) ENABLED START -----*/

	*attr_Temperature_read = _dev->getTemperature();

	//	Set the attribute value
	attr.set_value(attr_Temperature_read);

	/*----- PROTECTED REGION END -----*/	//	Polyscience::read_Temperature
}
//--------------------------------------------------------
/**
 *	Read attribute Setpoint related method
 *	Description: Temperature setpoint
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Polyscience::read_Setpoint(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Polyscience::read_Setpoint(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Polyscience::read_Setpoint) ENABLED START -----*/

	*attr_Setpoint_read = _dev->getSetpoint();

	//	Set the attribute value
	attr.set_value(attr_Setpoint_read);

	/*----- PROTECTED REGION END -----*/	//	Polyscience::read_Setpoint
}
//--------------------------------------------------------
/**
 *	Write attribute Setpoint related method
 *	Description: Temperature setpoint
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Polyscience::write_Setpoint(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Polyscience::write_Setpoint(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Polyscience::write_Setpoint) ENABLED START -----*/

	_dev->setSetpoint(w_val);

	/*----- PROTECTED REGION END -----*/	//	Polyscience::write_Setpoint
}
//--------------------------------------------------------
/**
 *	Read attribute Flow related method
 *	Description: Water flow in liter per minute
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Polyscience::read_Flow(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Polyscience::read_Flow(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Polyscience::read_Flow) ENABLED START -----*/

	*attr_Flow_read = _dev->getFlow();

	//	Set the attribute value
	attr.set_value(attr_Flow_read);

	/*----- PROTECTED REGION END -----*/	//	Polyscience::read_Flow
}

//--------------------------------------------------------
/**
 *	Method      : Polyscience::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Polyscience::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Polyscience::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	Polyscience::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Start related method
 *	Description:
 *
 */
//--------------------------------------------------------
void Polyscience::start()
{
	DEBUG_STREAM << "Polyscience::Start()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Polyscience::start) ENABLED START -----*/

	_dev->start();

	/*----- PROTECTED REGION END -----*/	//	Polyscience::start
}
//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description:
 *
 */
//--------------------------------------------------------
void Polyscience::stop()
{
	DEBUG_STREAM << "Polyscience::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Polyscience::stop) ENABLED START -----*/

	_dev->stop();

	/*----- PROTECTED REGION END -----*/	//	Polyscience::stop
}
//--------------------------------------------------------
/**
 *	Method      : Polyscience::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Polyscience::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Polyscience::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	Polyscience::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Polyscience::namespace_ending) ENABLED START -----*/

//	Additional Methods


// Constructor
PolyMonitor::PolyMonitor(const char* device, Polyscience* parent) : _terminate(false), _parent(parent), starting(false) {
	// Connect to communication proxy
	_device = new Tango::DeviceProxy(device);
	msleep(100);
	_device->command_inout("Flush");

	// Clear starting timestamp
	memset(&st_time, 0, sizeof(struct timeval));

	// Initialize values
	try {
		_temperature = readTemperature();
		_flow = readFlow();
	} catch(Tango::DevFailed& e) {
		_temperature = nan("");
		_flow = nan("");
	}

	try {
		_setpoint = readSetpoint();
	} catch(Tango::DevFailed &e) {
		_setpoint = nan("");
	}

	// Start thread
	start_undetached();
}

// Destructor
PolyMonitor::~PolyMonitor() {
	if(_device) {
		delete _device;
	}
}

// Send a command that expect a response
std::string PolyMonitor::SendCommandWithResponse(const std::string& command) {
	std::string response = "";
	if(_device) {
		Tango::DeviceData din;
		Tango::DeviceData dout;
		din << command.c_str();

		// Send command
		{
			omni_mutex_lock access_lock(this->_lock);

			if(_parent->get_logger()->is_debug_enabled()) {
				_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Sending command: " << command;
			}

			// First flush the com device
			_device->command_inout("Flush");

			// Then send the command
			dout = _device->command_inout("SendCommandWithResponse", din);

			// Extract response
			dout >> response;

			if(_parent->get_logger()->is_debug_enabled()) {
				_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Answer: " << response << endl;
			}
		}
	}
	return response;
}

// Read state
int PolyMonitor::readState() {
	std::string rsp = SendCommandWithResponse("RF");
	try {
		return std::stoi(rsp, NULL);

	} catch(std::exception &e) {
		Tango::Except::throw_exception(
			(const char *)"Conversion failed",
			e.what(),
			(const char *)"PolyMonitor::getSetpoint");
	}
}

bool PolyMonitor::checkRunning() {
	std::string rsp = SendCommandWithResponse("RW");
	try {
		return bool(std::stoi(rsp, NULL));

	} catch(std::exception &e) {
		Tango::Except::throw_exception(
			(const char *)"Conversion failed",
			e.what(),
			(const char *)"PolyMonitor::getSetpoint");
	}
}

// Setpoint
void PolyMonitor::setSetpoint(double temperature) {
	std::stringstream cmd;
	cmd << "SS" << std::fixed << std::setprecision(1) << temperature;
	std::string rsp = SendCommandWithResponse(cmd.str().c_str());

	// Check response
	if(rsp == "!") {
		// Wait
		msleep(100);
		// Check setpoint
		double setpoint = readSetpoint();
		if(fabs(setpoint - temperature) > 0.1) {
			std::stringstream msg;
			msg << "Configuration failed (" << setpoint << " != " << temperature << ")";
			Tango::Except::throw_exception(
				(const char *)"Setpoint failed",
				msg.str(),
				(const char *)"PolyMonitor::setSetpoint");
		}
		_setpoint = setpoint;
		_parent->push_change_event("Setpoint", &_setpoint);

	} else {
		Tango::Except::throw_exception(
			(const char *)"Setpoint failed",
			(const char *)"Failed to configure setpoint",
			(const char *)"PolyMonitor::setSetpoint");
	}
}

double PolyMonitor::readSetpoint() {
	std::string rsp = SendCommandWithResponse("RS");
	try {
		return std::stod(rsp, NULL);

	} catch(std::exception &e) {
		Tango::Except::throw_exception(
			(const char *)"Conversion failed",
			e.what(),
			(const char *)"PolyMonitor::getSetpoint");
	}
}

// Temperature
double PolyMonitor::readTemperature() {
	std::string rsp = SendCommandWithResponse("RT");
	try {
		return std::stod(rsp, NULL);

	} catch(std::exception &e) {
		Tango::Except::throw_exception(
			(const char *)"Conversion failed",
			e.what(),
			(const char *)"PolyMonitor::getSetpoint");
	}
}

// Flow
double PolyMonitor::readFlow() {
	std::string rsp = SendCommandWithResponse("RL");
	try {
		return std::stod(rsp, NULL);

	} catch(std::exception &e) {
		Tango::Except::throw_exception(
			(const char *)"Conversion failed",
			e.what(),
			(const char *)"PolyMonitor::getSetpoint");
	}
}


// Main loop function
void* PolyMonitor::run_undetached(void *arg) {
	// Starting state
	if(_parent) {
		_parent->set_state(Tango::STANDBY);
		_parent->get_logger()->info_stream() << log4tango::LogInitiator::_begin_log << "Started monitoring thread." << endl;
	}

	int index = 0;

	struct timeval begin, end;
	while(!_terminate) {

		gettimeofday(&begin, NULL);

		std::string msg = "";
		Tango::DevState tango_state = Tango::UNKNOWN;

		// Get status
		try {
			int state = readState();

			if(_parent->get_logger()->is_debug_enabled()) {
				_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Polled chiller state: " << state << endl;
			}

			if(state == 0) {
				// Chiller is on
				tango_state = Tango::RUNNING;
				msg = "Chiller running";

				// Check if we have a reading of the setpoint
				if(isnan(_setpoint)) {
					_setpoint = readSetpoint();
				}

			} else if(state == 19) {
				// Chiller is in standby
				tango_state = Tango::STANDBY;
				msg = "Chiller in standby";

			} else {
				switch(state) {
					case 1:
						msg = "Factory reserved";
						tango_state = Tango::FAULT;
						break;

					case 2:
						msg = "Low limit temperature alarm";
						tango_state = Tango::ALARM;
						break;

					case 3:
						msg = "High limit temperature alarm";
						tango_state = Tango::ALARM;
						break;

					case 4:
						msg = "Over-temperature protection alarm";
						tango_state = Tango::ALARM;
						break;

					case 5:
						msg = "Low liquid level alarm";
						tango_state = Tango::ALARM;
						break;

					case 6:
						msg = "High bath temperature alarm";
						tango_state = Tango::ALARM;
						break;

					case 7:
						msg = "Low flow alarm";
						tango_state = Tango::ALARM;
						break;

					case 8:
						msg = "High pressure alarm";
						tango_state = Tango::ALARM;
						break;

					case 9:
						msg = "System fault";
						tango_state = Tango::FAULT;
						break;

					case 10:
						msg = "Electronic power component fault (Triac)";
						tango_state = Tango::FAULT;
						break;

					case 11:
						msg = "Internal probe fault";
						tango_state = Tango::FAULT;
						break;

					case 12:
						msg = "External temperature probe fault";
						tango_state = Tango::FAULT;
						break;

					case 13:
						msg = "Communications fault";
						tango_state = Tango::FAULT;
						break;

					case 14:
						msg = "ADC fault, internal probe";
						tango_state = Tango::FAULT;
						break;

					case 15:
						msg = "ADC fault, external probe";
						tango_state = Tango::FAULT;
						break;

					case 16:
						msg = "Front panel high ambient temperature alarm";
						tango_state = Tango::ALARM;
						break;

					case 17:
						msg = "Rear panel high ambient temperature alarm";
						tango_state = Tango::ALARM;
						break;

					case 18:
						msg = "Mysterious error code 18";
						tango_state = Tango::ALARM;
						break;

					default:
						msg = "Unknown error code";
						tango_state = Tango::FAULT;
						break;
				}
			}
		} catch(Tango::DevFailed &e) {
			if(starting) {
				// Just after starting the state command may fail. We wait 5 seconds after start command before setting fault state
				gettimeofday(&end, NULL);
				int elapsed = ELAPSED_TIME_MS(st_time, end);
				if(elapsed > 5000) {
					starting = false;
				} else {
					msleep(500);
					continue;
				}
			}

			tango_state = Tango::FAULT;
			std::stringstream message;
			message << "Failed to poll chiller status (Error: " << e.errors[0].desc << ")";
			msg = message.str();

			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << " Failed to poll chiller status." << endl;
			for(size_t i = 0; i < e.errors.length(); i++) {
				_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "[" << (i+1) << "] " << e.errors[i].desc << endl;
			}
		}

		// Poll parameter
		if(tango_state != Tango::FAULT) {
			try {
				double val = 0.0;
				switch(index) {
					case 0:
						// Poll temperature
						val = readTemperature();
						if(val != _temperature) {
							_temperature = val;
							_parent->push_change_event("Temperature", &_temperature);
						}
						if(_parent->get_logger()->is_debug_enabled()) {
							_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Polled chiller temperature: " << _temperature << endl;
						}
						break;

					case 1:
						// Poll flow
						val = readFlow();
						if(val != _flow) {
							_flow = val;
							_parent->push_change_event("Flow", &_flow);
						}
						if(_parent->get_logger()->is_debug_enabled()) {
							_parent->get_logger()->debug_stream() << log4tango::LogInitiator::_begin_log << "Polled chiller flow: " << _flow << endl;
						}
						break;

					default:
						break;
				}

				index++;
				if(index > 1)
					index = 0;

			} catch(Tango::DevFailed &e) {
				tango_state = Tango::ALARM;
				std::stringstream message;
				message << "Failed to poll chiller attribute (Error: " << e.errors[0].desc << ")";
				msg = message.str();

				_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << " Failed to poll chiller attribute." << endl;
				for(size_t i = 0; i < e.errors.length(); i++) {
					_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "[" << (i+1) << "] " << e.errors[i].desc << endl;
				}
			}
		}

		if(tango_state == Tango::FAULT) {
			// Try to send a stop command
			try {
				this->stop();
			} catch(Tango::DevFailed &e) {
				// NOOP
			}
		}

		// Update device state and status
		_parent->set_state(tango_state);
		_parent->set_status(msg);

		// Sleep
		gettimeofday(&end, NULL);

		int elapsed = ELAPSED_TIME_MS(begin, end);

		if(elapsed < (int)_parent->polling)
			msleep(_parent->polling - elapsed);
	}

	return (void*)NULL;
}

// Start chiller
void PolyMonitor::start() {
	bool is_running = checkRunning();

	if(!is_running) {
		starting = true;
		gettimeofday(&st_time, NULL);

		std::string rsp = SendCommandWithResponse("SO1");
		if(rsp != "!") {
			Tango::Except::throw_exception(
				(const char *)"Start failed",
				(const char *)"Failed to start chiller",
				(const char *)"PolyMonitor::start()");
		}
	} else {
		Tango::Except::throw_exception(
			(const char *)"Start failed",
			(const char *)"Chiller alredy running",
			(const char *)"PolyMonitor::start()");
	}
}

// Stop chiller
void PolyMonitor::stop() {
	bool is_running = checkRunning();

	if(is_running) {
		std::string rsp = SendCommandWithResponse("SO0");
		if(rsp != "!") {
			Tango::Except::throw_exception(
				(const char *)"Stop failed",
				(const char *)"Failed to stop chiller",
				(const char *)"PolyMonitor::stop()");
		}
	} else {
		Tango::Except::throw_exception(
			(const char *)"Stop failed",
			(const char *)"Chiller already in standby",
			(const char *)"PolyMonitor::stop()");
	}
}

// Millisecond sleep
void PolyMonitor::msleep(uint32_t msec) {
	if(msec <= 0)
		return;
	struct timespec st;
	struct timeval start, stop;
	gettimeofday(&start, NULL);
	// Setup delay
	st.tv_sec = msec / 1000;
	st.tv_nsec = (msec % 1000) * 1000000;

	while(1) {
		int ans = nanosleep(&st, NULL);
		if(ans == -1 && errno == EINTR) {
			// Nanosleep was interrupted by a signal
			gettimeofday(&stop, NULL);
			uint32_t rem = msec - ELAPSED_TIME_MS(start, stop);
			if(rem > 0) {
				st.tv_sec = rem / 1000;
				st.tv_nsec = (rem % 1000) * 1000000;
			} else {
				break;
			}
		} else {
			break;
		}
	}
}

/*----- PROTECTED REGION END -----*/	//	Polyscience::namespace_ending
} //	namespace
