/*----- PROTECTED REGION ID(GpioSwitch.h) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//=============================================================================
//
// file :        GpioSwitch.h
//
// description : Include file for the GpioSwitch class
//
// project :     GpioSwitch
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef GpioSwitch_H
#define GpioSwitch_H

#include <tango.h>
#include <gpio.h>

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif


/*----- PROTECTED REGION END -----*/	//	GpioSwitch.h

/**
 *  GpioSwitch class description:
 *    Switch controlled through standard Linux GPIO
 */

namespace GpioSwitch_ns
{
/*----- PROTECTED REGION ID(GpioSwitch::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class GpioMonitor;

/*----- PROTECTED REGION END -----*/	//	GpioSwitch::Additional Class Declarations

class GpioSwitch : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(GpioSwitch::Data Members) ENABLED START -----*/

//	Add your own data members
    GpioMonitor* _dev;

/*----- PROTECTED REGION END -----*/	//	GpioSwitch::Data Members

//	Device property data members
public:
	//	control_gpio:	GPIO pin number to control the switch
	Tango::DevShort	control_gpio;
	//	check_gpio:	GPIO line to check switch status (optional, set to -1 to disable)
	Tango::DevShort	check_gpio;
	//	polling:	Polling period
	Tango::DevULong	polling;

	bool	mandatoryNotDefined;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	GpioSwitch(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	GpioSwitch(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	GpioSwitch(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~GpioSwitch() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : GpioSwitch::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : GpioSwitch::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command On related method
	 *	Description:
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description:
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : GpioSwitch::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(GpioSwitch::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	GpioSwitch::Additional Method prototypes
};

/*----- PROTECTED REGION ID(GpioSwitch::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class GpioMonitor : public omni_thread {
public:
	// Constructor
	GpioMonitor(short control_gpio, short check_gpio, GpioSwitch* parent);

	// Destructor
	~GpioMonitor();

	// Terminate
	void terminate() { _terminate = true; }

	// Start
	void on();

	// Stop
	void off();

protected:
	// Main loop function
	void* run_undetached(void *arg);

	// Millisecond sleep
	static void msleep(uint32_t msec);

private:
	// Terminate flag
	bool _terminate;

	// Access lock
	omni_mutex _lock;

	// Parent device
	GpioSwitch* _parent;

	// GPIO pins
	GPIO* _dev;
	GPIO* _check;
};

/*----- PROTECTED REGION END -----*/	//	GpioSwitch::Additional Classes Definitions

}	//	End of namespace

#endif   //	GpioSwitch_H
