/*----- PROTECTED REGION ID(GpioSwitch.cpp) ENABLED START -----*/
// kate: replace-tabs off; indent-width 4; indent-mode cstyle; remove-trailing-spaces all; tab-indents on; tab-width 4; indent-width 4
//=============================================================================
//
// file :        GpioSwitch.cpp
//
// description : C++ source for the GpioSwitch class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               GpioSwitch are implemented in this file.
//
// project :     GpioSwitch
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <GpioSwitch.h>
#include <GpioSwitchClass.h>

/*----- PROTECTED REGION END -----*/	//	GpioSwitch.cpp

/**
 *  GpioSwitch class description:
 *    Switch controlled through standard Linux GPIO
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  On            |  on
//  Off           |  off
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace GpioSwitch_ns
{
/*----- PROTECTED REGION ID(GpioSwitch::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	GpioSwitch::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::GpioSwitch()
 *	Description : Constructors for a Tango device
 *                implementing the classGpioSwitch
 */
//--------------------------------------------------------
GpioSwitch::GpioSwitch(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(GpioSwitch::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::constructor_1
}
//--------------------------------------------------------
GpioSwitch::GpioSwitch(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(GpioSwitch::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::constructor_2
}
//--------------------------------------------------------
GpioSwitch::GpioSwitch(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(GpioSwitch::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void GpioSwitch::delete_device()
{
	DEBUG_STREAM << "GpioSwitch::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(GpioSwitch::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	if(_dev) {
		_dev->terminate();
		int* retval;
		_dev->join((void**)&retval);
		_dev = NULL;
	}

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void GpioSwitch::init_device()
{
	DEBUG_STREAM << "GpioSwitch::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(GpioSwitch::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call
	set_state(Tango::INIT);

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::init_device_before


	//	Get the device properties from database
	get_device_property();

	//	No longer if mandatory property not set.
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(GpioSwitch::init_device) ENABLED START -----*/

	//	Initialize device
	_dev = new GpioMonitor(control_gpio, check_gpio, this);

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::init_device
}

//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void GpioSwitch::get_device_property()
{
	/*----- PROTECTED REGION ID(GpioSwitch::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("control_gpio"));
	dev_prop.push_back(Tango::DbDatum("check_gpio"));
	dev_prop.push_back(Tango::DbDatum("polling"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);

		//	get instance on GpioSwitchClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		GpioSwitchClass	*ds_class =
			(static_cast<GpioSwitchClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize control_gpio from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  control_gpio;
		else {
			//	Try to initialize control_gpio from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  control_gpio;
		}
		//	And try to extract control_gpio value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  control_gpio;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize check_gpio from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  check_gpio;
		else {
			//	Try to initialize check_gpio from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  check_gpio;
		}
		//	And try to extract check_gpio value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  check_gpio;

		//	Try to initialize polling from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  polling;
		else {
			//	Try to initialize polling from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  polling;
		}
		//	And try to extract polling value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  polling;

	}

	/*----- PROTECTED REGION ID(GpioSwitch::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void GpioSwitch::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(GpioSwitch::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	GpioSwitch::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void GpioSwitch::always_executed_hook()
{
	DEBUG_STREAM << "GpioSwitch::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"GpioSwitch::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(GpioSwitch::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void GpioSwitch::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "GpioSwitch::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(GpioSwitch::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void GpioSwitch::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(GpioSwitch::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command On related method
 *	Description:
 *
 */
//--------------------------------------------------------
void GpioSwitch::on()
{
	DEBUG_STREAM << "GpioSwitch::On()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GpioSwitch::on) ENABLED START -----*/

	//	Add your own code
	_dev->on();

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::on
}
//--------------------------------------------------------
/**
 *	Command Off related method
 *	Description:
 *
 */
//--------------------------------------------------------
void GpioSwitch::off()
{
	DEBUG_STREAM << "GpioSwitch::Off()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(GpioSwitch::off) ENABLED START -----*/

	//	Add your own code
	_dev->off();

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::off
}
//--------------------------------------------------------
/**
 *	Method      : GpioSwitch::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void GpioSwitch::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(GpioSwitch::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	GpioSwitch::add_dynamic_commands
}

/*----- PROTECTED REGION ID(GpioSwitch::namespace_ending) ENABLED START -----*/

//	Additional Methods

// Constructor
GpioMonitor::GpioMonitor(short control_gpio, short check_gpio, GpioSwitch* parent) :
	_terminate(false),
	_parent(parent)
{
	try {
		_dev = new GPIO(control_gpio);
		msleep(500);
		_dev->setDirection(GPIO_DIR_OUTPUT_LOW);
		if(check_gpio != -1) {
			_check = new GPIO(check_gpio);
			msleep(500);
			_check->setDirection(GPIO_DIR_INPUT);
		} else {
			_check = NULL;
		}

	} catch(GPIOException &e) {
		Tango::Except::throw_exception(
					(const char *)"GPIO init failed",
					e.what(),
					(const char *)"GpioMonitor::GpioMonitor()");
	}

	// Start thread
	start_undetached();
}

// Destructor
GpioMonitor::~GpioMonitor() {
	if(_dev) {
		delete _dev;
		_dev = NULL;
	}
	if(_check) {
		delete _check;
		_check = NULL;
	}
}

// Main loop function
void* GpioMonitor::run_undetached(void *arg) {
	// Starting state
	if(_parent) {
		_parent->get_logger()->info_stream() << log4tango::LogInitiator::_begin_log << "Started monitoring thread." << endl;
	}

	int index = 0;
	bool ctrl = false;
	bool check = false;

	struct timeval b, e;
	while(!_terminate) {

		gettimeofday(&b, NULL);

		try {
			ctrl = _dev->read();
			if(_check)
				check = _check->read();

			if(ctrl) {
				if(_check) {
					if(!check) {
						// Switch is driven but not switched! BAD!
						_parent->set_state(Tango::FAULT);
					} else {
						// OK!
						_parent->set_state(Tango::ON);
					}
				} else {
					// OK!
					_parent->set_state(Tango::ON);
				}
			} else {
				if(_check) {
					if(check) {
						// Switch is not driven but switched! BAD!
						_parent->set_state(Tango::FAULT);
					} else {
						// OK!
						_parent->set_state(Tango::OFF);
					}
				} else {
					// OK!
					_parent->set_state(Tango::OFF);
				}
			}

		} catch(GPIOException &e) {
			_parent->get_logger()->error_stream() << log4tango::LogInitiator::_begin_log << "GPIO Error: " << e.what() << endl;
			_parent->set_state(Tango::FAULT);
		}

		// Sleep
		gettimeofday(&e, NULL);

		int elapsed = ELAPSED_TIME_MS(b, e);

		if(elapsed < (int)_parent->polling)
			msleep(_parent->polling - elapsed);
	}

	return (void*)NULL;
}

// ON
void GpioMonitor::on() {
	if(_parent->get_state() == Tango::ON) {
		// Nothing to do
		return;
	}

	try {
		_dev->write(true);
	} catch(GPIOException &e) {
		Tango::Except::throw_exception(
					(const char *)"GPIO write failed",
					e.what(),
					(const char *)"GpioMonitor::on()");
	}

	if(_check) {
		msleep(500);
		try {
			int i = 0;
			while(true) {
				bool check = _check->read();
				if(check)
					break;

				i++;
				if(i >= 2) {
					_dev->write(false);
					Tango::Except::throw_exception(
						(const char *)"GPIO switch on failed",
						(const char *)"Control GPIO was set but no state change was detected",
						(const char *)"GpioMonitor::on()");
				}
				msleep(100);
			}
			_parent->set_state(Tango::ON);

		} catch(GPIOException &e) {
			Tango::Except::throw_exception(
					(const char *)"GPIO check failed",
					e.what(),
					(const char *)"GpioMonitor::on()");
		}
	}
}

// OFF
void GpioMonitor::off() {
	if(_parent->get_state() == Tango::OFF) {
		// Nothing to do
		return;
	}

	try {
		_dev->write(false);
	} catch(GPIOException &e) {
		Tango::Except::throw_exception(
					(const char *)"GPIO write failed",
					e.what(),
					(const char *)"GpioMonitor::off()");
	}

	if(_check) {
		msleep(500);
		try {
			int i = 0;
			while(true) {
				bool check = _check->read();
				if(!check)
					break;

				i++;
				if(i >= 2) {
					Tango::Except::throw_exception(
						(const char *)"GPIO switch off failed",
						(const char *)"Control GPIO was set but no state change was detected",
						(const char *)"GpioMonitor::off()");
				}
				msleep(100);
			}
			_parent->set_state(Tango::OFF);

		} catch(GPIOException &e) {
			Tango::Except::throw_exception(
					(const char *)"GPIO check failed",
					e.what(),
					(const char *)"GpioMonitor::off()");
		}
	}
}

// Millisecond sleep
void GpioMonitor::msleep(uint32_t msec) {
	if(msec <= 0)
		return;
	struct timespec st;
	struct timeval start, stop;
	gettimeofday(&start, NULL);
	// Setup delay
	st.tv_sec = msec / 1000;
	st.tv_nsec = (msec % 1000) * 1000000;

	while(1) {
		int ans = nanosleep(&st, NULL);
		if(ans == -1 && errno == EINTR) {
			// Nanosleep was interrupted by a signal
			gettimeofday(&stop, NULL);
			uint32_t rem = msec - ELAPSED_TIME_MS(start, stop);
			if(rem > 0) {
				st.tv_sec = rem / 1000;
				st.tv_nsec = (rem % 1000) * 1000000;
			} else {
				break;
			}
		} else {
			break;
		}
	}
}

/*----- PROTECTED REGION END -----*/	//	GpioSwitch::namespace_ending
} //	namespace
