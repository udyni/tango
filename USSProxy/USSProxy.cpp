/*----- PROTECTED REGION ID(USSProxy.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        USSProxy.cpp
//
// description : C++ source for the USSProxy class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               USSProxy are implemented in this file.
//
// project :     USS Proxy
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <USSProxy.h>
#include <USSProxyClass.h>

/*----- PROTECTED REGION END -----*/	//	USSProxy.cpp

/**
 *  USSProxy class description:
 *    USS protocol (Universal Serial Interface Protocol) proxy interface. Support both local and TCP/IP communication.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Connect       |  connect
//  Disconnect    |  disconnect
//  Flush         |  flush
//  SendTelegram  |  send_telegram
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace USSProxy_ns
{
/*----- PROTECTED REGION ID(USSProxy::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	USSProxy::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : USSProxy::USSProxy()
 *	Description : Constructors for a Tango device
 *                implementing the classUSSProxy
 */
//--------------------------------------------------------
USSProxy::USSProxy(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(USSProxy::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::constructor_1
}
//--------------------------------------------------------
USSProxy::USSProxy(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(USSProxy::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::constructor_2
}
//--------------------------------------------------------
USSProxy::USSProxy(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(USSProxy::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : USSProxy::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void USSProxy::delete_device()
{
	//DEBUG_STREAM << "USSProxy::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(USSProxy::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	if(sock)
		delete sock;
	sock = NULL;

	/*----- PROTECTED REGION END -----*/	//	USSProxy::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : USSProxy::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void USSProxy::init_device()
{
	//DEBUG_STREAM << "USSProxy::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(USSProxy::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	if (mandatoryNotDefined)
		return;
	

	/*----- PROTECTED REGION ID(USSProxy::init_device) ENABLED START -----*/
	
	force_disconnect = false;

	//	Initialize device
	if(deviceType == "serial") {
		sock = new SerialSocket();

	} else if(deviceType == "tcp") {
		sock = new TcpSocket();

	} else {
		TangoSys_OMemStream msg;
		msg << "Device type '" << deviceType << "' is not supported.";
		ERROR_STREAM << "USSProxy::init_device(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Unsupported type",
					msg.str(),
					(const char *)"USSProxy::init_device()");
	}

	if(autoReconnect) {
		try {
			this->connect();
		} catch(Tango::DevFailed &e) {
			set_state(Tango::FAULT);
			set_status("Connection at startup failed.");
		}
	} else {
		set_state(Tango::OFF);
		set_status("Disconnected.");
	}
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::init_device
}

//--------------------------------------------------------
/**
 *	Method      : USSProxy::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void USSProxy::get_device_property()
{
	/*----- PROTECTED REGION ID(USSProxy::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DeviceAddress"));
	dev_prop.push_back(Tango::DbDatum("Timeout"));
	dev_prop.push_back(Tango::DbDatum("AutoReconnect"));
	dev_prop.push_back(Tango::DbDatum("DeviceType"));
	dev_prop.push_back(Tango::DbDatum("SerialBaud"));
	dev_prop.push_back(Tango::DbDatum("SerialSetup"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on USSProxyClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		USSProxyClass	*ds_class =
			(static_cast<USSProxyClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize DeviceAddress from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceAddress;
		else {
			//	Try to initialize DeviceAddress from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceAddress;
		}
		//	And try to extract DeviceAddress value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceAddress;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize Timeout from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  timeout;
		else {
			//	Try to initialize Timeout from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  timeout;
		}
		//	And try to extract Timeout value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  timeout;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize AutoReconnect from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  autoReconnect;
		else {
			//	Try to initialize AutoReconnect from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  autoReconnect;
		}
		//	And try to extract AutoReconnect value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  autoReconnect;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize DeviceType from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceType;
		else {
			//	Try to initialize DeviceType from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceType;
		}
		//	And try to extract DeviceType value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceType;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize SerialBaud from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serialBaud;
		else {
			//	Try to initialize SerialBaud from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serialBaud;
		}
		//	And try to extract SerialBaud value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialBaud;

		//	Try to initialize SerialSetup from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serialSetup;
		else {
			//	Try to initialize SerialSetup from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serialSetup;
		}
		//	And try to extract SerialSetup value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialSetup;

	}

	/*----- PROTECTED REGION ID(USSProxy::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : USSProxy::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void USSProxy::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(USSProxy::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	USSProxy::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : USSProxy::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void USSProxy::always_executed_hook()
{
	//INFO_STREAM << "USSProxy::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"USSProxy::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(USSProxy::always_executed_hook) ENABLED START -----*/
	
	if(!(sock->isConnected())) {
		if(get_state() == Tango::ON) {
			set_state(Tango::FAULT);
			set_status("Connection closed for error");
		}

		if(autoReconnect && !force_disconnect) {
			// Try to reconnect
			try {
				this->connect();
				set_state(Tango::ON);
				set_status("Reconnected successfully");
			} catch(Tango::DevFailed &e) {
				set_state(Tango::FAULT);
				set_status("Reconnection failed");
			}
		}
	}
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : USSProxy::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void USSProxy::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	//DEBUG_STREAM << "USSProxy::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(USSProxy::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : USSProxy::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void USSProxy::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(USSProxy::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Connect related method
 *	Description: Open connection to device
 *
 */
//--------------------------------------------------------
void USSProxy::connect()
{
	//DEBUG_STREAM << "USSProxy::Connect()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(USSProxy::connect) ENABLED START -----*/
	
	try {
		sock->connect(deviceAddress);

		if(deviceType == "serial") {
			// Cast socket to serial type
			SerialSocket *temp = static_cast<SerialSocket*>(sock);

			// Convert baud rate to constant
			speed_t baud;
			Tango::DevLong tempbaud = (serialBaud / 9600) * 9600;
			switch(tempbaud) {
				case 9600:
				default:
					baud = B9600;
					break;
				case 19200:
					baud = B19200;
					break;
				case 38400:
					baud = B38400;
					break;
				case 57600:
					baud = B57600;
					break;
				case 115200:
					baud = B115200;
					break;
			}

			// Extract port configuration
			char parity = 'N';
			uint8_t databits = 8;
			uint8_t stopbits = 1;
			if(sscanf(serialSetup.c_str(), "%hhu%c%hhu", &databits, &parity, &stopbits) == 3) {
				temp->configure_port(baud, parity, databits, stopbits);
			} else {
				temp->configure_port(baud);
			}
			
			// Set serial port as raw for USS
			temp->set_raw();
		}

		force_disconnect = false;
		set_state(Tango::ON);
		set_status("Connection successful");

	} catch(SocketException& e) {
		TangoSys_OMemStream msg;
		msg << "Connection failed (Error: " << e.what() << ")";
		ERROR_STREAM << "USSProxy::Connect(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Initialization failed",
					msg.str(),
					(const char *)"USSProxy::Connect()");
	}

	/*----- PROTECTED REGION END -----*/	//	USSProxy::connect
}
//--------------------------------------------------------
/**
 *	Command Disconnect related method
 *	Description: Close connection to device
 *
 */
//--------------------------------------------------------
void USSProxy::disconnect()
{
	//DEBUG_STREAM << "USSProxy::Disconnect()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(USSProxy::disconnect) ENABLED START -----*/
	
	sock->disconnect();
	force_disconnect = true;
	set_state(Tango::OFF);
	set_status("Disconnected.");
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::disconnect
}
//--------------------------------------------------------
/**
 *	Command Flush related method
 *	Description: Make sure that the receive buffer is empty.
 *
 */
//--------------------------------------------------------
void USSProxy::flush()
{
	//DEBUG_STREAM << "USSProxy::Flush()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(USSProxy::flush) ENABLED START -----*/
	
	try {
		sock->flush();

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Flush failed (Error: " << e.what() << ")";
		ERROR_STREAM << "USSProxy::Flush(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Flush failed",
					msg.str(),
					(const char *)"USSProxy::Flush()");
	}
	
	/*----- PROTECTED REGION END -----*/	//	USSProxy::flush
}
//--------------------------------------------------------
/**
 *	Command SendTelegram related method
 *	Description: Send a telegram with the USS protocol and return the answer
 *
 *	@param argin The telegram to send. The array length is the length of the telegram.
 *	@returns Response telegram.
 */
//--------------------------------------------------------
Tango::DevVarCharArray *USSProxy::send_telegram(const Tango::DevVarCharArray *argin)
{
	Tango::DevVarCharArray *argout;
	//DEBUG_STREAM << "USSProxy::SendTelegram()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(USSProxy::send_telegram) ENABLED START -----*/

	char buffer[USS_TELEGRAM_LEN];   // Maximum USS telegram length

	// Check buffer length
	if(argin->length() > 253) {  // 252 data bytes + address
		ERROR_STREAM << "USSProxy::SendTelegram(): cannot send telegram, because it's too long" << endl;
		Tango::Except::throw_exception(
				(const char *)"Telegram too long",
				(const char *)"Cannot send telegram, because it's too long",
				(const char *)"USSProxy::SendTelegram()");
	}

	try {
		// Clean buffer
		memset(buffer, 0, USS_TELEGRAM_LEN);

		// Format buffer
		buffer[0] = 0x02;  // STX
		buffer[1] = uint8_t(argin->length()) + 1;
		memcpy(buffer+2, argin->get_buffer(), argin->length());
		buffer[argin->length()+2] = compute_uss_crc(buffer, argin->length()+2);

		// Send telegram
		sock->send(buffer, argin->length()+3);

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Telegram send failed (Error: " << e.what() << ")";
		ERROR_STREAM << "USSProxy::SendTelegram(): " << msg.str() << endl;
		Tango::Except::throw_exception(
				(const char *)"Telegram send failed",
				msg.str(),
				(const char *)"USSProxy::SendTelegram()");
	}

	try {
		// Clean buffer
		memset(buffer, 0, USS_TELEGRAM_LEN);
		
		// Receive timeout
		struct timeval b_recv, e_recv;
		gettimeofday(&b_recv, NULL);
#ifdef _DEBUG
		struct timeval bench_b, bench_e;  // Benchmark variables for debugging purposes
#endif

#ifdef _DEBUG
		gettimeofday(&bench_b, NULL);
#endif
		// Wait up to timeout
		int ans = sock->recv(buffer, 2, timeout);
		if(ans != 2) {
#ifdef _DEBUG
			gettimeofday(&bench_e, NULL);
			DEBUG_STREAM << "Receive failed after a timeout of " << (ELAPSED_TIME_MS(bench_b, bench_e)) << " ms" << endl;
#endif
			Tango::Except::throw_exception("Timeout", "Receive of response timed out", "USSProxy::SendTelegram()");
		}
#ifdef _DEBUG
		gettimeofday(&bench_e, NULL);
		DEBUG_STREAM << "First receive done in " << (ELAPSED_TIME_MS(bench_b, bench_e)) << " ms" << endl;
#endif

		// Check start byte
		if(buffer[0] != 0x02)
			Tango::Except::throw_exception("Corrupted message", "The received response was corrupted", "USSProxy::SendTelegram()");
		
		// Read the number of bytes in the message
		int len = int(buffer[1]);

		// Receive the remaining part of the message
		gettimeofday(&e_recv, NULL);
#ifdef _DEBUG
		gettimeofday(&bench_b, NULL);
#endif
		ans = sock->recv(buffer+2, len, timeout - ELAPSED_TIME_MS(b_recv, e_recv));   // 10ms of timeout as the message should be already bufferized
		if(ans != len)
			Tango::Except::throw_exception("Timeout", "Failed to receive full message", "USSProxy::SendTelegram()");
#ifdef _DEBUG
		gettimeofday(&bench_e, NULL);
		DEBUG_STREAM << "Second receive done in " << (ELAPSED_TIME_MS(bench_b, bench_e)) << " ms" << endl;
#endif
		// Check CRC
		if(compute_uss_crc(buffer, len+1) != buffer[len+1])
			Tango::Except::throw_exception("CRC check failed", "The received response has bad CRC", "USSProxy::SendTelegram()");

		// Copy message to output var
		argout = new Tango::DevVarCharArray(len-1);
		argout->length(len-1);
		memcpy(argout->get_buffer(), buffer+2, len-1);

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Telegram receive failed (Error: " << e.what() << ")";
		ERROR_STREAM << "USSProxy::SendTelegram(): " << msg.str() << endl;
		Tango::Except::throw_exception(
				(const char *)"Telegram receive failed",
				msg.str(),
				(const char *)"USSProxy::SendTelegram()");
	} catch(Tango::DevFailed &e) {
		// Flush buffer in case of errors
		this->flush();
		// Rethrow the exception
		throw(e);
	}

	// Add a 5 ms delay after each call to prevent race conditions on the bus...
	struct timespec st = {0, 5000000};
	nanosleep(&st, NULL);

	/*----- PROTECTED REGION END -----*/	//	USSProxy::send_telegram
	return argout;
}

/*----- PROTECTED REGION ID(USSProxy::namespace_ending) ENABLED START -----*/

//	Additional Methods

char USSProxy::compute_uss_crc(char *buffer, size_t length) {
	char result = buffer[0];
	for(size_t i = 1; i < length; i++)
		result = result ^ buffer[i];
	return result;
}

/*----- PROTECTED REGION END -----*/	//	USSProxy::namespace_ending
} //	namespace
