/*----- PROTECTED REGION ID(MAGSrv.h) ENABLED START -----*/
//=============================================================================
//
// file :        MAGSrv.h
//
// description : Include file for the MAGSrv class
//
// project :
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MAGSrv_H
#define MAGSrv_H

#include <tango.h>
#include <omnithread.h>
#include <byteswap.h>
#include <tango_common_log.h>

#define MAG_USS_BUFF_LEN 21

#define MAG_STATUS_READY      0x0001   // b00: Pump ready
//      MAG_STATUS_NONE       0x0002   // b01: No function
#define MAG_STATUS_ENABLED    0x0004   // b02: Operation enabled. Drive active
#define MAG_STATUS_FAILURE    0x0008   // b03: Failure condition, pump not ready
#define MAG_STATUS_ACCEL      0x0010   // b04: Acceleration
#define MAG_STATUS_DECEL      0x0020   // b05: Deceleration
#define MAG_STATUS_DISABLED   0x0040   // b06: Switch on lock (inverse of bit 2)
#define MAG_STATUS_WTEMP      0x0080   // b07: Temperature warning
//      MAG_STATUS_NONE       0x0100   // b08: No function
#define MAG_STATUS_PARAM      0x0200   // b09: Parameter channel enabled
#define MAG_STATUS_NORMAL     0x0400   // b10: Normal operation
#define MAG_STATUS_ROTATING   0x0800   // b11: Pump is rotating
#define MAG_STATUS_WFAIL      0x1000   // b12: Failure Counter
#define MAG_STATUS_WOVERLOAD  0x2000   // b13: Warning overload
//      MAG_STATUS_NONE       0x4000   // b14: No function
#define MAG_STATUS_PROCESS    0x8000   // b15: Process channel enabled

#define MAG_MAX_RETRY         5

#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif


#define CREATE_EVENT_MEMBER(name, type, value)   (name) = new type((value))
#define DELETE_EVENT_MEMBER(name)                if((name)) { delete (name); } (name) = NULL

/*----- PROTECTED REGION END -----*/	//	MAGSrv.h

/**
 *  MAGSrv class description:
 *    Device server for MagDrive frequency converters mounted on Leybold Turbopumps.
 */

namespace MAGSrv_ns
{
/*----- PROTECTED REGION ID(MAGSrv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class MagSerial;

/*----- PROTECTED REGION END -----*/	//	MAGSrv::Additional Class Declarations

class MAGSrv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(MAGSrv::Data Members) ENABLED START -----*/

	// Monitoring thread
	MagSerial *mt;

/*----- PROTECTED REGION END -----*/	//	MAGSrv::Data Members

//	Device property data members
public:
	//	proxy:	Communication proxy with the serial device
	string	proxy;
	//	address:	RS485 address of the pump (from 0 to 31)
	Tango::DevUShort	address;
	//	polling:	Pump status polling time
	Tango::DevULong	polling;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevUShort	*attr_Frequency_read;
	Tango::DevUShort	*attr_MotorTemperature_read;
	Tango::DevUShort	*attr_ConverterTemperature_read;
	Tango::DevFloat	*attr_OperatingHours_read;
	Tango::DevFloat	*attr_Current_read;
	Tango::DevUShort	*attr_BearingTemperature_read;
	Tango::DevFloat	*attr_Power_read;
	Tango::DevString	*attr_LastError_read;
	Tango::DevString	*attr_SoftVersion_read;
	Tango::DevString	*attr_SerialNo_read;
	Tango::DevUShort	*attr_MagB_TD_read;
	Tango::DevFloat	*attr_MagB_TD_Time_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MAGSrv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MAGSrv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	MAGSrv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~MAGSrv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : MAGSrv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Frequency related methods
 *	Description: Actual output frequency of the converter
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Frequency(Tango::Attribute &attr);
	virtual bool is_Frequency_allowed(Tango::AttReqType type);
/**
 *	Attribute MotorTemperature related methods
 *	Description: Actual motor temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_MotorTemperature(Tango::Attribute &attr);
	virtual bool is_MotorTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute ConverterTemperature related methods
 *	Description: Actual converter temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ConverterTemperature(Tango::Attribute &attr);
	virtual bool is_ConverterTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute OperatingHours related methods
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_OperatingHours(Tango::Attribute &attr);
	virtual bool is_OperatingHours_allowed(Tango::AttReqType type);
/**
 *	Attribute Current related methods
 *	Description: Actual current value of the intermediate circuit of the frequency converter
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Current(Tango::Attribute &attr);
	virtual bool is_Current_allowed(Tango::AttReqType type);
/**
 *	Attribute BearingTemperature related methods
 *	Description: Actual bearing temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_BearingTemperature(Tango::Attribute &attr);
	virtual bool is_BearingTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute Power related methods
 *	Description: Power consumption
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Power(Tango::Attribute &attr);
	virtual bool is_Power_allowed(Tango::AttReqType type);
/**
 *	Attribute LastError related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_LastError(Tango::Attribute &attr);
	virtual bool is_LastError_allowed(Tango::AttReqType type);
/**
 *	Attribute SoftVersion related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_SoftVersion(Tango::Attribute &attr);
	virtual bool is_SoftVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute SerialNo related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_SerialNo(Tango::Attribute &attr);
	virtual bool is_SerialNo_allowed(Tango::AttReqType type);
/**
 *	Attribute MagB_TD related methods
 *	Description: Total number of recognized magnetic bearing touch downs
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_MagB_TD(Tango::Attribute &attr);
	virtual bool is_MagB_TD_allowed(Tango::AttReqType type);
/**
 *	Attribute MagB_TD_Time related methods
 *	Description: Total touch down time of magnetic bearings
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_MagB_TD_Time(Tango::Attribute &attr);
	virtual bool is_MagB_TD_Time_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : MAGSrv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Start related method
	 *	Description: Start the turbo pump
	 *
	 */
	virtual void start();
	virtual bool is_Start_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: Stop the turbo pump
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Reset error on the turbo pump controller
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command getError related method
	 *	Description: Get list of logged errors
	 *
	 *	@param argin Error index (min 0, max 39)
	 *	@returns Error message
	 */
	virtual Tango::DevString get_error(Tango::DevUShort argin);
	virtual bool is_getError_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : MAGSrv::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(MAGSrv::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	MAGSrv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(MAGSrv::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class MagSerial : public omni_thread {
public:
	MagSerial(MAGSrv *parent);
	~MagSerial();

	// Terminate thread
	void terminate() { _terminate = true; }

	// Start pump
	void start() { _control_reg = _control_reg | 0x1; }

	// Stop pump
	void stop() { _control_reg = _control_reg & ~0x1; }

	// Reset pump controller
	void reset() { _control_reg = _control_reg | 0x80; };

	// Get errors
	Tango::DevString getError(uint16_t num);

	// Get temperatures
	uint16_t getConverterT()const { return _conv_t; }
	uint16_t getMotorT()const { return _motor_t; }
	uint16_t getBearingT()const { return _bearing_t; }

	// Get supply parameters
	uint16_t getFrequency()const { return _freq; }
	float getCurrent()const { return _current; }
	float getPower()const { return _power; }

	// Bearing touch downs
	uint16_t getMB_TD()const { return _mb_td; }
	float getMB_TD_Time()const { return _mb_td_time; }

	// Operating hours
	float getOperatingHours()const { return _op_hours; }

	// Millisecond sleep
	static void msleep(uint32_t msec);

protected:
	void *run_undetached(void *arg);

	uint16_t getIndexedValue(uint16_t param, uint16_t index);

private:
	// Serial device
	Tango::DeviceProxy *_dev;

	// Serial device lock
	omni_mutex _lock;

	// Parent device
	MAGSrv *_parent;

	// Termination flag
	bool _terminate;

	// RS485 address
	uint8_t _address;

	// Control register
	uint16_t _control_reg;

	// Status register
	uint16_t _status_reg;

	// Bearing touch downs
	uint16_t _mb_td;
	float _mb_td_time;

	// Temperatures
	uint16_t _conv_t;
	uint16_t _motor_t;
	uint16_t _bearing_t;

	// Supply parameters
	uint16_t _freq;
	float _current;
	float _power;

	// Operating hours
	float _op_hours;

	// Event variables
	float * _ev_ophours;
	float * _ev_current;
	float * _ev_power;
	uint16_t * _ev_freq;
	uint16_t * _ev_ct;
	uint16_t * _ev_mt;
	uint16_t * _ev_bt;
};

/*----- PROTECTED REGION END -----*/	//	MAGSrv::Additional Classes Definitions

}	//	End of namespace

#endif   //	MAGSrv_H
