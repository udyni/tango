/*----- PROTECTED REGION ID(MAGSrvStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        MAGSrvStateMachine.cpp
//
// description : State machine file for the MAGSrv class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <MAGSrv.h>

/*----- PROTECTED REGION END -----*/	//	MAGSrv::MAGSrvStateMachine.cpp

//================================================================
//  States  |  Description
//================================================================


namespace MAGSrv_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_Frequency_allowed()
 *	Description : Execution allowed for Frequency attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_Frequency_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for Frequency attribute in read access.
	/*----- PROTECTED REGION ID(MAGSrv::FrequencyStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::FrequencyStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_MotorTemperature_allowed()
 *	Description : Execution allowed for MotorTemperature attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_MotorTemperature_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for MotorTemperature attribute in read access.
	/*----- PROTECTED REGION ID(MAGSrv::MotorTemperatureStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::MotorTemperatureStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_ConverterTemperature_allowed()
 *	Description : Execution allowed for ConverterTemperature attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_ConverterTemperature_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for ConverterTemperature attribute in read access.
	/*----- PROTECTED REGION ID(MAGSrv::ConverterTemperatureStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::ConverterTemperatureStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_OperatingHours_allowed()
 *	Description : Execution allowed for OperatingHours attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_OperatingHours_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for OperatingHours attribute in read access.
	/*----- PROTECTED REGION ID(MAGSrv::OperatingHoursStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::OperatingHoursStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_Current_allowed()
 *	Description : Execution allowed for Current attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_Current_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for Current attribute in read access.
	/*----- PROTECTED REGION ID(MAGSrv::CurrentStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::CurrentStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_BearingTemperature_allowed()
 *	Description : Execution allowed for BearingTemperature attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_BearingTemperature_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for BearingTemperature attribute in read access.
	/*----- PROTECTED REGION ID(MAGSrv::BearingTemperatureStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::BearingTemperatureStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_Power_allowed()
 *	Description : Execution allowed for Power attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_Power_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for Power attribute in read access.
	/*----- PROTECTED REGION ID(MAGSrv::PowerStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::PowerStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_Start_allowed()
 *	Description : Execution allowed for Start attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_Start_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Start command.
	/*----- PROTECTED REGION ID(MAGSrv::StartStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::StartStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_Stop_allowed()
 *	Description : Execution allowed for Stop attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_Stop_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Stop command.
	/*----- PROTECTED REGION ID(MAGSrv::StopStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::StopStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_Reset_allowed()
 *	Description : Execution allowed for Reset attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_Reset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Reset command.
	/*----- PROTECTED REGION ID(MAGSrv::ResetStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::ResetStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : MAGSrv::is_getError_allowed()
 *	Description : Execution allowed for getError attribute
 */
//--------------------------------------------------------
bool MAGSrv::is_getError_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for getError command.
	/*----- PROTECTED REGION ID(MAGSrv::getErrorStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	MAGSrv::getErrorStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(MAGSrv::MAGSrvStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	MAGSrv::MAGSrvStateAllowed.AdditionalMethods

}	//	End of namespace
