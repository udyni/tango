/*----- PROTECTED REGION ID(TM700Srv.h) ENABLED START -----*/
//=============================================================================
//
// file :        TM700Srv.h
//
// description : Include file for the TM700Srv class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TM700Srv_H
#define TM700Srv_H

#include <tango.h>
#include <omnithread.h>
#include <map>
#include <sstream>
#include <iomanip>
#include "../Common/tango_common_log.h"
#include "TM700Parameters.h"


#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif


#define CREATE_EVENT_MEMBER(name, type, value)   (name) = new type((value))
#define DELETE_EVENT_MEMBER(name)                if((name)) { delete (name); } (name) = NULL


/*----- PROTECTED REGION END -----*/	//	TM700Srv.h

/**
 *  TM700Srv class description:
 *    Device server for Pfeiffer turbopumps equipped with TM700 drive units.
 */

namespace TM700Srv_ns
{
enum _GasModeEnum {
	_HEAVY_GASES,
	_LIGHT_GASES,
	_HELIUM,
} ;
typedef _GasModeEnum GasModeEnum;

/*----- PROTECTED REGION ID(TM700Srv::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class TM700Monitor;

/*----- PROTECTED REGION END -----*/	//	TM700Srv::Additional Class Declarations

class TM700Srv : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(TM700Srv::Data Members) ENABLED START -----*/

//	Add your own data members

private:
	// Monitoring thread
	TM700Monitor *dev;

/*----- PROTECTED REGION END -----*/	//	TM700Srv::Data Members

//	Device property data members
public:
	//	proxy:	Communication proxy with the serial device
	string	proxy;
	//	address:	RS485 address of the pump (from 0 to 31)
	Tango::DevUShort	address;
	//	polling:	Pump status polling time
	Tango::DevULong	polling;
	//	expertPolling:	Caching time for pseudo-polling in ms. It the last read is newer than this time, the cached value is sent.
	Tango::DevULong	expertPolling;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevUShort	*attr_BearingTemperature_read;
	Tango::DevUShort	*attr_BearingWear_read;
	Tango::DevUShort	*attr_ConverterTemperature_read;
	Tango::DevFloat	*attr_Current_read;
	Tango::DevUShort	*attr_ElecOpHours_read;
	Tango::DevUShort	*attr_ElectronicsTemperature_read;
	Tango::DevBoolean	*attr_EnableStandby_read;
	Tango::DevString	*attr_FirmwareVersion_read;
	Tango::DevUShort	*attr_Frequency_read;
	GasModeEnum	*attr_GasMode_read;
	Tango::DevString	*attr_HardwareVersion_read;
	Tango::DevString	*attr_LastError_read;
	Tango::DevUShort	*attr_MotorTemperature_read;
	Tango::DevFloat	*attr_OperatingHours_read;
	Tango::DevFloat	*attr_Power_read;
	Tango::DevUShort	*attr_PumpBottomTemperature_read;
	Tango::DevUShort	*attr_RotorImbalance_read;
	Tango::DevFloat	*attr_StandbySpeed_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TM700Srv(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TM700Srv(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	TM700Srv(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~TM700Srv() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : TM700Srv::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : TM700Srv::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute BearingTemperature related methods
 *	Description: Actual bearing temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_BearingTemperature(Tango::Attribute &attr);
	virtual bool is_BearingTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute BearingWear related methods
 *	Description: Wear conditions of the safety bearings
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_BearingWear(Tango::Attribute &attr);
	virtual bool is_BearingWear_allowed(Tango::AttReqType type);
/**
 *	Attribute ConverterTemperature related methods
 *	Description: Actual converter temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ConverterTemperature(Tango::Attribute &attr);
	virtual bool is_ConverterTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute Current related methods
 *	Description: Actual current value of the intermediate circuit of the frequency converter
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Current(Tango::Attribute &attr);
	virtual bool is_Current_allowed(Tango::AttReqType type);
/**
 *	Attribute ElecOpHours related methods
 *	Description: Operating hours of the electronics
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ElecOpHours(Tango::Attribute &attr);
	virtual bool is_ElecOpHours_allowed(Tango::AttReqType type);
/**
 *	Attribute ElectronicsTemperature related methods
 *	Description: Temperature of the electronics
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_ElectronicsTemperature(Tango::Attribute &attr);
	virtual bool is_ElectronicsTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute EnableStandby related methods
 *	Description: Enable standby mode
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
	virtual void read_EnableStandby(Tango::Attribute &attr);
	virtual void write_EnableStandby(Tango::WAttribute &attr);
	virtual bool is_EnableStandby_allowed(Tango::AttReqType type);
/**
 *	Attribute FirmwareVersion related methods
 *	Description: Controller firmware version
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_FirmwareVersion(Tango::Attribute &attr);
	virtual bool is_FirmwareVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute Frequency related methods
 *	Description: Actual output frequency of the converter
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Frequency(Tango::Attribute &attr);
	virtual bool is_Frequency_allowed(Tango::AttReqType type);
/**
 *	Attribute GasMode related methods
 *	Description: Select gas mode for the turbopump
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_GasMode(Tango::Attribute &attr);
	virtual void write_GasMode(Tango::WAttribute &attr);
	virtual bool is_GasMode_allowed(Tango::AttReqType type);
/**
 *	Attribute HardwareVersion related methods
 *	Description: Controller hardware version
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_HardwareVersion(Tango::Attribute &attr);
	virtual bool is_HardwareVersion_allowed(Tango::AttReqType type);
/**
 *	Attribute LastError related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_LastError(Tango::Attribute &attr);
	virtual bool is_LastError_allowed(Tango::AttReqType type);
/**
 *	Attribute MotorTemperature related methods
 *	Description: Actual motor temperature
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_MotorTemperature(Tango::Attribute &attr);
	virtual bool is_MotorTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute OperatingHours related methods
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_OperatingHours(Tango::Attribute &attr);
	virtual bool is_OperatingHours_allowed(Tango::AttReqType type);
/**
 *	Attribute Power related methods
 *	Description: Power consumption
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Power(Tango::Attribute &attr);
	virtual bool is_Power_allowed(Tango::AttReqType type);
/**
 *	Attribute PumpBottomTemperature related methods
 *	Description: Temperature of the bottom of the pump
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_PumpBottomTemperature(Tango::Attribute &attr);
	virtual bool is_PumpBottomTemperature_allowed(Tango::AttReqType type);
/**
 *	Attribute RotorImbalance related methods
 *	Description: Rotor out-of-balance condition
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_RotorImbalance(Tango::Attribute &attr);
	virtual bool is_RotorImbalance_allowed(Tango::AttReqType type);
/**
 *	Attribute StandbySpeed related methods
 *	Description: Standby rotation speed
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_StandbySpeed(Tango::Attribute &attr);
	virtual void write_StandbySpeed(Tango::WAttribute &attr);
	virtual bool is_StandbySpeed_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : TM700Srv::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Start related method
	 *	Description: Start the turbo pump
	 *
	 */
	virtual void start();
	virtual bool is_Start_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: Stop the turbo pump
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Reset error on the turbo pump controller
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command getError related method
	 *	Description: Get list of logged errors
	 *
	 *	@param argin Error index (min 0, max 39)
	 *	@returns Error message
	 */
	virtual Tango::DevString get_error(Tango::DevUShort argin);
	virtual bool is_getError_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : TM700Srv::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(TM700Srv::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	TM700Srv::Additional Method prototypes
};

/*----- PROTECTED REGION ID(TM700Srv::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class TM700Monitor : public omni_thread {
public:
	TM700Monitor(const string& proxy, uint8_t address, TM700Srv *parent);
	~TM700Monitor();

	// Terminate thread
	void terminate() { _terminate = true; }

	// Start pump
	void start();

	// Stop pump
	void stop();

	// Reset pump controller
	void reset() {};

	// Get errors
	Tango::DevString getError(uint16_t num);

	// Get temperatures
	uint16_t getConverterT()const { return _conv_t; }
	uint16_t getMotorT()const { return _motor_t; }
	uint16_t getBearingT()const { return _bearing_t; }

	// Get supply parameters
	uint16_t getFrequency()const { return _freq; }
	float getCurrent()const { return _current; }
	float getPower()const { return static_cast<float>(_power); }

	// Operating hours
	float getOperatingHours()const { return static_cast<float>(_op_hours); }

	// Millisecond sleep
	static void msleep(uint32_t msec);

	// Read expert parameter (subject to pseudo-polling)
	const TM700_param& readExpertParam(int param);

	// Write generic parameter
	void writeParam(int param, const TM700_param& value);

	// 5 point numerical derivative
	double compute_5point_derivative(double h, const std::vector<double>& values);

protected:
	// Main monitorin loop
	void *run_undetached(void *arg);

	// Read generic parameter
	TM700_param readParam(int param);

	// Parse controller response
	void parse_response(const string& response, int param, TM700_param &out);

private:
	// Serial device
	Tango::DeviceProxy *_dev;

	// Serial device lock
	omni_mutex _lock;

	// Parent device
	TM700Srv *_parent;

	// Termination flag
	bool _terminate;

	// RS485 address
	uint8_t _address;

	// Parameter type map
	std::map<uint16_t, uint16_t> _type_map;

	// Polling periods
	uint32_t _polling;
	uint32_t _expert_polling;

	// Temperatures
	uint16_t _conv_t;
	uint16_t _motor_t;
	uint16_t _bearing_t;

	// Supply parameters
	uint16_t _freq;
	float _current;
	uint16_t _power;

	// Operating hours
	uint32_t _op_hours;

	// Event variables
	float * _ev_ophours;
	float * _ev_current;
	float * _ev_power;
	uint16_t * _ev_freq;
	uint16_t * _ev_ct;
	uint16_t * _ev_mt;
	uint16_t * _ev_bt;
	
	// Pseudo polling maps
	std::map<uint16_t, TM700_param> _cache_value;
	std::map<uint16_t, struct timeval> _cache_time;
};

/*----- PROTECTED REGION END -----*/	//	TM700Srv::Additional Classes Definitions

}	//	End of namespace

#endif   //	TM700Srv_H
