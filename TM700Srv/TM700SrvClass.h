/*----- PROTECTED REGION ID(TM700SrvClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        TM700SrvClass.h
//
// description : Include for the TM700Srv root class.
//               This class is the singleton class for
//                the TM700Srv device class.
//               It contains all properties and methods which the 
//               TM700Srv requires only once e.g. the commands.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TM700SrvClass_H
#define TM700SrvClass_H

#include <tango.h>
#include <TM700Srv.h>


/*----- PROTECTED REGION END -----*/	//	TM700SrvClass.h


namespace TM700Srv_ns
{
/*----- PROTECTED REGION ID(TM700SrvClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute BearingTemperature class definition
class BearingTemperatureAttrib: public Tango::Attr
{
public:
	BearingTemperatureAttrib():Attr("BearingTemperature",
			Tango::DEV_USHORT, Tango::READ) {};
	~BearingTemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_BearingTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_BearingTemperature_allowed(ty);}
};

//	Attribute BearingWear class definition
class BearingWearAttrib: public Tango::Attr
{
public:
	BearingWearAttrib():Attr("BearingWear",
			Tango::DEV_USHORT, Tango::READ) {};
	~BearingWearAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_BearingWear(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_BearingWear_allowed(ty);}
};

//	Attribute ConverterTemperature class definition
class ConverterTemperatureAttrib: public Tango::Attr
{
public:
	ConverterTemperatureAttrib():Attr("ConverterTemperature",
			Tango::DEV_USHORT, Tango::READ) {};
	~ConverterTemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_ConverterTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_ConverterTemperature_allowed(ty);}
};

//	Attribute Current class definition
class CurrentAttrib: public Tango::Attr
{
public:
	CurrentAttrib():Attr("Current",
			Tango::DEV_FLOAT, Tango::READ) {};
	~CurrentAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_Current(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_Current_allowed(ty);}
};

//	Attribute ElecOpHours class definition
class ElecOpHoursAttrib: public Tango::Attr
{
public:
	ElecOpHoursAttrib():Attr("ElecOpHours",
			Tango::DEV_USHORT, Tango::READ) {};
	~ElecOpHoursAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_ElecOpHours(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_ElecOpHours_allowed(ty);}
};

//	Attribute ElectronicsTemperature class definition
class ElectronicsTemperatureAttrib: public Tango::Attr
{
public:
	ElectronicsTemperatureAttrib():Attr("ElectronicsTemperature",
			Tango::DEV_USHORT, Tango::READ) {};
	~ElectronicsTemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_ElectronicsTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_ElectronicsTemperature_allowed(ty);}
};

//	Attribute EnableStandby class definition
class EnableStandbyAttrib: public Tango::Attr
{
public:
	EnableStandbyAttrib():Attr("EnableStandby",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~EnableStandbyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_EnableStandby(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TM700Srv *>(dev))->write_EnableStandby(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_EnableStandby_allowed(ty);}
};

//	Attribute FirmwareVersion class definition
class FirmwareVersionAttrib: public Tango::Attr
{
public:
	FirmwareVersionAttrib():Attr("FirmwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~FirmwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_FirmwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_FirmwareVersion_allowed(ty);}
};

//	Attribute Frequency class definition
class FrequencyAttrib: public Tango::Attr
{
public:
	FrequencyAttrib():Attr("Frequency",
			Tango::DEV_USHORT, Tango::READ) {};
	~FrequencyAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_Frequency(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_Frequency_allowed(ty);}
};

//	Attribute GasMode class definition
class GasModeAttrib: public Tango::Attr
{
public:
	GasModeAttrib():Attr("GasMode",
			Tango::DEV_ENUM, Tango::READ_WRITE) {};
	~GasModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_GasMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TM700Srv *>(dev))->write_GasMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_GasMode_allowed(ty);}
	virtual bool same_type(const type_info &in_type) {return typeid(GasModeEnum) == in_type;}
	virtual string get_enum_type() {return string("GasModeEnum");}
};

//	Attribute HardwareVersion class definition
class HardwareVersionAttrib: public Tango::Attr
{
public:
	HardwareVersionAttrib():Attr("HardwareVersion",
			Tango::DEV_STRING, Tango::READ) {};
	~HardwareVersionAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_HardwareVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_HardwareVersion_allowed(ty);}
};

//	Attribute LastError class definition
class LastErrorAttrib: public Tango::Attr
{
public:
	LastErrorAttrib():Attr("LastError",
			Tango::DEV_STRING, Tango::READ) {};
	~LastErrorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_LastError(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_LastError_allowed(ty);}
};

//	Attribute MotorTemperature class definition
class MotorTemperatureAttrib: public Tango::Attr
{
public:
	MotorTemperatureAttrib():Attr("MotorTemperature",
			Tango::DEV_USHORT, Tango::READ) {};
	~MotorTemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_MotorTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_MotorTemperature_allowed(ty);}
};

//	Attribute OperatingHours class definition
class OperatingHoursAttrib: public Tango::Attr
{
public:
	OperatingHoursAttrib():Attr("OperatingHours",
			Tango::DEV_FLOAT, Tango::READ) {};
	~OperatingHoursAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_OperatingHours(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_OperatingHours_allowed(ty);}
};

//	Attribute Power class definition
class PowerAttrib: public Tango::Attr
{
public:
	PowerAttrib():Attr("Power",
			Tango::DEV_FLOAT, Tango::READ) {};
	~PowerAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_Power(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_Power_allowed(ty);}
};

//	Attribute PumpBottomTemperature class definition
class PumpBottomTemperatureAttrib: public Tango::Attr
{
public:
	PumpBottomTemperatureAttrib():Attr("PumpBottomTemperature",
			Tango::DEV_USHORT, Tango::READ) {};
	~PumpBottomTemperatureAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_PumpBottomTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_PumpBottomTemperature_allowed(ty);}
};

//	Attribute RotorImbalance class definition
class RotorImbalanceAttrib: public Tango::Attr
{
public:
	RotorImbalanceAttrib():Attr("RotorImbalance",
			Tango::DEV_USHORT, Tango::READ) {};
	~RotorImbalanceAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_RotorImbalance(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_RotorImbalance_allowed(ty);}
};

//	Attribute StandbySpeed class definition
class StandbySpeedAttrib: public Tango::Attr
{
public:
	StandbySpeedAttrib():Attr("StandbySpeed",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~StandbySpeedAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<TM700Srv *>(dev))->read_StandbySpeed(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<TM700Srv *>(dev))->write_StandbySpeed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<TM700Srv *>(dev))->is_StandbySpeed_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command Start class definition
class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TM700Srv *>(dev))->is_Start_allowed(any);}
};

//	Command Stop class definition
class StopClass : public Tango::Command
{
public:
	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TM700Srv *>(dev))->is_Stop_allowed(any);}
};

//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TM700Srv *>(dev))->is_Reset_allowed(any);}
};

//	Command getError class definition
class getErrorClass : public Tango::Command
{
public:
	getErrorClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	getErrorClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~getErrorClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TM700Srv *>(dev))->is_getError_allowed(any);}
};


/**
 *	The TM700SrvClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  TM700SrvClass : public Tango::DeviceClass
#else
class TM700SrvClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(TM700SrvClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static TM700SrvClass *init(const char *);
		static TM700SrvClass *instance();
		~TM700SrvClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		TM700SrvClass(string &);
		static TM700SrvClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	TM700Srv_H
