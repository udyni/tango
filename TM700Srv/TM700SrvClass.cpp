/*----- PROTECTED REGION ID(TM700SrvClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        TM700SrvClass.cpp
//
// description : C++ source for the TM700SrvClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the TM700Srv once per process.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TM700SrvClass.h>

/*----- PROTECTED REGION END -----*/	//	TM700SrvClass.cpp

//-------------------------------------------------------------------
/**
 *	Create TM700SrvClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_TM700Srv_class(const char *name) {
		return TM700Srv_ns::TM700SrvClass::init(name);
	}
}

namespace TM700Srv_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
TM700SrvClass *TM700SrvClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		TM700SrvClass::TM700SrvClass(string &s)
 * description : 	constructor for the TM700SrvClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
TM700SrvClass::TM700SrvClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering TM700SrvClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(TM700SrvClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::constructor

	cout2 << "Leaving TM700SrvClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		TM700SrvClass::~TM700SrvClass()
 * description : 	destructor for the TM700SrvClass
 */
//--------------------------------------------------------
TM700SrvClass::~TM700SrvClass()
{
	/*----- PROTECTED REGION ID(TM700SrvClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		TM700SrvClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
TM700SrvClass *TM700SrvClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new TM700SrvClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		TM700SrvClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
TM700SrvClass *TM700SrvClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		StartClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StartClass::execute(): arrived" << endl;
	((static_cast<TM700Srv *>(device))->start());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StopClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopClass::execute(): arrived" << endl;
	((static_cast<TM700Srv *>(device))->stop());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetClass::execute(): arrived" << endl;
	((static_cast<TM700Srv *>(device))->reset());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		getErrorClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *getErrorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "getErrorClass::execute(): arrived" << endl;
	Tango::DevUShort argin;
	extract(in_any, argin);
	return insert((static_cast<TM700Srv *>(device))->get_error(argin));
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum TM700SrvClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum TM700SrvClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum TM700SrvClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void TM700SrvClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "proxy";
	prop_desc = "Communication proxy with the serial device";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "address";
	prop_desc = "RS485 address of the pump (from 0 to 31)";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "polling";
	prop_desc = "Pump status polling time";
	prop_def  = "500";
	vect_data.clear();
	vect_data.push_back("500");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "expertPolling";
	prop_desc = "Caching time for pseudo-polling in ms. It the last read is newer than this time, the cached value is sent.";
	prop_def  = "10000";
	vect_data.clear();
	vect_data.push_back("10000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void TM700SrvClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Device server for Pfeiffer turbopumps equipped with TM700 drive units.");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void TM700SrvClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(TM700SrvClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new TM700Srv(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		TM700Srv *dev = static_cast<TM700Srv *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(TM700SrvClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void TM700SrvClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(TM700SrvClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::attribute_factory_before
	//	Attribute : BearingTemperature
	BearingTemperatureAttrib	*bearingtemperature = new BearingTemperatureAttrib();
	Tango::UserDefaultAttrProp	bearingtemperature_prop;
	bearingtemperature_prop.set_description("Actual bearing temperature");
	bearingtemperature_prop.set_label("Bearing temperature");
	bearingtemperature_prop.set_unit("\xC2\xB0" "C");
	bearingtemperature_prop.set_standard_unit("\xC2\xB0" "C");
	bearingtemperature_prop.set_display_unit("\xC2\xB0" "C");
	bearingtemperature_prop.set_format("%d");
	//	max_value	not set for BearingTemperature
	//	min_value	not set for BearingTemperature
	//	max_alarm	not set for BearingTemperature
	//	min_alarm	not set for BearingTemperature
	//	max_warning	not set for BearingTemperature
	//	min_warning	not set for BearingTemperature
	//	delta_t	not set for BearingTemperature
	//	delta_val	not set for BearingTemperature
	
	bearingtemperature->set_default_properties(bearingtemperature_prop);
	//	Not Polled
	bearingtemperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	bearingtemperature->set_change_event(true, false);
	att_list.push_back(bearingtemperature);

	//	Attribute : BearingWear
	BearingWearAttrib	*bearingwear = new BearingWearAttrib();
	Tango::UserDefaultAttrProp	bearingwear_prop;
	bearingwear_prop.set_description("Wear conditions of the safety bearings");
	bearingwear_prop.set_label("Bearing wear");
	bearingwear_prop.set_unit("%");
	bearingwear_prop.set_standard_unit("%");
	bearingwear_prop.set_display_unit("%");
	bearingwear_prop.set_format("%d");
	//	max_value	not set for BearingWear
	//	min_value	not set for BearingWear
	//	max_alarm	not set for BearingWear
	//	min_alarm	not set for BearingWear
	//	max_warning	not set for BearingWear
	//	min_warning	not set for BearingWear
	//	delta_t	not set for BearingWear
	//	delta_val	not set for BearingWear
	
	bearingwear->set_default_properties(bearingwear_prop);
	//	Not Polled
	bearingwear->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(bearingwear);

	//	Attribute : ConverterTemperature
	ConverterTemperatureAttrib	*convertertemperature = new ConverterTemperatureAttrib();
	Tango::UserDefaultAttrProp	convertertemperature_prop;
	convertertemperature_prop.set_description("Actual converter temperature");
	convertertemperature_prop.set_label("Converter temperature");
	convertertemperature_prop.set_unit("\xC2\xB0" "C");
	convertertemperature_prop.set_standard_unit("\xC2\xB0" "C");
	convertertemperature_prop.set_display_unit("\xC2\xB0" "C");
	convertertemperature_prop.set_format("%d");
	//	max_value	not set for ConverterTemperature
	//	min_value	not set for ConverterTemperature
	//	max_alarm	not set for ConverterTemperature
	//	min_alarm	not set for ConverterTemperature
	//	max_warning	not set for ConverterTemperature
	//	min_warning	not set for ConverterTemperature
	//	delta_t	not set for ConverterTemperature
	//	delta_val	not set for ConverterTemperature
	
	convertertemperature->set_default_properties(convertertemperature_prop);
	//	Not Polled
	convertertemperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	convertertemperature->set_change_event(true, false);
	att_list.push_back(convertertemperature);

	//	Attribute : Current
	CurrentAttrib	*current = new CurrentAttrib();
	Tango::UserDefaultAttrProp	current_prop;
	current_prop.set_description("Actual current value of the intermediate circuit of the frequency converter");
	current_prop.set_label("Current");
	current_prop.set_unit("A");
	current_prop.set_standard_unit("A");
	current_prop.set_display_unit("A");
	current_prop.set_format("%.1f");
	//	max_value	not set for Current
	//	min_value	not set for Current
	//	max_alarm	not set for Current
	//	min_alarm	not set for Current
	//	max_warning	not set for Current
	//	min_warning	not set for Current
	//	delta_t	not set for Current
	//	delta_val	not set for Current
	
	current->set_default_properties(current_prop);
	//	Not Polled
	current->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	current->set_change_event(true, false);
	att_list.push_back(current);

	//	Attribute : ElecOpHours
	ElecOpHoursAttrib	*elecophours = new ElecOpHoursAttrib();
	Tango::UserDefaultAttrProp	elecophours_prop;
	elecophours_prop.set_description("Operating hours of the electronics");
	elecophours_prop.set_label("Electronics operating hours");
	elecophours_prop.set_unit("h");
	elecophours_prop.set_standard_unit("h");
	elecophours_prop.set_display_unit("h");
	elecophours_prop.set_format("%d");
	//	max_value	not set for ElecOpHours
	//	min_value	not set for ElecOpHours
	//	max_alarm	not set for ElecOpHours
	//	min_alarm	not set for ElecOpHours
	//	max_warning	not set for ElecOpHours
	//	min_warning	not set for ElecOpHours
	//	delta_t	not set for ElecOpHours
	//	delta_val	not set for ElecOpHours
	
	elecophours->set_default_properties(elecophours_prop);
	//	Not Polled
	elecophours->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(elecophours);

	//	Attribute : ElectronicsTemperature
	ElectronicsTemperatureAttrib	*electronicstemperature = new ElectronicsTemperatureAttrib();
	Tango::UserDefaultAttrProp	electronicstemperature_prop;
	electronicstemperature_prop.set_description("Temperature of the electronics");
	electronicstemperature_prop.set_label("Electronics temperature");
	electronicstemperature_prop.set_unit("\xC2\xB0" "C");
	electronicstemperature_prop.set_standard_unit("\xC2\xB0" "C");
	electronicstemperature_prop.set_display_unit("\xC2\xB0" "C");
	electronicstemperature_prop.set_format("%d");
	//	max_value	not set for ElectronicsTemperature
	//	min_value	not set for ElectronicsTemperature
	//	max_alarm	not set for ElectronicsTemperature
	//	min_alarm	not set for ElectronicsTemperature
	//	max_warning	not set for ElectronicsTemperature
	//	min_warning	not set for ElectronicsTemperature
	//	delta_t	not set for ElectronicsTemperature
	//	delta_val	not set for ElectronicsTemperature
	
	electronicstemperature->set_default_properties(electronicstemperature_prop);
	//	Not Polled
	electronicstemperature->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(electronicstemperature);

	//	Attribute : EnableStandby
	EnableStandbyAttrib	*enablestandby = new EnableStandbyAttrib();
	Tango::UserDefaultAttrProp	enablestandby_prop;
	enablestandby_prop.set_description("Enable standby mode");
	enablestandby_prop.set_label("Enable standby");
	//	unit	not set for EnableStandby
	//	standard_unit	not set for EnableStandby
	//	display_unit	not set for EnableStandby
	//	format	not set for EnableStandby
	//	max_value	not set for EnableStandby
	//	min_value	not set for EnableStandby
	//	max_alarm	not set for EnableStandby
	//	min_alarm	not set for EnableStandby
	//	max_warning	not set for EnableStandby
	//	min_warning	not set for EnableStandby
	//	delta_t	not set for EnableStandby
	//	delta_val	not set for EnableStandby
	
	enablestandby->set_default_properties(enablestandby_prop);
	//	Not Polled
	enablestandby->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(enablestandby);

	//	Attribute : FirmwareVersion
	FirmwareVersionAttrib	*firmwareversion = new FirmwareVersionAttrib();
	Tango::UserDefaultAttrProp	firmwareversion_prop;
	firmwareversion_prop.set_description("Controller firmware version");
	firmwareversion_prop.set_label("Firmware version");
	//	unit	not set for FirmwareVersion
	//	standard_unit	not set for FirmwareVersion
	//	display_unit	not set for FirmwareVersion
	//	format	not set for FirmwareVersion
	//	max_value	not set for FirmwareVersion
	//	min_value	not set for FirmwareVersion
	//	max_alarm	not set for FirmwareVersion
	//	min_alarm	not set for FirmwareVersion
	//	max_warning	not set for FirmwareVersion
	//	min_warning	not set for FirmwareVersion
	//	delta_t	not set for FirmwareVersion
	//	delta_val	not set for FirmwareVersion
	
	firmwareversion->set_default_properties(firmwareversion_prop);
	//	Not Polled
	firmwareversion->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(firmwareversion);

	//	Attribute : Frequency
	FrequencyAttrib	*frequency = new FrequencyAttrib();
	Tango::UserDefaultAttrProp	frequency_prop;
	frequency_prop.set_description("Actual output frequency of the converter");
	frequency_prop.set_label("Frequency");
	frequency_prop.set_unit("Hz");
	frequency_prop.set_standard_unit("Hz");
	frequency_prop.set_display_unit("Hz");
	frequency_prop.set_format("%d");
	//	max_value	not set for Frequency
	//	min_value	not set for Frequency
	//	max_alarm	not set for Frequency
	//	min_alarm	not set for Frequency
	//	max_warning	not set for Frequency
	//	min_warning	not set for Frequency
	//	delta_t	not set for Frequency
	//	delta_val	not set for Frequency
	
	frequency->set_default_properties(frequency_prop);
	//	Not Polled
	frequency->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	frequency->set_change_event(true, false);
	att_list.push_back(frequency);

	//	Attribute : GasMode
	GasModeAttrib	*gasmode = new GasModeAttrib();
	Tango::UserDefaultAttrProp	gasmode_prop;
	gasmode_prop.set_description("Select gas mode for the turbopump");
	gasmode_prop.set_label("Gas mode");
	//	unit	not set for GasMode
	//	standard_unit	not set for GasMode
	//	display_unit	not set for GasMode
	//	format	not set for GasMode
	//	max_value	not set for GasMode
	//	min_value	not set for GasMode
	//	max_alarm	not set for GasMode
	//	min_alarm	not set for GasMode
	//	max_warning	not set for GasMode
	//	min_warning	not set for GasMode
	//	delta_t	not set for GasMode
	//	delta_val	not set for GasMode
	
	{
		vector<string> labels;
		labels.push_back("Heavy gases");
		labels.push_back("Light gases");
		labels.push_back("Helium");
		gasmode_prop.set_enum_labels(labels);
	}
	gasmode->set_default_properties(gasmode_prop);
	//	Not Polled
	gasmode->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(gasmode);

	//	Attribute : HardwareVersion
	HardwareVersionAttrib	*hardwareversion = new HardwareVersionAttrib();
	Tango::UserDefaultAttrProp	hardwareversion_prop;
	hardwareversion_prop.set_description("Controller hardware version");
	hardwareversion_prop.set_label("Hardware version");
	//	unit	not set for HardwareVersion
	//	standard_unit	not set for HardwareVersion
	//	display_unit	not set for HardwareVersion
	//	format	not set for HardwareVersion
	//	max_value	not set for HardwareVersion
	//	min_value	not set for HardwareVersion
	//	max_alarm	not set for HardwareVersion
	//	min_alarm	not set for HardwareVersion
	//	max_warning	not set for HardwareVersion
	//	min_warning	not set for HardwareVersion
	//	delta_t	not set for HardwareVersion
	//	delta_val	not set for HardwareVersion
	
	hardwareversion->set_default_properties(hardwareversion_prop);
	//	Not Polled
	hardwareversion->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(hardwareversion);

	//	Attribute : LastError
	LastErrorAttrib	*lasterror = new LastErrorAttrib();
	Tango::UserDefaultAttrProp	lasterror_prop;
	//	description	not set for LastError
	//	label	not set for LastError
	//	unit	not set for LastError
	//	standard_unit	not set for LastError
	//	display_unit	not set for LastError
	//	format	not set for LastError
	//	max_value	not set for LastError
	//	min_value	not set for LastError
	//	max_alarm	not set for LastError
	//	min_alarm	not set for LastError
	//	max_warning	not set for LastError
	//	min_warning	not set for LastError
	//	delta_t	not set for LastError
	//	delta_val	not set for LastError
	
	lasterror->set_default_properties(lasterror_prop);
	//	Not Polled
	lasterror->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	lasterror->set_change_event(true, false);
	att_list.push_back(lasterror);

	//	Attribute : MotorTemperature
	MotorTemperatureAttrib	*motortemperature = new MotorTemperatureAttrib();
	Tango::UserDefaultAttrProp	motortemperature_prop;
	motortemperature_prop.set_description("Actual motor temperature");
	motortemperature_prop.set_label("Motor temperature");
	motortemperature_prop.set_unit("\xC2\xB0" "C");
	motortemperature_prop.set_standard_unit("\xC2\xB0" "C");
	motortemperature_prop.set_display_unit("\xC2\xB0" "C");
	motortemperature_prop.set_format("%d");
	//	max_value	not set for MotorTemperature
	//	min_value	not set for MotorTemperature
	//	max_alarm	not set for MotorTemperature
	//	min_alarm	not set for MotorTemperature
	//	max_warning	not set for MotorTemperature
	//	min_warning	not set for MotorTemperature
	//	delta_t	not set for MotorTemperature
	//	delta_val	not set for MotorTemperature
	
	motortemperature->set_default_properties(motortemperature_prop);
	//	Not Polled
	motortemperature->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	motortemperature->set_change_event(true, false);
	att_list.push_back(motortemperature);

	//	Attribute : OperatingHours
	OperatingHoursAttrib	*operatinghours = new OperatingHoursAttrib();
	Tango::UserDefaultAttrProp	operatinghours_prop;
	//	description	not set for OperatingHours
	operatinghours_prop.set_label("Total operating hours");
	operatinghours_prop.set_unit("h");
	operatinghours_prop.set_standard_unit("h");
	operatinghours_prop.set_display_unit("h");
	operatinghours_prop.set_format("%.2f");
	//	max_value	not set for OperatingHours
	//	min_value	not set for OperatingHours
	//	max_alarm	not set for OperatingHours
	//	min_alarm	not set for OperatingHours
	//	max_warning	not set for OperatingHours
	//	min_warning	not set for OperatingHours
	//	delta_t	not set for OperatingHours
	//	delta_val	not set for OperatingHours
	
	operatinghours->set_default_properties(operatinghours_prop);
	//	Not Polled
	operatinghours->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	operatinghours->set_change_event(true, false);
	att_list.push_back(operatinghours);

	//	Attribute : Power
	PowerAttrib	*power = new PowerAttrib();
	Tango::UserDefaultAttrProp	power_prop;
	power_prop.set_description("Power consumption");
	power_prop.set_label("Power");
	power_prop.set_unit("W");
	power_prop.set_standard_unit("W");
	power_prop.set_display_unit("W");
	power_prop.set_format("%.1f");
	//	max_value	not set for Power
	//	min_value	not set for Power
	//	max_alarm	not set for Power
	//	min_alarm	not set for Power
	//	max_warning	not set for Power
	//	min_warning	not set for Power
	//	delta_t	not set for Power
	//	delta_val	not set for Power
	
	power->set_default_properties(power_prop);
	//	Not Polled
	power->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	power->set_change_event(true, false);
	att_list.push_back(power);

	//	Attribute : PumpBottomTemperature
	PumpBottomTemperatureAttrib	*pumpbottomtemperature = new PumpBottomTemperatureAttrib();
	Tango::UserDefaultAttrProp	pumpbottomtemperature_prop;
	pumpbottomtemperature_prop.set_description("Temperature of the bottom of the pump");
	pumpbottomtemperature_prop.set_label("Pump bottom temperature");
	pumpbottomtemperature_prop.set_unit("\xC2\xB0" "C");
	pumpbottomtemperature_prop.set_standard_unit("\xC2\xB0" "C");
	pumpbottomtemperature_prop.set_display_unit("\xC2\xB0" "C");
	pumpbottomtemperature_prop.set_format("%d");
	//	max_value	not set for PumpBottomTemperature
	//	min_value	not set for PumpBottomTemperature
	//	max_alarm	not set for PumpBottomTemperature
	//	min_alarm	not set for PumpBottomTemperature
	//	max_warning	not set for PumpBottomTemperature
	//	min_warning	not set for PumpBottomTemperature
	//	delta_t	not set for PumpBottomTemperature
	//	delta_val	not set for PumpBottomTemperature
	
	pumpbottomtemperature->set_default_properties(pumpbottomtemperature_prop);
	//	Not Polled
	pumpbottomtemperature->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(pumpbottomtemperature);

	//	Attribute : RotorImbalance
	RotorImbalanceAttrib	*rotorimbalance = new RotorImbalanceAttrib();
	Tango::UserDefaultAttrProp	rotorimbalance_prop;
	rotorimbalance_prop.set_description("Rotor out-of-balance condition");
	rotorimbalance_prop.set_label("Rotor imbalance");
	rotorimbalance_prop.set_unit("%");
	rotorimbalance_prop.set_standard_unit("%");
	rotorimbalance_prop.set_display_unit("%");
	rotorimbalance_prop.set_format("%d");
	//	max_value	not set for RotorImbalance
	//	min_value	not set for RotorImbalance
	//	max_alarm	not set for RotorImbalance
	//	min_alarm	not set for RotorImbalance
	//	max_warning	not set for RotorImbalance
	//	min_warning	not set for RotorImbalance
	//	delta_t	not set for RotorImbalance
	//	delta_val	not set for RotorImbalance
	
	rotorimbalance->set_default_properties(rotorimbalance_prop);
	//	Not Polled
	rotorimbalance->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(rotorimbalance);

	//	Attribute : StandbySpeed
	StandbySpeedAttrib	*standbyspeed = new StandbySpeedAttrib();
	Tango::UserDefaultAttrProp	standbyspeed_prop;
	standbyspeed_prop.set_description("Standby rotation speed");
	standbyspeed_prop.set_label("Standby speed");
	standbyspeed_prop.set_unit("%");
	standbyspeed_prop.set_standard_unit("%");
	standbyspeed_prop.set_display_unit("%");
	standbyspeed_prop.set_format("%d");
	//	max_value	not set for StandbySpeed
	//	min_value	not set for StandbySpeed
	//	max_alarm	not set for StandbySpeed
	//	min_alarm	not set for StandbySpeed
	//	max_warning	not set for StandbySpeed
	//	min_warning	not set for StandbySpeed
	//	delta_t	not set for StandbySpeed
	//	delta_val	not set for StandbySpeed
	
	standbyspeed->set_default_properties(standbyspeed_prop);
	//	Not Polled
	standbyspeed->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(standbyspeed);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(TM700SrvClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void TM700SrvClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(TM700SrvClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::pipe_factory_before
	/*----- PROTECTED REGION ID(TM700SrvClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void TM700SrvClass::command_factory()
{
	/*----- PROTECTED REGION ID(TM700SrvClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::command_factory_before

	//	Set polling perod for command State
	Tango::Command	&stateCmd = get_cmd_by_name("State");
	stateCmd.set_polling_period(500);
	

	//	Command Start
	StartClass	*pStartCmd =
		new StartClass("Start",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStartCmd);

	//	Command Stop
	StopClass	*pStopCmd =
		new StopClass("Stop",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopCmd);

	//	Command Reset
	ResetClass	*pResetCmd =
		new ResetClass("Reset",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetCmd);

	//	Command getError
	getErrorClass	*pgetErrorCmd =
		new getErrorClass("getError",
			Tango::DEV_USHORT, Tango::DEV_STRING,
			"Error index (min 0, max 39)",
			"Error message",
			Tango::OPERATOR);
	command_list.push_back(pgetErrorCmd);

	/*----- PROTECTED REGION ID(TM700SrvClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		TM700SrvClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void TM700SrvClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(TM700SrvClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		TM700SrvClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void TM700SrvClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		TM700Srv *dev = static_cast<TM700Srv *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(TM700SrvClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : TM700SrvClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *TM700SrvClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(TM700SrvClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	TM700SrvClass::Additional Methods
} //	namespace
