/*----- PROTECTED REGION ID(RawProxy.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        RawProxy.cpp
//
// description : C++ source for the RawProxy class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               RawProxy are implemented in this file.
//
// project :     Raw proxy for serial communication
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <RawProxy.h>
#include <RawProxyClass.h>

/*----- PROTECTED REGION END -----*/	//	RawProxy.cpp

/**
 *  RawProxy class description:
 *    Raw proxy for binary serial communication. May be used locally or through TCP/IP
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  Connect       |  connect
//  Disconnect    |  disconnect
//  Flush         |  flush
//  Send          |  send
//  Recv          |  recv
//  SyncSendRecv  |  sync_send_recv
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace RawProxy_ns
{
/*----- PROTECTED REGION ID(RawProxy::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	RawProxy::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : RawProxy::RawProxy()
 *	Description : Constructors for a Tango device
 *                implementing the classRawProxy
 */
//--------------------------------------------------------
RawProxy::RawProxy(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(RawProxy::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	RawProxy::constructor_1
}
//--------------------------------------------------------
RawProxy::RawProxy(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(RawProxy::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	RawProxy::constructor_2
}
//--------------------------------------------------------
RawProxy::RawProxy(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(RawProxy::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	RawProxy::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : RawProxy::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void RawProxy::delete_device()
{
	DEBUG_STREAM << "RawProxy::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(RawProxy::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	if(sock)
		delete sock;
	sock = NULL;

	/*----- PROTECTED REGION END -----*/	//	RawProxy::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : RawProxy::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void RawProxy::init_device()
{
	DEBUG_STREAM << "RawProxy::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(RawProxy::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	RawProxy::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	if (mandatoryNotDefined)
		return;
	

	/*----- PROTECTED REGION ID(RawProxy::init_device) ENABLED START -----*/

	force_disconnect = false;

	//	Initialize device
	if(deviceType == "serial") {
		sock = new SerialSocket();

	} else if(deviceType == "tcp") {
		sock = new TcpSocket();

	} else {
		TangoSys_OMemStream msg;
		msg << "Device type '" << deviceType << "' is not supported.";
		ERROR_STREAM << "RawProxy::init_device(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Unsupported type",
					msg.str(),
					(const char *)"RawProxy::init_device()");
	}

	if(autoReconnect) {
		try {
			this->connect();
		} catch(Tango::DevFailed &e) {
			set_state(Tango::FAULT);
			set_status("Connection at startup failed.");
		}
	} else {
		set_state(Tango::OFF);
		set_status("Disconnected.");
	}

	/*----- PROTECTED REGION END -----*/	//	RawProxy::init_device
}

//--------------------------------------------------------
/**
 *	Method      : RawProxy::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void RawProxy::get_device_property()
{
	/*----- PROTECTED REGION ID(RawProxy::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	RawProxy::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DeviceAddress"));
	dev_prop.push_back(Tango::DbDatum("Timeout"));
	dev_prop.push_back(Tango::DbDatum("AutoReconnect"));
	dev_prop.push_back(Tango::DbDatum("DeviceType"));
	dev_prop.push_back(Tango::DbDatum("SerialBaud"));
	dev_prop.push_back(Tango::DbDatum("SerialSetup"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on RawProxyClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		RawProxyClass	*ds_class =
			(static_cast<RawProxyClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize DeviceAddress from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceAddress;
		else {
			//	Try to initialize DeviceAddress from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceAddress;
		}
		//	And try to extract DeviceAddress value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceAddress;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize Timeout from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  timeout;
		else {
			//	Try to initialize Timeout from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  timeout;
		}
		//	And try to extract Timeout value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  timeout;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize AutoReconnect from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  autoReconnect;
		else {
			//	Try to initialize AutoReconnect from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  autoReconnect;
		}
		//	And try to extract AutoReconnect value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  autoReconnect;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize DeviceType from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceType;
		else {
			//	Try to initialize DeviceType from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceType;
		}
		//	And try to extract DeviceType value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceType;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize SerialBaud from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serialBaud;
		else {
			//	Try to initialize SerialBaud from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serialBaud;
		}
		//	And try to extract SerialBaud value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialBaud;

		//	Try to initialize SerialSetup from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serialSetup;
		else {
			//	Try to initialize SerialSetup from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serialSetup;
		}
		//	And try to extract SerialSetup value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialSetup;

	}

	/*----- PROTECTED REGION ID(RawProxy::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	RawProxy::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : RawProxy::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void RawProxy::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(RawProxy::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	RawProxy::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : RawProxy::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void RawProxy::always_executed_hook()
{
	INFO_STREAM << "RawProxy::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"RawProxy::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(RawProxy::always_executed_hook) ENABLED START -----*/

	if(!(sock->isConnected())) {
		if(get_state() == Tango::ON) {
			set_state(Tango::FAULT);
			set_status("Connection closed for an error");
		}

		if(autoReconnect && !force_disconnect) {
			// Try to reconnect
			try {
				this->connect();
				set_state(Tango::ON);
				set_status("Reconnected successfully");
			} catch(Tango::DevFailed &e) {
				set_state(Tango::FAULT);
				set_status("Reconnection failed");
			}
		}
	}

	/*----- PROTECTED REGION END -----*/	//	RawProxy::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : RawProxy::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void RawProxy::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "RawProxy::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(RawProxy::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	RawProxy::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : RawProxy::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void RawProxy::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(RawProxy::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	RawProxy::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command Connect related method
 *	Description: Open connection to device
 *
 */
//--------------------------------------------------------
void RawProxy::connect()
{
	DEBUG_STREAM << "RawProxy::Connect()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(RawProxy::connect) ENABLED START -----*/

	try {
		sock->connect(deviceAddress);

		if(deviceType == "serial") {
			// Cast socket to serial type
			SerialSocket *temp = static_cast<SerialSocket*>(sock);

			// Convert baud rate to constant
			speed_t baud;
			Tango::DevLong tempbaud = (serialBaud / 9600) * 9600;
			switch(tempbaud) {
				case 9600:
				default:
					baud = B9600;
					break;
				case 19200:
					baud = B19200;
					break;
				case 38400:
					baud = B38400;
					break;
				case 57600:
					baud = B57600;
					break;
				case 115200:
					baud = B115200;
					break;
			}

			// Extract port configuration
			char parity = 'N';
			uint8_t databits = 8;
			uint8_t stopbits = 1;
			if(sscanf(serialSetup.c_str(), "%hhu%c%hhu", &databits, &parity, &stopbits) == 3) {
				temp->configure_port(baud, parity, databits, stopbits);
			} else {
				temp->configure_port(baud);
			}

			// Set serial port as raw for USS
			temp->set_raw();
		}

		force_disconnect = false;
		set_state(Tango::ON);
		set_status("Connection successful");

	} catch(SocketException& e) {
		TangoSys_OMemStream msg;
		msg << "Connection failed (Error: " << e.what() << ")";
		ERROR_STREAM << "RawProxy::Connect(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Initialization failed",
					msg.str(),
					(const char *)"RawProxy::Connect()");
	}

	/*----- PROTECTED REGION END -----*/	//	RawProxy::connect
}
//--------------------------------------------------------
/**
 *	Command Disconnect related method
 *	Description: Close connection to device
 *
 */
//--------------------------------------------------------
void RawProxy::disconnect()
{
	DEBUG_STREAM << "RawProxy::Disconnect()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(RawProxy::disconnect) ENABLED START -----*/

	sock->disconnect();
	force_disconnect = true;
	set_state(Tango::OFF);
	set_status("Disconnected.");

	/*----- PROTECTED REGION END -----*/	//	RawProxy::disconnect
}
//--------------------------------------------------------
/**
 *	Command Flush related method
 *	Description: Make sure that the receive buffer is empty.
 *
 */
//--------------------------------------------------------
void RawProxy::flush()
{
	DEBUG_STREAM << "RawProxy::Flush()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(RawProxy::flush) ENABLED START -----*/

	try {
		sock->flush();

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Flush failed (Error: " << e.what() << ")";
		ERROR_STREAM << "USSProxy::Flush(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Flush failed",
					msg.str(),
					(const char *)"USSProxy::Flush()");
	}

	/*----- PROTECTED REGION END -----*/	//	RawProxy::flush
}
//--------------------------------------------------------
/**
 *	Command Send related method
 *	Description: Send a binary message to the socket
 *
 *	@param argin Message
 *	@returns Number of bytes sent
 */
//--------------------------------------------------------
Tango::DevLong RawProxy::send(const Tango::DevVarCharArray *argin)
{
	Tango::DevLong argout;
	DEBUG_STREAM << "RawProxy::Send()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(RawProxy::send) ENABLED START -----*/

	argout = 0;

	if(argin->length() > 0) {
		try {
			argout = sock->send((const char*)argin->get_buffer(), argin->length());

		} catch(SocketException &e) {
			TangoSys_OMemStream msg;
			msg << "Send failed (Error: " << e.what() << ")";
			ERROR_STREAM << "RawProxy::Send(): " << msg.str() << endl;
			Tango::Except::throw_exception(
						(const char *)"Send failed",
						msg.str(),
						(const char *)"RawProxy::Send()");
		}
	}

	/*----- PROTECTED REGION END -----*/	//	RawProxy::send
	return argout;
}
//--------------------------------------------------------
/**
 *	Command Recv related method
 *	Description: Receive a message from the socket
 *
 *	@param argin Number of bytes to read
 *	@returns Received message
 */
//--------------------------------------------------------
Tango::DevVarCharArray *RawProxy::recv(Tango::DevLong argin)
{
	Tango::DevVarCharArray *argout;
	DEBUG_STREAM << "RawProxy::Recv()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(RawProxy::recv) ENABLED START -----*/

	argout = NULL;

	if(argin > 0) {
		// Allocate buffer
		argout = new Tango::DevVarCharArray(argin);
		argout->length(argin);

		try {
			// Receive
			int ans = sock->recv((char*)argout->get_buffer(), argout->length(), timeout);
			if(ans == -1)
				throw SocketException("Timed out");
			
			if(ans > 0 && size_t(ans) < argout->length())
				argout->length(ans);

		} catch(SocketException &e) {
			// Deallocate argout
			delete argout;
			// Throw exception
			TangoSys_OMemStream msg;
			msg << "Recv failed (Error: " << e.what() << ")";
			ERROR_STREAM << "RawProxy::Recv(): " << msg.str() << endl;
			Tango::Except::throw_exception(
						(const char *)"Recv failed",
						msg.str(),
						(const char *)"RawProxy::Recv()");
		}
	}

	/*----- PROTECTED REGION END -----*/	//	RawProxy::recv
	return argout;
}
//--------------------------------------------------------
/**
 *	Command SyncSendRecv related method
 *	Description: Send a message and read output until timeout.
 *               Receive timeout after first read is 1/10 of total timeout.
 *
 *	@param argin Character to send
 *	@returns Response
 */
//--------------------------------------------------------
Tango::DevVarCharArray *RawProxy::sync_send_recv(const Tango::DevVarCharArray *argin)
{
	Tango::DevVarCharArray *argout;
	DEBUG_STREAM << "RawProxy::SyncSendRecv()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(RawProxy::sync_send_recv) ENABLED START -----*/
	
	// First send message
	if(argin->length() > 0) {
		try {
			int ans = sock->send((const char*)argin->get_buffer(), argin->length());
			if(ans != (int)argin->length()) {
				// Incomplete send
				throw SocketException("Incomplete send");
			}

		} catch(SocketException &e) {
			TangoSys_OMemStream msg;
			msg << "Send failed (Error: " << e.what() << ")";
			ERROR_STREAM << "RawProxy::SyncSendRecv(): " << msg.str() << endl;
			Tango::Except::throw_exception(
						(const char *)"Send failed",
						msg.str(),
						(const char *)"RawProxy::SyncSendRecv()");
		}
	} else {
		// No message to send
		return NULL;
	}
	
	#define RECV_PACKET_SIZE 32
	
	// Create global buffer variable
	std::vector<char> buffer;
	// Create local buffer variable
	char temp_buffer[RECV_PACKET_SIZE];

	// Receive response
	try {
		// Try a first receive of one byte with full timeout
		int ans = sock->recv(temp_buffer, 1, timeout);

		if(ans <= 0) {
			// If we get no answer, return with exception
			throw SocketException("Timed out");

		} else {
			// Copy the first byte
			buffer.push_back(temp_buffer[0]);
			memset(temp_buffer, 0, 1);

			// If we get data, start a cycle of reads, with 5 ms timeout. Stop cycle when no more data is received
			while(1) {
				ans = sock->recv(temp_buffer, RECV_PACKET_SIZE, 5);
				if(ans <= 0)
					break;
				buffer.reserve(buffer.size() + ans);
				for(int i = 0; i < ans; i++)
					buffer.push_back(temp_buffer[i]);
				memset(temp_buffer, 0, RECV_PACKET_SIZE);
			}
		}

	} catch(SocketException &e) {
		TangoSys_OMemStream msg;
		msg << "Recv failed (Error: " << e.what() << ")";
		ERROR_STREAM << "RawProxy::SyncSendRecv(): " << msg.str() << endl;
		Tango::Except::throw_exception(
					(const char *)"Recv failed",
					msg.str(),
					(const char *)"RawProxy::SyncSendRecv()");
	}

	// Create output variable
	argout = new Tango::DevVarCharArray(buffer.size());
	argout->length(buffer.size());
	for(size_t i = 0; i < buffer.size(); i++)
		(*argout)[i] = buffer[i];

	/*----- PROTECTED REGION END -----*/	//	RawProxy::sync_send_recv
	return argout;
}

/*----- PROTECTED REGION ID(RawProxy::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	RawProxy::namespace_ending
} //	namespace
