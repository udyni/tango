/*----- PROTECTED REGION ID(Standa8SMC1.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        Standa8SMC1.cpp
//
// description : C++ source for the Standa8SMC1 class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Standa8SMC1 are implemented in this file.
//
// project :     Standa 8SMC1 Device Server
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Standa8SMC1.h>
#include <Standa8SMC1Class.h>

/*----- PROTECTED REGION END -----*/	//	Standa8SMC1.cpp

/**
 *  Standa8SMC1 class description:
 *    Device server for Standa 8SMC1-USBhF stepper motor controllers
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  setHome       |  set_home
//  goHome        |  go_home
//  Stop          |  stop
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Position      |  Tango::DevLong	Scalar
//  Acceleration  |  Tango::DevDouble	Scalar
//  Velocity      |  Tango::DevDouble	Scalar
//  Temperature   |  Tango::DevDouble	Scalar
//  Voltage       |  Tango::DevDouble	Scalar
//================================================================

namespace Standa8SMC1_ns
{
/*----- PROTECTED REGION ID(Standa8SMC1::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::Standa8SMC1()
 *	Description : Constructors for a Tango device
 *                implementing the classStanda8SMC1
 */
//--------------------------------------------------------
Standa8SMC1::Standa8SMC1(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Standa8SMC1::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::constructor_1
}
//--------------------------------------------------------
Standa8SMC1::Standa8SMC1(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Standa8SMC1::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::constructor_2
}
//--------------------------------------------------------
Standa8SMC1::Standa8SMC1(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Standa8SMC1::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Standa8SMC1::delete_device()
{
	DEBUG_STREAM << "Standa8SMC1::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	if(monitor) {
		int *retval;
		monitor->terminate();
		monitor->join((void**)&retval);
	}

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::delete_device
	delete[] attr_Position_read;
	delete[] attr_Acceleration_read;
	delete[] attr_Velocity_read;
	delete[] attr_Temperature_read;
	delete[] attr_Voltage_read;
}

//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Standa8SMC1::init_device()
{
	DEBUG_STREAM << "Standa8SMC1::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Position_read = new Tango::DevLong[1];
	attr_Acceleration_read = new Tango::DevDouble[1];
	attr_Velocity_read = new Tango::DevDouble[1];
	attr_Temperature_read = new Tango::DevDouble[1];
	attr_Voltage_read = new Tango::DevDouble[1];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(Standa8SMC1::init_device) ENABLED START -----*/

	//	Initialize device
	driver = USMC::getInstance();

	DEBUG_STREAM << "Looking for device with serial number '" << serialNumber << "'" << endl;
	dev_id = -1;
	dev_id = driver->getDeviceID(serialNumber);
	if(dev_id == -1) {
		// Device not found
		std::stringstream msg;
		msg << "The requested device with serial number '" << serialNumber << "' is not connected to the system";
		ERROR_STREAM << msg.str() << endl;
		Tango::Except::throw_exception((const char *)"Device not found",
					msg.str(),
					(const char *)"Standa8SMC1::init_device()");
	}
	DEBUG_STREAM << "Found device with ID " << dev_id << endl;

	int r = driver->getMode(dev_id, &dev_mode);
	if(r < 0) {
		// GetMode failed
		std::stringstream msg;
		msg << "getMode failed with error " << r;
		ERROR_STREAM << msg.str() << endl;
		Tango::Except::throw_exception((const char *)"getMode failed",
					msg.str(),
					(const char *)"Standa8SMC1::init_device()");
	}
	r = driver->getParameters(dev_id, &dev_params);
	if(r < 0) {
		// GetMode failed
		std::stringstream msg;
		msg << "getParameters failed with error " << r;
		ERROR_STREAM << msg.str() << endl;
		Tango::Except::throw_exception((const char *)"getParameters failed",
					msg.str(),
					(const char *)"Standa8SMC1::init_device()");
	}
	r = driver->getStartParameters(dev_id, &dev_start_params);
	if(r < 0) {
		// GetMode failed
		std::stringstream msg;
		msg << "getStartParameters failed with error " << r;
		ERROR_STREAM << msg.str() << endl;
		Tango::Except::throw_exception((const char *)"getStartParameters failed",
					msg.str(),
					(const char *)"Standa8SMC1::init_device()");
	}

	monitor = new MonitorThread(this);

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Standa8SMC1::get_device_property()
{
	/*----- PROTECTED REGION ID(Standa8SMC1::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("SerialNumber"));
	dev_prop.push_back(Tango::DbDatum("polling"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on Standa8SMC1Class to get class property
		Tango::DbDatum	def_prop, cl_prop;
		Standa8SMC1Class	*ds_class =
			(static_cast<Standa8SMC1Class *>(get_device_class()));
		int	i = -1;

		//	Try to initialize SerialNumber from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  serialNumber;
		else {
			//	Try to initialize SerialNumber from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  serialNumber;
		}
		//	And try to extract SerialNumber value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialNumber;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize polling from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  polling;
		else {
			//	Try to initialize polling from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  polling;
		}
		//	And try to extract polling value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  polling;

	}

	/*----- PROTECTED REGION ID(Standa8SMC1::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void Standa8SMC1::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(Standa8SMC1::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;

		/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Standa8SMC1::always_executed_hook()
{
// 	DEBUG_STREAM << "Standa8SMC1::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"Standa8SMC1::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(Standa8SMC1::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Standa8SMC1::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
// 	DEBUG_STREAM << "Standa8SMC1::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Standa8SMC1::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
// 	DEBUG_STREAM << "Standa8SMC1::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::write_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Position related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Standa8SMC1::read_Position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Standa8SMC1::read_Position(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::read_Position) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Position_read);

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::read_Position
}
//--------------------------------------------------------
/**
 *	Write attribute Position related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Standa8SMC1::write_Position(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Standa8SMC1::write_Position(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Standa8SMC1::write_Position) ENABLED START -----*/

	int r = driver->moveTo(dev_id, w_val);
	if(r < 0) {
		// Failed
		std::stringstream msg;
		msg << "Failed to move with error " << r;
		ERROR_STREAM << msg.str() << endl;
		Tango::Except::throw_exception((const char *)"Move failed",
					msg.str(),
					(const char *)"Standa8SMC1::write_Position()");
	}

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::write_Position
}
//--------------------------------------------------------
/**
 *	Read attribute Acceleration related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Standa8SMC1::read_Acceleration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Standa8SMC1::read_Acceleration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::read_Acceleration) ENABLED START -----*/

	*attr_Acceleration_read = dev_params.AccelT;

	//	Set the attribute value
	attr.set_value(attr_Acceleration_read);

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::read_Acceleration
}
//--------------------------------------------------------
/**
 *	Write attribute Acceleration related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Standa8SMC1::write_Acceleration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Standa8SMC1::write_Acceleration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Standa8SMC1::write_Acceleration) ENABLED START -----*/

	float new_ac = w_val;

	dev_params.AccelT = new_ac;
	dev_params.DecelT = new_ac;

	int r = driver->setParameters(dev_id, &dev_params);
	if(r < 0) {
		// Failed
		std::stringstream msg;
		msg << "Failed to set acceleration with error " << r;
		ERROR_STREAM << msg.str() << endl;
		// Rollback
		r = driver->getParameters(dev_id, &dev_params);
		if(r < 0)
			ERROR_STREAM << "Rollback of parameters failed with error " << r << endl;
		Tango::Except::throw_exception((const char *)"Set acceleration failed",
					msg.str(),
					(const char *)"Standa8SMC1::write_Acceleration()");
	}

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::write_Acceleration
}
//--------------------------------------------------------
/**
 *	Read attribute Velocity related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Standa8SMC1::read_Velocity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Standa8SMC1::read_Velocity(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::read_Velocity) ENABLED START -----*/

	float speed = 0;
	driver->getSpeed(dev_id, speed);
	*attr_Velocity_read = speed;

	//	Set the attribute value
	attr.set_value(attr_Velocity_read);

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::read_Velocity
}
//--------------------------------------------------------
/**
 *	Write attribute Velocity related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Standa8SMC1::write_Velocity(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Standa8SMC1::write_Velocity(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Standa8SMC1::write_Velocity) ENABLED START -----*/

	float speed = w_val;
	int r = driver->setSpeed(dev_id, speed);
	if(r < 0) {
		// Failed
		std::stringstream msg;
		msg << "Failed to set velocity with error " << r;
		ERROR_STREAM << msg.str() << endl;
		Tango::Except::throw_exception((const char *)"Set velocity failed",
					msg.str(),
					(const char *)"Standa8SMC1::write_Velocity()");
	}

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::write_Velocity
}
//--------------------------------------------------------
/**
 *	Read attribute Temperature related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Standa8SMC1::read_Temperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Standa8SMC1::read_Temperature(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::read_Temperature) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Temperature_read);

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::read_Temperature
}
//--------------------------------------------------------
/**
 *	Read attribute Voltage related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Standa8SMC1::read_Voltage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Standa8SMC1::read_Voltage(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::read_Voltage) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_Voltage_read);

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::read_Voltage
}

//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Standa8SMC1::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Standa8SMC1::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command setHome related method
 *	Description: Set home reference
 *
 */
//--------------------------------------------------------
void Standa8SMC1::set_home()
{
	DEBUG_STREAM << "Standa8SMC1::setHome()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::set_home) ENABLED START -----*/

	driver->setCurrentPosition(dev_id, 0);

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::set_home
}
//--------------------------------------------------------
/**
 *	Command goHome related method
 *	Description: Go to home reference
 *
 */
//--------------------------------------------------------
void Standa8SMC1::go_home()
{
	DEBUG_STREAM << "Standa8SMC1::goHome()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::go_home) ENABLED START -----*/

	int r = driver->moveTo(dev_id, 0);
	if(r < 0) {
		// Failed
		std::stringstream msg;
		msg << "Failed to move to home with error " << r;
		ERROR_STREAM << msg.str() << endl;
		Tango::Except::throw_exception((const char *)"Move failed",
					msg.str(),
					(const char *)"Standa8SMC1::goHome()");
	}

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::go_home
}
//--------------------------------------------------------
/**
 *	Command Stop related method
 *	Description: Stop move
 *
 */
//--------------------------------------------------------
void Standa8SMC1::stop()
{
	DEBUG_STREAM << "Standa8SMC1::Stop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Standa8SMC1::stop) ENABLED START -----*/

	int r = driver->stop(dev_id);
	if(r < 0) {
		// Failed
		std::stringstream msg;
		msg << "Failed to stop move with error " << r;
		ERROR_STREAM << msg.str() << endl;
		Tango::Except::throw_exception((const char *)"Stop failed",
					msg.str(),
					(const char *)"Standa8SMC1::stop()");
	}

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::stop
}
//--------------------------------------------------------
/**
 *	Method      : Standa8SMC1::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Standa8SMC1::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Standa8SMC1::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Standa8SMC1::namespace_ending) ENABLED START -----*/

//	Additional Methods

MonitorThread::MonitorThread(Standa8SMC1* parent) : _parent(parent), _terminate(false) {
	// Start thread
	start_undetached();
}

MonitorThread::~MonitorThread() {

}

// Millisecond sleep
void MonitorThread::msleep(uint32_t msec) {
	if(msec <= 0)
		return;
	struct timespec st;
	struct timeval start, stop;
	gettimeofday(&start, NULL);
	// Setup delay
	st.tv_sec = msec / 1000;
	st.tv_nsec = (msec % 1000) * 1000000;

	while(1) {
		int ans = nanosleep(&st, NULL);
		if(ans == -1 && errno == EINTR) {
			// Nanosleep was interrupted by a signal
			gettimeofday(&stop, NULL);
			uint32_t rem = msec - ELAPSED_TIME_MS(start, stop);
			if(rem > 0) {
				st.tv_sec = rem / 1000;
				st.tv_nsec = (rem % 1000) * 1000000;
			} else {
				break;
			}
		} else {
			break;
		}
	}
}

// Main loop
void* MonitorThread::run_undetached(void* ptr) {

	struct timeval s, e;

	while(!_terminate) {
		gettimeofday(&s, NULL);

		int r = _parent->driver->getState(_parent->dev_id, &(_parent->dev_state));
		if(r < 0) {
			_parent->set_state(Tango::FAULT);

		} else {
			if(!_parent->dev_state.Power) {
				_parent->set_state(Tango::OFF);
			} else {
				// Moving state
				if(_parent->dev_state.RUN)
					_parent->set_state(Tango::MOVING);
				else
					_parent->set_state(Tango::STANDBY);
			}

			// Position
			if(_parent->dev_state.CurPos != *(_parent->attr_Position_read)) {
				*(_parent->attr_Position_read) = _parent->dev_state.CurPos;
				_parent->push_change_event("Position", _parent->attr_Position_read);
			}

			// Temperature
			if(_parent->dev_state.Temp != *(_parent->attr_Temperature_read)) {
				*(_parent->attr_Temperature_read) = _parent->dev_state.Temp;
				_parent->push_change_event("Temperature", _parent->attr_Temperature_read);
			}

			// Voltage
			if(_parent->dev_state.Voltage != *(_parent->attr_Voltage_read)) {
				*(_parent->attr_Voltage_read) = _parent->dev_state.Voltage;
				_parent->push_change_event("Voltage", _parent->attr_Voltage_read);
			}
		}

		gettimeofday(&e, NULL);
		int elapsed = ELAPSED_TIME_MS(s, e);
		if(elapsed < int(_parent->polling))
			MonitorThread::msleep(_parent->polling - elapsed);
	}

	int *retval = new int();
	*retval = 0;
	return (void*)retval;
}

/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::namespace_ending
} //	namespace
