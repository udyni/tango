/*----- PROTECTED REGION ID(Standa8SMC1.h) ENABLED START -----*/
//=============================================================================
//
// file :        Standa8SMC1.h
//
// description : Include file for the Standa8SMC1 class
//
// project :     Standa 8SMC1 Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Standa8SMC1_H
#define Standa8SMC1_H

#include <tango.h>
#include <libusmc.h>
#include <omnithread.h>

// Macro to measure elapsed time in ms
#ifndef ELAPSED_TIME_MS
#define ELAPSED_TIME_MS(p, l) ( ((l.tv_sec) - (p.tv_sec)) * 1000 + ((l.tv_usec) - (p.tv_usec)) / 1000 )
#endif

/*----- PROTECTED REGION END -----*/	//	Standa8SMC1.h

/**
 *  Standa8SMC1 class description:
 *    Device server for Standa 8SMC1-USBhF stepper motor controllers
 */

namespace Standa8SMC1_ns
{
/*----- PROTECTED REGION ID(Standa8SMC1::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
class MonitorThread;

/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::Additional Class Declarations

class Standa8SMC1 : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Standa8SMC1::Data Members) ENABLED START -----*/

	friend class MonitorThread;

//	Add your own data members
protected:
	// Device ID
	int dev_id;

	// USMC driver
	USMC* driver;

	// Driver structures
	USMC_Mode dev_mode;
	USMC_Parameters dev_params;
	USMC_StartParameters dev_start_params;
	USMC_State dev_state;
	
	// Polling thread
	MonitorThread *monitor;

/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::Data Members

//	Device property data members
public:
	//	SerialNumber:	Serial number of the device
	string	serialNumber;
	//	polling:	Polling period for device position
	Tango::DevULong	polling;

	bool	mandatoryNotDefined;

//	Attribute data members
public:
	Tango::DevDouble	*attr_Position_read;
	Tango::DevDouble	*attr_Acceleration_read;
	Tango::DevDouble	*attr_Velocity_read;
	Tango::DevDouble	*attr_Temperature_read;
	Tango::DevDouble	*attr_Voltage_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Standa8SMC1(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Standa8SMC1(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Standa8SMC1(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Standa8SMC1() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();

	/*
	 *	Check if mandatory property has been set
	 */
	 void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Standa8SMC1::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Standa8SMC1::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Position related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Position(Tango::Attribute &attr);
	virtual void write_Position(Tango::WAttribute &attr);
	virtual bool is_Position_allowed(Tango::AttReqType type);
/**
 *	Attribute Acceleration related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Acceleration(Tango::Attribute &attr);
	virtual void write_Acceleration(Tango::WAttribute &attr);
	virtual bool is_Acceleration_allowed(Tango::AttReqType type);
/**
 *	Attribute Velocity related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Velocity(Tango::Attribute &attr);
	virtual void write_Velocity(Tango::WAttribute &attr);
	virtual bool is_Velocity_allowed(Tango::AttReqType type);
/**
 *	Attribute Temperature related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Temperature(Tango::Attribute &attr);
	virtual bool is_Temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute Voltage related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Voltage(Tango::Attribute &attr);
	virtual bool is_Voltage_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Standa8SMC1::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command setHome related method
	 *	Description: Set home reference
	 *
	 */
	virtual void set_home();
	virtual bool is_setHome_allowed(const CORBA::Any &any);
	/**
	 *	Command goHome related method
	 *	Description: Go to home reference
	 *
	 */
	virtual void go_home();
	virtual bool is_goHome_allowed(const CORBA::Any &any);
	/**
	 *	Command Stop related method
	 *	Description: Stop move
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Standa8SMC1::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Standa8SMC1::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Standa8SMC1::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions
class MonitorThread : public omni_thread {
public:
	MonitorThread(Standa8SMC1* parent);
	~MonitorThread();

	// Terminate thread loop
	void terminate() { _terminate = true; }

	// Millisecond sleep
	static void msleep(uint32_t msec);

protected:
	// Main loop
	void *run_undetached(void* ptr);

private:
	// Copy constructor and assignment operator
	MonitorThread(const MonitorThread&);
	MonitorThread& operator=(const MonitorThread&);

private:
	Standa8SMC1* _parent;
	bool _terminate;

	friend class Standa8SMC1;
};

/*----- PROTECTED REGION END -----*/	//	Standa8SMC1::Additional Classes Definitions

}	//	End of namespace

#endif   //	Standa8SMC1_H
